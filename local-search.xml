<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker系列(二)————安装docker与基础命令</title>
    <link href="/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%BA%8C-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85docker%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%BA%8C-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85docker%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h2><p>​我这里使用的是基于centos的国产某系统，从事过的同行应该知道是什么，它的大部分与centos相同，我测试过，所以如果你是新手，放心使用。</p><p><strong>首先我知道你想安装，但是先别安装</strong></p><p>​在CentOS 8.2版本开始，出于架构更安全以及其与Kubernetes 原生的等原因，CentOS默认安装podman，这是一款与docker类似的容器引擎。</p><p>所以如果你是8.2及以后的版本安装docker后启动任务会出现：</p><p>“Failed to start docker.service: Unit docker.service not found。”</p><p>原因是CentOS默认使用podman代替docker，所以我们需要卸载它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###########卸载podman#############</span><br>yum erase -y podman buildah<br><span class="hljs-comment">#################################</span><br></code></pre></td></tr></table></figure><p>接下来让我们继续：</p><h3 id="1-安装docker依赖环境"><a href="#1-安装docker依赖环境" class="headerlink" title="1.安装docker依赖环境"></a>1.安装docker依赖环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h3 id="2-配置国内docker-ce（社区版）的yum源（采用阿里云）"><a href="#2-配置国内docker-ce（社区版）的yum源（采用阿里云）" class="headerlink" title="2.配置国内docker-ce（社区版）的yum源（采用阿里云）"></a>2.配置国内docker-ce（社区版）的yum源（采用阿里云）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>查看该目录下是否存在docker-ce.repo这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/yum.repos.d<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="3-安装docker-CE"><a href="#3-安装docker-CE" class="headerlink" title="3.安装docker CE"></a>3.安装docker CE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>如果显示哪个包no match</p><p>先查看一下可安装的包版本（如果显示有，那可能是拼写错误）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list 包名 --showduplicates | <span class="hljs-built_in">sort</span> -r<br></code></pre></td></tr></table></figure><p>如果有就单独运行一次 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install 包名<br></code></pre></td></tr></table></figure><p>想知道包名的作用，就使用 yum info 程序名</p><p>使用systemctl 这个命令启动查看一下docker能否正常运行，状态为active</p><h3 id="4-开启网络转发功能"><a href="#4-开启网络转发功能" class="headerlink" title="4.开启网络转发功能"></a>4.开启网络转发功能</h3><p>默认自动开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">路径： /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>手动开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf   <br></code></pre></td></tr></table></figure><p>插入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.ipv4.ip_forward =1<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p   <span class="hljs-comment">#生效</span><br></code></pre></td></tr></table></figure><p>此处如果报错sysctl: cannot stat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ipv4_forward: No such file or directory</p><p>执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">modprobe ip_tables <span class="hljs-comment"># 加载一下驱动</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/ip_forward  <span class="hljs-comment">#查看结果，为1开启成功。</span><br></code></pre></td></tr></table></figure><h3 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5.关闭防火墙"></a>5.关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL <span class="hljs-comment">#查看一下iptable规则，关闭防火墙后会自动插入新规则</span><br><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld  <span class="hljs-comment">#关闭防火墙</span><br><br>systemctl restart docker <br></code></pre></td></tr></table></figure><p>关闭防火墙要把docker重启一下，不然docker的ip包转发功能无法使用。即便防火墙关闭了，docker依旧会调用内核模块netfilter增加规则，所以会新增iptables规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL <span class="hljs-comment">#再查看一下iptable规则，会发现多出很多规则</span><br></code></pre></td></tr></table></figure><h3 id="6-启动服务-并-设置开机自启"><a href="#6-启动服务-并-设置开机自启" class="headerlink" title="6.启动服务 并 设置开机自启"></a>6.启动服务 并 设置开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker &amp;&amp; systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>启动完成后再查看一下网络参数，这个是ip转发会改成1，默认0</p><h3 id="7-基础命令"><a href="#7-基础命令" class="headerlink" title="7.基础命令"></a>7.基础命令</h3><p>哎！这个时候我们就需要搜索和拉取镜像了，我们第一期创建的自己的docker库就有用场了,但是我们下一期说，bote现在要睡了，嘿嘿。</p><p>（1）帮助命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version     <span class="hljs-comment">#显示docker详细信息</span><br>docker info       <span class="hljs-comment">#显示docker的系统信息，包括镜像和容器的数量</span><br>docker --<span class="hljs-built_in">help</span>     <span class="hljs-comment">#docker帮助命令手册</span><br></code></pre></td></tr></table></figure><p>（2）镜像命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images  <span class="hljs-comment">#查看所有本地主机的镜像</span><br>docker search 镜像名           <span class="hljs-comment">#搜索镜像</span><br>docker pull 镜像名 [标签]      <span class="hljs-comment">#下载镜像（如果不写tag，默认是latest）</span><br>docker rmi 镜像名 [标签]       <span class="hljs-comment">#删除镜像    docker rmi -f $(docker images -aq)  删除全部镜像</span><br>docker tag  镜像名:版本   新镜像名:版本    <span class="hljs-comment">#复制镜像并且修改名称</span><br>docker commit  -a <span class="hljs-string">&quot;xxx&quot;</span>  -c <span class="hljs-string">&quot;xxx&quot;</span> 镜像ID 名字：版本   <span class="hljs-comment">#提交镜像 </span><br>-a :提交的镜像作者；<br>-c :使用Dockerfile指令来创建镜像；<br>-m :提交时的说明文字；<br><br>docker load -i    /xxx/xxx.tar         <span class="hljs-comment">#导入镜像</span><br>docker save -o   /xxx/xxx.tar          <span class="hljs-comment">#保存一个镜像为一个tar包</span><br></code></pre></td></tr></table></figure><p>（3）容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [可选参数] image 命令 <span class="hljs-comment">#启动容器（无镜像会先下载镜像）</span><br><span class="hljs-comment">#参数说明</span><br>--name = <span class="hljs-string">&quot;Name&quot;</span>   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷<br><br>docker build  <span class="hljs-comment">#创建镜像        -f：指定dockerfile文件路径   -t：镜像名字以及标签</span><br>docker logs 容器实例的ID          <span class="hljs-comment">#查看容器日志</span><br>docker rename 旧名字  新名字      <span class="hljs-comment"># 给容器重新命名</span><br>docker top    容器实例的ID                  <span class="hljs-comment">#查看容器内进程</span><br>docker ps -a                    <span class="hljs-comment">#列出所有容器（不加-a就是在运行的）</span><br>docker <span class="hljs-built_in">rm</span>      容器实例的ID                 <span class="hljs-comment">#删除容器（正在运行容器不能删除，除非加-f选项）</span><br>docker <span class="hljs-built_in">kill</span>  容器实例的ID        <span class="hljs-comment">#杀掉容器</span><br>docker <span class="hljs-built_in">history</span>   容器实例的ID    <span class="hljs-comment">#查看docker镜像的变更历史</span><br>docker start 容器实例的ID        <span class="hljs-comment">#启动容器</span><br>docker restart 容器实例的ID       <span class="hljs-comment">#重启容器</span><br>docker stop 容器实例的ID         <span class="hljs-comment">#停止正在运行的容器</span><br>docker attach /docker <span class="hljs-built_in">exec</span>  容器实例的ID   <span class="hljs-comment">#同为进入容器命令，不同的是attach连接终止会让容器退出后台运行，而exec不会。并且，docker attach是进入正在执行的终端，不会启动新的进程，而docker exec则会开启一个新的终端，可以在里面操作。</span><br>docker image inspect  容器名称：容器标签       <span class="hljs-comment">#查看容器内源数据</span><br>docker <span class="hljs-built_in">cp</span>  容器<span class="hljs-built_in">id</span>：容器内路径   目的主机路径           <span class="hljs-comment">#从容器内拷贝文件到主机（常用）或者从主机拷贝到容器（一般用挂载）</span><br><span class="hljs-built_in">exit</span>                           <span class="hljs-comment">#直接退出容器 </span><br>crlt + P + Q                   <span class="hljs-comment">#退出容器但是不终止运行</span><br></code></pre></td></tr></table></figure><h3 id="8-最后"><a href="#8-最后" class="headerlink" title="8.最后"></a>8.最后</h3><p>如果有朋友发现有字误或其他错误，欢迎评论指出</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(一)————搭建自己的docker镜像仓库</title>
    <link href="/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <url>/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、为什么不学命令，先学搭建自己的docker仓库？"><a href="#一、为什么不学命令，先学搭建自己的docker仓库？" class="headerlink" title="一、为什么不学命令，先学搭建自己的docker仓库？"></a>一、为什么不学命令，先学搭建自己的docker仓库？</h2><p>​因为Dockerhub宣布不再对中国开源，而国内的多数镜像仓库都停运了，多数大学的都改为仅校内学生申请使用，剩下的一些仓库内的镜像版本都比较老旧，所以我们将基于阿里云提供的<strong>容器镜像服务</strong>和Github的<strong>action</strong>功能搭建自己的docker仓库。</p><h4 id="1-注册两个账号（阿里云与github）"><a href="#1-注册两个账号（阿里云与github）" class="headerlink" title="1.注册两个账号（阿里云与github）"></a>1.注册两个账号（阿里云与github）</h4><p>阿里云：<a href="https://www.aliyun.com/">阿里云-计算，为了无法计算的价值</a></p><p>GitHub：<a href="https://github.com/">https://github.com</a></p><h4 id="2-在阿里云中搜索容器镜像服务"><a href="#2-在阿里云中搜索容器镜像服务" class="headerlink" title="2.在阿里云中搜索容器镜像服务"></a>2.在阿里云中搜索容器镜像服务</h4><p>点击开通</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%911.png"></p><p>选择个人版</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%912.png"></p><p>创建个人版</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%913.png"></p><p>创建命名空间</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%914.png"></p><p>设置固定密码</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%915.png"></p><h4 id="3-在Github中fork一个博主的仓库"><a href="#3-在Github中fork一个博主的仓库" class="headerlink" title="3.在Github中fork一个博主的仓库"></a>3.在Github中fork一个博主的仓库</h4><h6 id="为什么要fork他的仓库？"><a href="#为什么要fork他的仓库？" class="headerlink" title="为什么要fork他的仓库？"></a>为什么要fork他的仓库？</h6><p>因为他已经写好了docker.yaml这个actions工作流文件，此工作流常详细地处理了从镜像拉取、重命名、推送到清理的过程，特别适合于需要频繁更新或同步多个 Docker 镜像到私有仓库的场景。此外，还包含了对磁盘空间管理的考量，确保有足够的空间来进行镜像操作。</p><h6 id="所以你现在有四个数据"><a href="#所以你现在有四个数据" class="headerlink" title="所以你现在有四个数据"></a>所以你现在有四个数据</h6><p>命名空间（<strong>ALIYUN_NAME_SPACE</strong>）：你刚命名的<br>用户名（<strong>ALIYUN_REGISTRY_USER</strong>)：你阿里云的用户名<br>密码（<strong>ALIYUN_REGISTRY_PASSWORD</strong>)：上面让你设置的固定密码<br>仓库地址（<strong>ALIYUN_REGISTRY</strong>）：我涂黑的部分</p><p><img src="/%5Cimg%5Cdocker(1)%E9%98%BF%E9%87%8C%E4%BA%916.png"></p><p>后续按照这位博主的操作完成即可，因为如果用图片去标识的话会很繁琐，而且也不是一目了然，绝不是bote想偷懒，嘿嘿。</p><p> <a href="https://www.bilibili.com/video/BV1Zn4y19743/?share_source=copy_web&vd_source=364c8c17da845006eeb12c4d584799e3">https://www.bilibili.com/video/BV1Zn4y19743/?share_source=copy_web&amp;vd_source=364c8c17da845006eeb12c4d584799e3</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为交换机配置802.1X认证</title>
    <link href="/2025/01/09/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE802-1X%E8%AE%A4%E8%AF%81/"/>
    <url>/2025/01/09/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE802-1X%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-802-1X是做什么的？"><a href="#1-802-1X是做什么的？" class="headerlink" title="1.802.1X是做什么的？"></a>1.802.1X是做什么的？</h2><p>在中型及以上的项目实施中，802.1X是必备的一项配置，简单来说就是检测网络用户的身份，以保证敏感信息的安全性。</p><p>​在这一验证过程中有以下三种角色：</p><ul><li><strong>Supplicant（请求者）</strong>：这是尝试访问受保护网络资源的客户端设备。</li><li><strong>Authenticator（认证器）</strong>：通常是交换机或无线接入点（AP），它充当守门员的角色，只允许经过身份验证的设备访问网络。</li><li><strong>Authentication Server（认证服务器）</strong>：通常是一个RADIUS（Remote Authentication Dial-In User Service）服务器，负责处理来自认证器的身份验证请求，并决定是否授予访问权限。</li></ul><h2 id="2-如何配置802-1X？"><a href="#2-如何配置802-1X？" class="headerlink" title="2.如何配置802.1X？"></a>2.如何配置802.1X？</h2><p>​一般我们将802.1X配置在<strong>接入层</strong>或者<strong>汇聚层</strong>，以下就是配置命令，另外告诉大家一件事，其实在很多项目中使用这一默认配置就可以了，最多根据要求做一点更改，例如最大在线人数等等。</p><h3 id="1-第一种————在接入层配置"><a href="#1-第一种————在接入层配置" class="headerlink" title="(1)第一种————在接入层配置"></a>(1)第一种————在接入层配置</h3><p><img src="/img/802.1X%E6%8E%A5%E5%85%A5%E5%B1%82.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs CLI">1.配置AAA。<br># 创建并配置RADIUS服务器模板“rd1”。<br>[Switch] radius-server template rd1<br>[Switch-radius-rd1] radius-server authentication 192.168.1.30 1812<br>[Switch-radius-rd1] radius-server shared-key cipher YsHsjx_202206<br>[Switch-radius-rd1] quit<br><br># 创建AAA认证方案“abc”并配置认证方式为RADIUS。<br>[Switch] aaa<br>[Switch-aaa] authentication-scheme abc<br>[Switch-aaa-authen-abc] authentication-mode radius<br>[Switch-aaa-authen-abc] quit<br><br># 创建认证域“example.com”，并在其上绑定AAA认证方案“abc”与RADIUS服务器模板“rd1”。<br>[Switch-aaa] domain example.com<br>[Switch-aaa-domain-example.com] authentication-scheme abc<br>[Switch-aaa-domain-example.com] radius-server rd1<br>[Switch-aaa-domain-example.com] quit<br>[Switch-aaa] quit<br><br># 测试用户是否能够通过RADIUS模板的认证。（已在RADIUS服务器上配置了测试用户test，用户密码YsHsjx_2022061）<br>[Switch] test-aaa test YsHsjx_2022061 radius-template rd1<br>Info: Account test succeeded.<br><br>2.配置802.1X认证。<br># 将NAC配置模式切换成统一模式。<br># 注意：设备默认为统一模式。传统模式与统一模式相互切换后，设备会自动重启。<br>[Switch] authentication unified-mode<br><br># 配置802.1X接入模板“d1”。<br>[Switch] dot1x-access-profile name d1<br>[Switch-dot1x-access-profile-d1] dot1x authentication-method eap<br>[Switch-dot1x-access-profile-d1] dot1x timer client-timeout 30<br>[Switch-dot1x-access-profile-d1] quit<br><br># 注意：802.1X接入模板默认采用EAP中继认证方式。请确保RADIUS服务器支持EAP协议，否则无法处理802.1X认证请求。<br><br># 配置认证模板“p1”，并在其上绑定802.1X接入模板“d1”、指定认证模板下用户的强制认证域为“example.com”。<br>[Switch] authentication-profile name p1<br>[Switch-authen-profile-p1] dot1x-access-profile d1<br>[Switch-authen-profile-p1] access-domain example.com force<br>[Switch-authen-profile-p1] quit<br><br># 在接口GE1/0/2-GE1/0/n上绑定认证模板“p1”，使能802.1X认证。以接口GE1/0/2为例，其他接口配置与其类似。<br>[Switch] interface gigabitethernet 1/0/2<br>[Switch-GigabitEthernet1/0/2] authentication-profile p1<br>[Switch-GigabitEthernet1/0/2] quit<br><br>3.验证配置结果。<br>用户在终端上启动802.1X客户端，输入用户名和密码，开始认证。<br>如果用户输入的用户名和密码验证正确，客户端页面会显示认证成功信息。用户即可访问网络。<br>用户上线后，管理员可在设备上执行命令display access-user access-type dot1x查看在线802.1X用户信息。<br></code></pre></td></tr></table></figure><h3 id="2-第二种————在汇聚层配置"><a href="#2-第二种————在汇聚层配置" class="headerlink" title="(2)第二种————在汇聚层配置"></a>(2)第二种————在汇聚层配置</h3><p><img src="/img/802.1X%E6%B1%87%E8%81%9A%E5%B1%82.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs CLI">1.配置SwitchB。<br># 配置802.1X报文透传功能。<br># 下行接口（与用户连接的口GE0/0/2-GE0/0/n）以接口GE0/0/2为例，其他下行接口配置与其类似。（这些连接口下的用户都会触发认证）<br><br>由于认证交换机SwitchA与用户之间存在二层交换机SwitchB，为保证用户能够通过802.1X认证，则务必在SwitchB上配置802.1X报文透传功能。<br><br>[SwitchB] l2protocol-tunnel user-defined-protocol 802.1X protocol-mac 0180-c200-0003 group-mac 0100-0000-0002<br>[SwitchB] interface gigabitethernet 0/0/2<br>[SwitchB-GigabitEthernet0/0/2] l2protocol-tunnel user-defined-protocol 802.1X enable<br>[SwitchB-GigabitEthernet0/0/2] quit<br>[SwitchB] interface gigabitethernet 0/0/1<br>[SwitchB-GigabitEthernet0/0/1] l2protocol-tunnel user-defined-protocol 802.1X enable<br>[SwitchB-GigabitEthernet0/0/1] quit<br><br>2.配置SwitchA。<br># 配置AAA。<br>#（1）创建并配置RADIUS服务器模板“rd1”。<br>[SwitchA] radius-server template rd1<br>[SwitchA-radius-rd1] radius-server authentication 192.168.1.30 1812<br>[SwitchA-radius-rd1] radius-server shared-key cipher YsHsjx_202206<br>[SwitchA-radius-rd1] quit<br><br>#（2）创建AAA认证方案“abc”并配置认证方式为RADIUS。<br>[SwitchA] aaa<br>[SwitchA-aaa] authentication-scheme abc<br>[SwitchA-aaa-authen-abc] authentication-mode radius<br>[SwitchA-aaa-authen-abc] quit<br><br>#（3）创建认证域“example.com”，并在其上绑定AAA认证方案“abc”与RADIUS服务器模板“rd1”。<br>[SwitchA-aaa] domain example.com<br>[SwitchA-aaa-domain-example.com] authentication-scheme abc<br>[SwitchA-aaa-domain-example.com] radius-server rd1<br>[SwitchA-aaa-domain-example.com] quit<br>[SwitchA-aaa] quit<br><br>#（4）测试用户是否能够通过RADIUS模板的认证。（已在RADIUS服务器上配置了测试用户test，用户密码YsHsjx_2022061）<br>[SwitchA] test-aaa test YsHsjx_2022061 radius-template rd1<br>Info: Account test succeeded.<br><br># 配置802.1X认证。<br><br>#(1) 将NAC配置模式切换成统一模式。<br>#注意：设备默认为统一模式。传统模式与统一模式相互切换后，设备会自动重启。<br>[SwitchA] authentication unified-mode<br><br>#(2) 配置802.1X接入模板“d1”。<br>#注意：802.1X接入模板默认采用EAP认证方式。请确保RADIUS服务器支持EAP协议，否则无法处理802.1X认证请求。<br>[SwitchA] dot1x-access-profile name d1<br>[SwitchA-dot1x-access-profile-d1] dot1x authentication-method eap<br>[SwitchA-dot1x-access-profile-d1] dot1x timer client-timeout 30<br>[SwitchA-dot1x-access-profile-d1] quit<br><br>#(3) 配置认证模板“p1”，并在其上绑定802.1X接入模板“d1”、指定认证模板下用户的强制认证域为“example.com”、指定用户接入模式为多用户单独认证接入模式、最大接入用户数为100。<br>[SwitchA] authentication-profile name p1<br>[SwitchA-authen-profile-p1] dot1x-access-profile d1<br>[SwitchA-authen-profile-p1] access-domain example.com force<br>[SwitchA-authen-profile-p1] authentication mode multi-authen max-user 100<br>[SwitchA-authen-profile-p1] quit<br><br># (4) 在接口GE1/0/2上绑定认证模板“p1”，使能802.1X认证。<br>[SwitchA] interface gigabitethernet 1/0/2<br>[SwitchA-GigabitEthernet1/0/2] authentication-profile p1<br>[SwitchA-GigabitEthernet1/0/2] quit<br><br>验证配置结果。<br>用户在终端上启动802.1X客户端，输入用户名和密码，开始认证。<br>如果用户输入的用户名和密码验证正确，客户端页面会显示认证成功信息。用户即可访问网络。<br>用户上线后，管理员可在设备上执行命令display access-user 查看用户在线情况<br></code></pre></td></tr></table></figure><h2 id="3-其他查看用户在线情况命令："><a href="#3-其他查看用户在线情况命令：" class="headerlink" title="3.其他查看用户在线情况命令："></a>3.其他查看用户在线情况命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CLI"># 查看指定接口上的802.1X统计信息<br>display dot1x statistics interface interface-type interface-number<br># 查看某接口的在线用户情况<br>display access-user [interface interface-type interface-number]<br></code></pre></td></tr></table></figure><h2 id="4-最后"><a href="#4-最后" class="headerlink" title="4.最后"></a>4.最后</h2><p>​注意配置的交换机型号与类型，如果是CE交换机，配置命令会有不同，请转至</p><p>华为官网文档：<a href="https://support.huawei.com/enterprise/zh/doc/index.html">https://support.huawei.com/enterprise/zh/doc/index.html</a></p><p>查看参考。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snmp_服务端配置</title>
    <link href="/2025/01/06/snmp-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/06/snmp-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-snmp是什么？"><a href="#1-snmp是什么？" class="headerlink" title="1.snmp是什么？"></a>1.snmp是什么？</h2><p>​<strong>SNMP</strong>（Simple Network Management Protocol，简单网络管理协议）是一种广泛使用的网络管理协议，用于监控和管理网络设备，如服务器、路由器、交换机、打印机等。它允许网络管理员从中央位置监控网络性能，发现和解决网络问题。</p><h3 id="2-配置snmp服务端"><a href="#2-配置snmp服务端" class="headerlink" title="2.配置snmp服务端"></a>2.配置snmp服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#  以下操作仅为示例操作，详细操作请按实际情况而定</span><br><br><span class="hljs-comment"># 1.编辑snmp配置文件</span><br>vim /etc/snmpd.conf<br><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># community 中是对应 sec.name 的连接密码</span><br><span class="hljs-comment"># SNMP 中 连接密码被称为 community sec.name 类似于用户名</span><br>将 <br>   com2sec notConfigUser default public <br>修改为<br>   com2sec notConfigUser default monitor<br><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># groupName &lt;---&gt; securityName</span><br><span class="hljs-comment"># 组名      &lt;---&gt; 上面设置的用户名</span><br><span class="hljs-comment"># 可指定每个group 使用SNMP协议版本</span><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># group  &lt;---&gt; read write notif</span><br><span class="hljs-comment"># 上面的group &lt;--&gt; 读/写/通知(SNMP trap)使用的上面的view设置</span><br>将第62行的<br>   access  notConfigGroup <span class="hljs-string">&quot;&quot;</span> any noauth exact systemview none none<br>修改为<br>   access  notConfigGroup <span class="hljs-string">&quot;&quot;</span> any noauth exact all none none<br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># view SNMP 中OID设定</span><br><span class="hljs-comment"># name = 此视图名</span><br><span class="hljs-comment"># include/exclude 包括/排除之后的OID地址</span><br><span class="hljs-comment"># subtree=OID地址(.0 表示所有的OID)</span><br>将第85行的<br><span class="hljs-comment">#view all    included  .1       80</span><br>去掉注释 <br><br>2.重启SNMP服务<br>systemctl restart snmppd.service<br><br>3.添加为开机自启<br>systemctl <span class="hljs-built_in">enable</span> snmpd.service<br><br>4.验证snmp是否可以获取到值<br>snmpwalk -v 2c -c monitor [设备IP]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防火墙端口管理</title>
    <link href="/2025/01/06/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <url>/2025/01/06/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>​防火墙端口管理在操作中经常会用到，但是在实际布置生产环境或者一些带单向网闸一系列设备时，我们需要关闭的端口就会很多，这时再去一个个关闭，很显然就非常麻烦了，所以运维经常使用自动化脚本去进行管理。</p><p>以下脚本可直接使用（不能运行时，请修改对应的系统指令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><br><span class="hljs-comment"># 获取用户输入的要关闭的端口列表</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;指定区间格式为： 1000:2000 ===&gt; 将丢弃1000到2000所有端口的tcp数据包&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入要关闭的端口列表，用空格分隔：&quot;</span><br><span class="hljs-built_in">read</span> -a ports_to_close<br><br><span class="hljs-comment"># 获取用户输入的要允许的端口列表</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;指定区间格式为： 1000:2000 ===&gt; 将允许1000到2000所有端口的tcp数据包&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入要允许的端口列表，用空格分隔：&quot;</span><br><span class="hljs-built_in">read</span> -a ports_to_allow<br><br><span class="hljs-comment"># 备份iptables配置</span><br>iptables-save &gt; /path/to/iptables_backup.txt<br><br><span class="hljs-comment"># 加载iptables规则</span><br>iptables -F<br>iptables -X<br>iptables -Z<br><br><span class="hljs-comment"># 允许流量通过的端口</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ports_to_allow[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    iptables -A INPUT -p tcp --dport <span class="hljs-variable">$port</span> -j ACCEPT<br>    iptables -A OUTPUT -p tcp --sport <span class="hljs-variable">$port</span> -j ACCEPT<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 关闭的端口</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ports_to_close[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    iptables -A INPUT -p tcp --dport <span class="hljs-variable">$port</span> -j DROP<br>    iptables -A OUTPUT -p tcp --sport <span class="hljs-variable">$port</span> -j DROP<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 保存iptables规则（redhat系统）</span><br>service iptables save<br><span class="hljs-comment"># 或 iptables-save &gt; /etc/sysconfig/iptables</span><br><br><span class="hljs-comment"># （debian系统）</span><br><span class="hljs-comment"># sudo sh -c &quot;iptables-save &gt; /etc/iptables/rules.v4&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;防火墙端口已更新。&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禁止root账户远程连接</title>
    <link href="/2025/01/06/%E7%A6%81%E6%AD%A2root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <url>/2025/01/06/%E7%A6%81%E6%AD%A2root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p> 在我们实际运维中，经常出于安全考虑禁止root账户远程连接，以下bash脚本可直接使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 备份文件</span><br><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak<br><br><span class="hljs-comment"># 修改SSH配置文件</span><br>sed -i <span class="hljs-string">&#x27;s/PermitRootLogin yes/</span><br><span class="hljs-string">PermitRootLogin no/g&#x27;</span> /etc/ssh/sshd_config<br><br><span class="hljs-comment"># 重启SSH服务</span><br>systemctl restart sshd<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Root 账户远程连接已禁止&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置NFS(服务端与客户端)</title>
    <link href="/2025/01/06/%E9%85%8D%E7%BD%AENFS-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <url>/2025/01/06/%E9%85%8D%E7%BD%AENFS-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><p>安装nfs包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install nfs-utils -y<br></code></pre></td></tr></table></figure><p>启动nfs服务，并设置为开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nfs-server.service<br>systemctl <span class="hljs-built_in">enable</span> nfs-server.service<br></code></pre></td></tr></table></figure><p>选择磁盘作为nfs共享分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk 查看硬盘名<br>fdisk /硬盘名<br><br>第一个为 n<br><br>第二个为 p，然后全部默认后<br><br>第三个为w<br><br>退出<br></code></pre></td></tr></table></figure><p>对硬盘分区格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/分区名<br></code></pre></td></tr></table></figure><p>创建一个挂载nfs目录并挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /nfs<br>mount /dev/分区名<br></code></pre></td></tr></table></figure><p>查看是否挂载成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p>配置共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/exports<br></code></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/nfs 客户端ip/24(掩码号)(rw,no_root_squash)(有很多参数，可以百度看看)<br></code></pre></td></tr></table></figure><p>重启nfs服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart nfs-server.service<br></code></pre></td></tr></table></figure><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><p><strong>此脚本可直接复制执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 设置nfs服务并设置为开机自启动</span><br>systemctl start nfs-server.service<br>systemctl <span class="hljs-built_in">enable</span> nfs.server.service<br><br><span class="hljs-comment"># 创建一个挂载目录</span><br><span class="hljs-built_in">mkdir</span> /nfs01<br>mount -t nfs 服务端ip:/nfs /nfs01<br><span class="hljs-comment"># 查看是否挂载完成</span><br>ds -Th<br><span class="hljs-comment"># 如果不通则关闭防火墙</span><br>systemctl stop firewalld<br>firewall-cmd --state<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multipaths配置多路径</title>
    <link href="/2025/01/05/multipaths%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B7%AF%E5%BE%84/"/>
    <url>/2025/01/05/multipaths%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是多路径？"><a href="#一、什么是多路径？" class="headerlink" title="一、什么是多路径？"></a>一、什么是多路径？</h3><p>​**多路径（Multipath）**通常指的是数据在网络或存储系统中从源到目的地之间存在多个可能的传输路径。这个概念可以应用于不同的技术领域，但最常见的是在计算机网络和存储区域网络（SAN, Storage Area Network）中。</p><ol><li><strong>计算机网络中的多路径</strong>： 在计算机网络中，多路径路由允许数据包通过多个不同路径到达目的地。这可以通过动态路由协议来实现，这些协议能够根据当前网络状况选择最佳路径。多路径路由可以提高网络的可靠性和性能，因为它可以在一条路径失败时自动切换到另一条路径，并且可以通过负载均衡来优化带宽使用。</li><li><strong>存储系统中的多路径</strong>： 在存储系统中，特别是对于SAN环境，多路径是指服务器和存储设备之间的多个连接路径。它提供了冗余，以防止单点故障导致的数据访问中断。例如，如果一个HBA（主机总线适配器）、交换机端口或电缆发生故障，数据仍然可以通过其他路径进行访问。此外，多路径软件还可以提供负载均衡功能，将I&#x2F;O请求分散到多个可用路径上，从而提高性能。</li></ol><h3 id="二、多路径该如何配置？"><a href="#二、多路径该如何配置？" class="headerlink" title="二、多路径该如何配置？"></a>二、多路径该如何配置？</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment"># 1.安装程序</span><br>yum install device-mapper-multipath -y<br><br><span class="hljs-comment"># 2.将多路径软件添加至内核模块中</span><br>modprobe dm-multipath<br>modprode dm-round-robin<br><br><span class="hljs-comment"># 3.检查内核添加情况</span><br>lsmod | grep multipath<br>显示如下类似即可：<br><span class="hljs-comment"># dm_multipath           27427  3 dm_round_robin,dm_service_time</span><br><span class="hljs-comment"># dm_mod                123303  13 dm_round_robin,dm_multipath,dm_log,dm_mirror,dm_service_time</span><br><br><span class="hljs-comment"># 4.启动服务</span><br>systemctl enable multipathd --now<br><br><span class="hljs-comment"># 5.备份并编辑配置文件</span><br><span class="hljs-comment"># 先查看存储设备的WWID（以下两条命令均可）</span><br>sudo udevadm info --query=all --name=<span class="hljs-regexp">/dev/</span>sdX | grep ID_SERIAL<br>multipath -ll<br><br>cp <span class="hljs-regexp">/etc/mu</span>ltipath.conf <span class="hljs-regexp">/etc/mu</span>ltipath.conf.bak<br>vim <span class="hljs-regexp">/etc/mu</span>ltipath.conf<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">blacklist &#123;</span><br><span class="hljs-string">        wwid    3600508b1001c044c39717726236c68d5</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">defaults &#123;</span><br><span class="hljs-string">    user_friendly_names       yes</span><br><span class="hljs-string">    polling_interval            10</span><br><span class="hljs-string">    queue_without_daemon    no</span><br><span class="hljs-string">    flush_on_last_del          yes</span><br><span class="hljs-string">    checker_timeout 120</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">devices &#123;</span><br><span class="hljs-string">    device &#123;</span><br><span class="hljs-string">        vendor                 &quot;3par8400&quot;</span><br><span class="hljs-string">        product                &quot;HP&quot;</span><br><span class="hljs-string">        path_grouping_policy    asmdisk</span><br><span class="hljs-string">        no_path_retry           30</span><br><span class="hljs-string">        prio                    hp_sw</span><br><span class="hljs-string">        path_checker            tur</span><br><span class="hljs-string">        path_selector           &quot;round-robin 0&quot;</span><br><span class="hljs-string">        hardware_handler       &quot;0&quot;</span><br><span class="hljs-string">        failback                15</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 多路径设备信息</span><br><span class="hljs-string">multipaths &#123;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">           wwid    360002ac0000000000000000300023867</span><br><span class="hljs-string">           alias    mpathdisk01</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">如果有两个或者多个就再加一条即可。</span><br><span class="hljs-string">multipaths &#123;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string">           # 多路径设备的wwid放在这里</span><br><span class="hljs-string">           wwid    360002ac0000000000000000300023867</span><br><span class="hljs-string">           # 设置多路径设备的别名</span><br><span class="hljs-string">           # 例如：mpathdisk01</span><br><span class="hljs-string">           alias    mpathdisk01</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string">           wwid    360002ac0000000000000000400023867</span><br><span class="hljs-string">           alias    mpathdisk02</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 6.重启服务</span><br>systemctl restart multipathd<br><br><span class="hljs-comment"># 7.查看是否成功</span><br>lsblk<br><span class="hljs-comment">#结果类似</span><br>[root@test ~]<span class="hljs-comment"># lsblk</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">NAME            MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT</span><br><span class="hljs-string">sda               8:0    0   557G  0 disk</span><br><span class="hljs-string">├─sda1            8:1    0     4G  0 part  /boot</span><br><span class="hljs-string">└─sda2            8:2    0   553G  0 part</span><br><span class="hljs-string">  ├─centos-root 253:0    0 488.9G  0 lvm   /</span><br><span class="hljs-string">  └─centos-swap 253:1    0    64G  0 lvm   [SWAP]</span><br><span class="hljs-string">sdb               8:16   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sdc               8:32   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sdd               8:48   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sde               8:64   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 查看状态</span><br>multipath -d -l<br><br><span class="hljs-comment"># 配置文件解析</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">blacklist：定义了一些被禁用的设备，只要 WWID 匹配了列表中的任何一个，它就会被黑名单所拒绝。</span><br><span class="hljs-string">wwid：唯一标识多路径设备的 32 位十六进制字符串。</span><br><span class="hljs-string">defaults：定义了一些默认设置，这些设置可以在其他部分被重写。</span><br><span class="hljs-string">user_friendly_names：使多路径设备更易于理解和使用。</span><br><span class="hljs-string">polling_interval：检查路径状态的频率（以秒为单位）。</span><br><span class="hljs-string">queue_without_daemon：定义了当 multipathd 守护程序处于未运行状态时处理 I/O 请求的行为。</span><br><span class="hljs-string">flush_on_last_del：在删除最后一个路径时是否刷新 IO 缓存。</span><br><span class="hljs-string">checker_timeout：指定检查器超时的时间。</span><br><span class="hljs-string">devices：包含一个或多个</span><br><span class="hljs-string">device 块，每个块都描述了一个特定的多路径设备。</span><br><span class="hljs-string">device：描述了一个多路径设备及其属性。</span><br><span class="hljs-string">vendor、product：设备的制造商和产品名称。</span><br><span class="hljs-string">path_grouping_policy：指定将路径分组到哪个组中。</span><br><span class="hljs-string">no_path_retry：当无法访问某个路径时进行重试的次数。</span><br><span class="hljs-string">prio：指定优先级算法，如 alua、emc、hp_sw 等。</span><br><span class="hljs-string">path_checker：指定 IO 路径检查器的类型。</span><br><span class="hljs-string">path_selector：指定选择路径的算法。例如，“round-robin 0” 表示依次将请求分发到每个路径上。</span><br><span class="hljs-string">hardware_handler：指定用于处理硬件错误的脚本或程序。</span><br><span class="hljs-string">failback：指定多长时间后进行故障切换。</span><br><span class="hljs-string">multipaths：包含一个或多个</span><br><span class="hljs-string">multipath 块，每个块都描述了一个设备的多个路径。</span><br><span class="hljs-string">alias：为指定的多路径设备定义别名。</span><br><span class="hljs-string"></span><br><span class="hljs-string">prio 是 multipath.conf 配置文件中的一个关键字，表示优先级算法。它可以指定多路径设备使用哪种算法来选择 I/O 请求路径。例如：</span><br><span class="hljs-string"></span><br><span class="hljs-string">prio alua</span><br><span class="hljs-string"></span><br><span class="hljs-string">以上配置指定了使用 Asymmetric Logical Unit Access(ALUA) 算法进行路径选择。这个算法主要用于 SAN 存储环境下，能够更好地处理存储阵列并发访问的问题。</span><br><span class="hljs-string">除了 ALUA，还有其他一些可用的优先级算法，如：</span><br><span class="hljs-string">emc：用于与 EMC 存储阵列配合使用。</span><br><span class="hljs-string">hp_sw：用于与 HP 存储阵列配合使用。</span><br><span class="hljs-string">rdac：用于与 LSI 存储阵列配合使用。</span><br><span class="hljs-string">如果没有指定 prio 设置，则默认为 const（优先选择第一个路径）算法，或者是上层应用程序自己控制路径选择。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo_常用指令</title>
    <link href="/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo是一个对新手很友好，并且可扩展能力强的静态网站生成框架</p><h4 id="1-创建一个空文档（只有空文档才能部署Hexo项目）"><a href="#1-创建一个空文档（只有空文档才能部署Hexo项目）" class="headerlink" title="1.创建一个空文档（只有空文档才能部署Hexo项目）"></a>1.创建一个空文档（只有空文档才能部署Hexo项目）</h4><h4 id="2-提前安装好Node-js、Git"><a href="#2-提前安装好Node-js、Git" class="headerlink" title="2.提前安装好Node.js、Git"></a>2.提前安装好Node.js、Git</h4><p>Hexo是基于Node.js的框架，部署时需要用到git进行部署（版本使用最新的即可）</p><h4 id="3-在空文档下打开cmd，然后依次输入以下命令"><a href="#3-在空文档下打开cmd，然后依次输入以下命令" class="headerlink" title="3.在空文档下打开cmd，然后依次输入以下命令"></a>3.在空文档下打开cmd，然后依次输入以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br></code></pre></td></tr></table></figure><p>此时，就已经完成了一个基础的hexo项目。</p><h4 id="4、部署到-GitHub-Pages"><a href="#4、部署到-GitHub-Pages" class="headerlink" title="4、部署到 GitHub Pages"></a>4、部署到 GitHub Pages</h4><p>创建GitHub仓库<br>在GitHub新建仓库，仓库名为用户名.github.io,这里的用户名替换为自己GitHub的用户名</p><p>比如我的用户名是bote798，新建的仓库名就是bote798.github.io</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89.png"></p><p>创建时选择 public 将仓库公开，推荐勾选 Add a REAMD file 为仓库创建描述文件</p><p><strong>配置SSH密钥连接GitHub</strong><br>由于21年GitHub 取消了对密码身份验证的支持，所以需要使用 GitHub 的个人访问令牌来代替密码，但每次上传都需要输入一次用户名和 token 显然比较麻烦，安全性也较低，配置 ssh 后就可以更加方便的上传文件</p><p>打开C盘，进入 Users 文件夹，接着打开电脑用户名文件夹，寻找是否有.ssh文件夹，如果有的话需删除掉，没有就继续进行下面的步骤</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89.png"></p><p>在该文件夹下右键打开Git Bash，输入以下命令生成ssh密钥，中途需按下三次回车键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;github绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>成功后在该目录下生成了.ssh文件夹，用记事本打开.ssh文件夹下的id_rsa.pub文件，复制里面的内容</p><p>在GitHub设置中点击SSH and GPG keys选项，点击New SSH key</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89.png"></p><p>出现以下界面</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%884%EF%BC%89.png"></p><p>填写 Title项 为 hexo，将复制的内容粘贴到 Key 文本框中，点击 Add SSH key 后需要输入一次 GitHub 密码，即可添加成功</p><p>再次打开Git Bush,输入以下命令验证是否能连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果询问是否继续连接，输入yes即可，如下图出现successfully即为连接成功</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%885%EF%BC%89.png"></p><p>最后，配置用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Github上的username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>到这里已经成功配置好了 ssh 连接，可以将本地博客部署到 GitHub 了·</p><p>在刚刚创建的博客文件夹下再次打开 git bush，安装 hexo-deployer-git 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>打开**_config.yml**文件，更改最后面的 <strong>deploy</strong> 内容，用户名替换为自己的 github 用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repository: https://github.com/用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h4 id="基础命令："><a href="#基础命令：" class="headerlink" title="基础命令："></a>基础命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br>hexo g<span class="hljs-comment"># 生成静态文件</span><br>hexo d<span class="hljs-comment"># 上传到GitHub</span><br><span class="hljs-comment"># 删除文章只需要将source中的markdown文件删掉，然后执行 hexo g 即可</span><br></code></pre></td></tr></table></figure><p>主题可选：<a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>点击后进入其GitHub仓库查看对应指引更换主题</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装vim插件(coc.nvim代码补全)</title>
    <link href="/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <url>/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装vim插件（coc-nvim代码补全）"><a href="#安装vim插件（coc-nvim代码补全）" class="headerlink" title="安装vim插件（coc.nvim代码补全）"></a>安装vim插件（coc.nvim代码补全）</h2><ol><li><p>安装node.js和npm(版本最好高一点)</p><p>最好再找个安装教程看一下环境变量配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nodejs</span><br><span class="line"><span class="built_in">sudo</span> apt install npm</span><br><span class="line"><span class="comment"># 设置一下环境变量</span></span><br><span class="line">curl -sL install-node.now.sh/lts | bash</span><br></pre></td></tr></table></figure></li><li><p>安装vim－plug（插件管理器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p  ~/.vim/autoload/</span><br><span class="line"><span class="built_in">cp</span> plug.vim  ~/.vim/autoload/plug.vim</span><br></pre></td></tr></table></figure></li><li><p>.vimrc文件有的系统有，有的没有，没有就自己建一个。这是系统的vim配置文件，home中的是用户的vim配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>将这些复制到vimrc中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin()</span><br><span class="line"><span class="string">&quot; The default plugin directory will be as follows:</span></span><br><span class="line"><span class="string">&quot;</span>   - Vim (Linux/macOS): <span class="string">&#x27;~/.vim/plugged&#x27;</span></span><br><span class="line"><span class="string">&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>   - Neovim (Linux/macOS/Windows): stdpath(<span class="string">&#x27;data&#x27;</span>) . <span class="string">&#x27;/plugged&#x27;</span></span><br><span class="line"><span class="string">&quot; You can specify a custom plugin directory by passing it as the argument</span></span><br><span class="line"><span class="string">&quot;</span>   - e.g. `call plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)`</span><br><span class="line"><span class="string">&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> Make sure you use single quotes</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span></span><br><span class="line"><span class="string">Plug &#x27;junegunn/vim-easy-align&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> Any valid git URL is allowed</span><br><span class="line">Plug <span class="string">&#x27;https://github.com/junegunn/vim-github-dashboard.git&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Multiple Plug commands can be written in a single line using | separators</span></span><br><span class="line"><span class="string">Plug &#x27;SirVer/ultisnips&#x27; | Plug &#x27;honza/vim-snippets&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> On-demand loading</span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>:  <span class="string">&#x27;NERDTreeToggle&#x27;</span> &#125;</span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fireplace&#x27;</span>, &#123; <span class="string">&#x27;for&#x27;</span>: <span class="string">&#x27;clojure&#x27;</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Using a non-default branch</span></span><br><span class="line"><span class="string">Plug &#x27;rdnetto/YCM-Generator&#x27;, &#123; &#x27;branch&#x27;: &#x27;stable&#x27; &#125;</span></span><br><span class="line"><span class="string">&quot;</span> Using a tagged release; wildcard allowed (requires git 1.9.2 or above)</span><br><span class="line">Plug <span class="string">&#x27;fatih/vim-go&#x27;</span>, &#123; <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;*&#x27;</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Plugin options</span></span><br><span class="line"><span class="string">Plug &#x27;nsf/gocode&#x27;, &#123; &#x27;tag&#x27;: &#x27;v.20150303&#x27;, &#x27;rtp&#x27;: &#x27;vim&#x27; &#125;</span></span><br><span class="line"><span class="string">&quot;</span> Plugin outside ~/.vim/plugged with post-update hook</span><br><span class="line">Plug <span class="string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="string">&#x27;dir&#x27;</span>: <span class="string">&#x27;~/.fzf&#x27;</span>, <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;./install --all&#x27;</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Unmanaged plugin (manually installed and updated)</span></span><br><span class="line"><span class="string">Plug &#x27;~/my-prototype-plugin&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> Initialize plugin system</span><br><span class="line"><span class="string">&quot; - Automatically executes `filetype plugin indent on` and `syntax enable`.</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br><span class="line"><span class="string">&quot;</span> You can revert the settings after the call like so:</span><br><span class="line"><span class="string">&quot;   filetype indent off   &quot;</span> Disable file-type-specific indentation</span><br><span class="line"><span class="string">&quot;   syntax off            &quot;</span> Disable syntax highlighting</span><br></pre></td></tr></table></figure></li><li><p>每一次在.vimrc文件中加入插件配置后，保存退出执行插件安装命令 PlugInstall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">下载插件                             :PlugInstall</span><br><span class="line"></span><br><span class="line">下载新的插件                在call plug#begin()和call plug#end()之间添加一下新的插件</span><br><span class="line"></span><br><span class="line">安装特定插件                          :PlugInstall gist-vim</span><br><span class="line"></span><br><span class="line">卸载插件                             :PlugClean</span><br><span class="line"></span><br><span class="line">更新vim-plug                        :PlugUpgrade</span><br><span class="line"></span><br><span class="line">更新所有已经安装的插件         :PlugUpdate</span><br><span class="line"></span><br><span class="line">查看插件状态                         :PlugStatus</span><br></pre></td></tr></table></figure></li><li><p>加入coc.nvim配置，执行安装命令，在nvim中执行检查命令检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Plug#begin() 和 Plug#end()中间加这个</span></span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;release&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置python补全servers</p><p>相关网址: <a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers#python">Language servers · neoclide&#x2F;coc.nvim Wiki · GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install <span class="string">&#x27;python-language-server[all]&#x27;</span></span><br><span class="line">vim ~/.vimrc</span><br><span class="line">:CocInstall coc-pyright</span><br></pre></td></tr></table></figure><p><strong>记得安装一下cmake吧，之后安装总用</strong></p><p>退回主目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install cmake</span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake-qt-gui</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
