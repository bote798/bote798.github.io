<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>物理卷、卷组、逻辑卷配置</title>
    <link href="/2025/04/02/%E7%89%A9%E7%90%86%E5%8D%B7%E3%80%81%E5%8D%B7%E7%BB%84%E3%80%81%E9%80%BB%E8%BE%91%E5%8D%B7%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/04/02/%E7%89%A9%E7%90%86%E5%8D%B7%E3%80%81%E5%8D%B7%E7%BB%84%E3%80%81%E9%80%BB%E8%BE%91%E5%8D%B7%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-物理卷"><a href="#1-物理卷" class="headerlink" title="1.物理卷"></a>1.物理卷</h2><table><thead><tr><th align="center">物理磁盘</th><th>分区</th><th>每个分区大小</th></tr></thead><tbody><tr><td align="center">Sdb</td><td>sdb1</td><td>10G</td></tr><tr><td align="center"></td><td>sdb2</td><td>10G</td></tr><tr><td align="center">Sdc</td><td>sdc1</td><td>10G</td></tr><tr><td align="center"></td><td>sdc2</td><td>10G</td></tr><tr><td align="center">Sdd</td><td>sdd1</td><td>10G</td></tr><tr><td align="center"></td><td>sdd2</td><td>10G</td></tr></tbody></table><p>三个新添加磁盘先分为6个主分区，每个10G，以下命令重复即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# fdisk /dev/sdd<br><br>欢迎使用 fdisk (util-linux 2.35.2)。<br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>设备不包含可识别的分区表。<br>创建了一个磁盘标识符为 0xdf4b2c2d 的新 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (0 primary, 0 extended, 4 free)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (1-4, 默认  1): <br>第一个扇区 (2048-41943039, 默认 2048): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +10G<br><br>创建了一个新分区 1，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (1 primary, 0 extended, 3 free)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (2-4, 默认  2): <br>第一个扇区 (20973568-41943039, 默认 20973568): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (20973568-41943039, 默认 41943039): <br><br>创建了一个新分区 2，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：w<br>分区表已调整。<br>将调用 ioctl() 来重新读分区表。<br>正在同步磁盘。<br></code></pre></td></tr></table></figure><p>然后将6个主分区全部设为物理卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# pvcreate /dev/sdb1<br>  Physical volume <span class="hljs-string">&quot;/dev/sdb1&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdb2<br>  Physical volume <span class="hljs-string">&quot;/dev/sdb2&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdc1<br>  Physical volume <span class="hljs-string">&quot;/dev/sdc1&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdc2<br>  Physical volume <span class="hljs-string">&quot;/dev/sdc2&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdd1<br>  Physical volume <span class="hljs-string">&quot;/dev/sdd1&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdd2<br>  Physical volume <span class="hljs-string">&quot;/dev/sdd2&quot;</span> successfully created.<br></code></pre></td></tr></table></figure><h2 id="2-卷组"><a href="#2-卷组" class="headerlink" title="2.卷组"></a>2.卷组</h2><p>创建两个卷组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# vgcreate vg_1 /dev/sdb1 /dev/sdc1<br>  Volume group <span class="hljs-string">&quot;vg_1&quot;</span> successfully created<br>[root@localhost ~]# vgcreate vg_2 /dev/sdb2 /dev/sdc2 /dev/sdd1 /dev/sdd2<br>  Volume group <span class="hljs-string">&quot;vg_2&quot;</span> successfully created<br></code></pre></td></tr></table></figure><h2 id="3-逻辑卷"><a href="#3-逻辑卷" class="headerlink" title="3.逻辑卷"></a>3.逻辑卷</h2><p>创建两个逻辑卷</p><table><thead><tr><th>lv_name</th><th>卷组来源</th><th>大小</th></tr></thead><tbody><tr><td>lv_vg_1</td><td>vg_1</td><td>5G</td></tr><tr><td>lv_vg_2</td><td>vg_2</td><td>10G</td></tr></tbody></table><h2 id="4-检查命令"><a href="#4-检查命令" class="headerlink" title="4.检查命令"></a>4.检查命令</h2><p>参数说明：<br>  -l 是按PE的数量计算大小，也就是物理块数量，一个卷组有多少个块可以划分，可以在vgdisplay的Free PE一项中查看；<br>  -L 是按照Size的大小划分，也就是K、M、G、T等<br>  -n 是要创建的逻辑卷的名称；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# lvcreate -n lv_vg_1 -L 5G vg_1<br>  Logical volume <span class="hljs-string">&quot;lv_vg_1&quot;</span> created.<br>[root@localhost ~]# lvcreate -n lv_vg_2 -L 10G vg_2<br>  Logical volume <span class="hljs-string">&quot;lv_vg_2&quot;</span> created.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看命令：<br>[root@localhost ~]# pvs<br>  PV         VG   Fmt  Attr PSize   PFree  <br>  /dev/sda2  uos  lvm2 a--  &lt;39.00g      0 <br>  /dev/sdb1  vg_1 lvm2 a--  &lt;10.00g  &lt;5.00g<br>  /dev/sdb2  vg_2 lvm2 a--  &lt;10.00g      0 <br>  /dev/sdc1  vg_1 lvm2 a--  &lt;10.00g &lt;10.00g<br>  /dev/sdc2  vg_2 lvm2 a--  &lt;10.00g   9.99g<br>  /dev/sdd1  vg_2 lvm2 a--  &lt;10.00g &lt;10.00g<br>  /dev/sdd2  vg_2 lvm2 a--  &lt;10.00g &lt;10.00g<br><br>[root@localhost ~]# vgs<br>  VG   <span class="hljs-comment">#PV #LV #SN Attr   VSize   VFree </span><br>  uos    1   2   0 wz--n- &lt;39.00g     0 <br>  vg_1   2   1   0 wz--n-  19.99g 14.99g<br>  vg_2   4   1   0 wz--n-  39.98g 29.98g<br><br>[root@localhost ~]# lvs<br>  LV      VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert<br>  root    uos  -wi-ao---- &lt;35.00g                                                   <br>  swap    uos  -wi-ao----   4.00g                                                   <br>  lv_vg_1 vg_1 -wi-a-----   5.00g                                                   <br>  lv_vg_2 vg_2 -wi-a-----  10.00g   <br><br>单个查询：<br>pvdisplay /dev/sdb1<br>lvdisplay /dev/vg_name1/lv_name1<br><br>此处需要注意的是，如何找到自己创建的逻辑卷名。<br>                传统名称：/dev/卷组名/逻辑卷名<br>                内核映射：/dev/mapper/卷组名-逻辑卷名<br>                <br>lsblk:查看层级结构<br>NAME             MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda                8:0    0   40G  0 disk <br>├─sda1             8:1    0    1G  0 part /boot<br>└─sda2             8:2    0   39G  0 part <br>  ├─uos-root     253:0    0   35G  0 lvm  /<br>  └─uos-swap     253:1    0    4G  0 lvm  [SWAP]<br>sdb                8:16   0   20G  0 disk <br>├─sdb1             8:17   0   10G  0 part <br>│ └─vg_1-lv_vg_1 253:2    0    5G  0 lvm  /mnt/vg_1_data<br>└─sdb2             8:18   0   10G  0 part <br>  └─vg_2-lv_vg_2 253:3    0   10G  0 lvm  /mnt/vg_2_data<br>sdc                8:32   0   20G  0 disk <br>├─sdc1             8:33   0   10G  0 part <br>└─sdc2             8:34   0   10G  0 part <br>  └─vg_2-lv_vg_2 253:3    0   10G  0 lvm  /mnt/vg_2_data<br>sdd                8:48   0   20G  0 disk <br>├─sdd1             8:49   0   10G  0 part <br>└─sdd2             8:50   0   10G  0 part <br>sr0               11:0    1  7.4G  0 rom <br></code></pre></td></tr></table></figure><h2 id="5-创建文件系统并挂载文件"><a href="#5-创建文件系统并挂载文件" class="headerlink" title="5.创建文件系统并挂载文件"></a>5.创建文件系统并挂载文件</h2><h3 id="5-1格式化"><a href="#5-1格式化" class="headerlink" title="5.1格式化"></a>5.1格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# mkfs.xfs /dev/vg_1/lv_vg_1<br>meta-data=/dev/vg_1/lv_vg_1      isize=512    agcount=4, agsize=327680 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=1, sparse=1, rmapbt=0<br>         =                       reflink=1<br>data     =                       bsize=4096   blocks=1310720, imaxpct=25<br>         =                       sunit=0      swidth=0 blks<br>naming   =version 2              bsize=4096   ascii-ci=0, ftype=1<br><span class="hljs-built_in">log</span>      =internal <span class="hljs-built_in">log</span>           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0<br>[root@localhost ~]# mkfs.xfs /dev/vg_2/lv_vg_2<br>meta-data=/dev/vg_2/lv_vg_2      isize=512    agcount=4, agsize=655360 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=1, sparse=1, rmapbt=0<br>         =                       reflink=1<br>data     =                       bsize=4096   blocks=2621440, imaxpct=25<br>         =                       sunit=0      swidth=0 blks<br>naming   =version 2              bsize=4096   ascii-ci=0, ftype=1<br><span class="hljs-built_in">log</span>      =internal <span class="hljs-built_in">log</span>           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0<br></code></pre></td></tr></table></figure><h3 id="5-2创建挂载点目录"><a href="#5-2创建挂载点目录" class="headerlink" title="5.2创建挂载点目录"></a>5.2创建挂载点目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# <span class="hljs-built_in">mkdir</span> -p /mnt/vg_1_data<br>[root@192 /]# <span class="hljs-built_in">mkdir</span> -p /mnt/vg_2_data<br></code></pre></td></tr></table></figure><h3 id="5-3将挂载信息写入配置（永久挂载）"><a href="#5-3将挂载信息写入配置（永久挂载）" class="headerlink" title="5.3将挂载信息写入配置（永久挂载）"></a>5.3将挂载信息写入配置（永久挂载）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# vim /etc/fstab<br>将这两行写进去<br>/dev/vg_1/lv_vg_1 /mnt/vg_1_data xfs defaults 0 0<br>/dev/vg_2/lv_vg_2 /mnt/vg_2_data xfs defaults 0 0<br></code></pre></td></tr></table></figure><h3 id="5-4挂载全部"><a href="#5-4挂载全部" class="headerlink" title="5.4挂载全部"></a>5.4挂载全部</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# mount -a<br></code></pre></td></tr></table></figure><h3 id="5-5查看是否成功"><a href="#5-5查看是否成功" class="headerlink" title="5.5查看是否成功"></a>5.5查看是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# <span class="hljs-built_in">df</span> -h<br>文件系统                  容量  已用  可用 已用% 挂载点<br>devtmpfs                  3.8G     0  3.8G    0% /dev<br>tmpfs                     3.9G   12K  3.9G    1% /dev/shm<br>tmpfs                     3.9G   17M  3.8G    1% /run<br>tmpfs                     3.9G     0  3.9G    0% /sys/fs/cgroup<br>/dev/mapper/uos-root       35G  4.6G   31G   14% /<br>tmpfs                     3.9G   16K  3.9G    1% /tmp<br>/dev/sda1                1014M  238M  777M   24% /boot<br>tmpfs                     779M     0  779M    0% /run/user/0<br>/dev/mapper/vg_1-lv_vg_1  5.0G   68M  5.0G    2% /mnt/vg_1_data<br>/dev/mapper/vg_2-lv_vg_2   10G  104M  9.9G    2% /mnt/vg_2_data<br></code></pre></td></tr></table></figure><p>后续会在本文章内继续更新扩展卷组等内容</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软Raid配置</title>
    <link href="/2025/04/02/%E8%BD%AFRaid%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/04/02/%E8%BD%AFRaid%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-硬-RAID-与软-RAID区分"><a href="#1-硬-RAID-与软-RAID区分" class="headerlink" title="1.硬 RAID 与软 RAID区分"></a>1.硬 RAID 与软 RAID区分</h2><p>磁盘阵列冗余技术<br>它是由很多独立的磁盘组成一个容量巨大的磁盘组，然后利用个别磁盘提供数据所产生的一个加速效果，提升整个磁盘系统性能，利用这项技术，能够将数据切割为许多个区段，分别存储在各个硬盘上，磁盘阵列还能利用检查的概念，Part Check 然后在数组中检查任意一个硬盘故障的时候，我仍然可以读取数据，在数据重构的时候，再将数据通过计算之后，加入到新的硬盘中，这就是磁盘阵列冗余技术<br>软 RAID。<br>软 RAID 通过软件的形式去安装，去使用，软件是其他程序员写好的，我们可以直接使用，叫软 RAID。<br>硬 RAID<br>硬 RAID 而是提供 RAID 卡，它是一块实实在在存在的硬件，能够实现与软 RAID 一样的效果，硬 RAID 效果比软 RAID 效果佳，硬 RAID 是一种把多块独立的物理硬盘按不同方式组合起来形成一个逻辑硬盘，从而提供比单个硬盘有着更高的性能和提供数据冗余的技术，叫做 硬 RAID。<br>RAID常见组合</p><ul><li>RAID 0</li><li>RAID 1</li><li>RAID 5</li><li>RAID 10<br>软 RAID 的区分<br>互联网公司一般都会购买 RAID 卡(硬 RAID)<br>-数据冗余性能(也就是数据安全性能)从好到坏的排序：RAID 1 RAID 10 RAID 5 RAID 0</li><li>数据读写性能从好到坏：RAID 0 RAID 10 RAID 5 RAID 1<br>-成本从高到低：RAID 0 RAID 10 RAID 1 RAID 5</li><li>硬 RAID 与软 RAID 的区别<br>-软件 RAID 会额外的消耗 CPU 资源，造成服务器压力。<br>-硬 RAID 更加稳定，并且 软件 RAID 可能会造成磁盘发热过量，造成损坏。公司一般都使用 硬件 RAID<br>-硬 RAID 兼容性更好，软 RAID 兼容性依赖于操作系统，可能会出问题。<br>-硬 RAID 完胜。</li></ul><h2 id="2-配置软Raid-注意应先做软Raid再做LVM"><a href="#2-配置软Raid-注意应先做软Raid再做LVM" class="headerlink" title="2.配置软Raid(注意应先做软Raid再做LVM)"></a>2.配置软Raid(注意应先做软Raid再做LVM)</h2><p>今天我们来配置软Raid：</p><h3 id="2-1准备"><a href="#2-1准备" class="headerlink" title="2.1准备"></a>2.1准备</h3><p>添加一个20G的虚拟硬盘，分成10个2G的分区(使用fdisk，上期文章有讲)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# fdisk /dev/sdb<br><br>欢迎使用 fdisk (util-linux 2.39.1)。<br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>设备不包含可识别的分区表。<br>Created a new DOS (MBR) disklabel with disk identifier 0x8cbd7811.<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (0个主分区，0个扩展分区，4空闲)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (1-4, 默认  1): <br>第一个扇区 (2048-41943039, 默认 2048): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +10G<br><br>创建了一个新分区 1，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (1个主分区，0个扩展分区，3空闲)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (2-4, 默认  2): <br>第一个扇区 (20973568-41943039, 默认 20973568): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (20973568-41943039, 默认 41943039): <br><br>创建了一个新分区 2，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：w<br>分区表已调整。<br>将调用 ioctl() 来重新读分区表。<br>正在同步磁盘。<br></code></pre></td></tr></table></figure><p>首先看一下是否安装了mdadm工具，如果没有就安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">which</span> mdadm<br>/usr/sbin/mdadm<br>[root@192 ~]# rpm -qf /usr/sbin/mdadm<br>mdadm-4.1-rc2.0.17.uel20.x86_64<br><span class="hljs-comment"># 没有就安装</span><br>[root@192 ~]# dnf install -y mdadm<br></code></pre></td></tr></table></figure><h3 id="2-2创建raid0"><a href="#2-2创建raid0" class="headerlink" title="2.2创建raid0"></a>2.2创建raid0</h3><h4 id="2-2-1创建"><a href="#2-2-1创建" class="headerlink" title="2.2.1创建"></a>2.2.1创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-C:创建软raid<br>-l：指定raid级别<br>-n：指定raid中设备个数<br>[root@192 ~]# mdadm -C /dev/md0 -l 0 -n 2 /dev/sdb1 /dev/sdb2<br>mdadm: Defaulting to version 1.2 metadata<br>mdadm: array /dev/md0 started.<br></code></pre></td></tr></table></figure><h4 id="2-2-2查看RAID信息："><a href="#2-2-2查看RAID信息：" class="headerlink" title="2.2.2查看RAID信息："></a>2.2.2查看RAID信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] <br>md0 : active raid0 sdb2[1] sdb1[0]<br>      20952064 blocks super 1.2 512k chunks<br>      <br>unused devices: &lt;none&gt;<br></code></pre></td></tr></table></figure><h4 id="2-2-3查看指定的RAID信息："><a href="#2-2-3查看指定的RAID信息：" class="headerlink" title="2.2.3查看指定的RAID信息："></a>2.2.3查看指定的RAID信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm --detail /dev/md0<br>/dev/md0:<br>           Version : 1.2<br>     Creation Time : Fri Apr  4 16:45:39 2025<br>        Raid Level : raid0<br>        Array Size : 20952064 (19.98 GiB 21.45 GB)<br>      Raid Devices : 2<br>     Total Devices : 2<br>       Persistence : Superblock is persistent<br><br>       Update Time : Fri Apr  4 16:45:39 2025<br>             State : clean <br>    Active Devices : 2<br>   Working Devices : 2<br>    Failed Devices : 0<br>     Spare Devices : 0<br><br>            Layout : original<br>        Chunk Size : 512K<br><br>Consistency Policy : none<br><br>              Name : 192.168.135.174:0  (<span class="hljs-built_in">local</span> to host 192.168.135.174)<br>              UUID : 1a44ef6c:1e8a114a:5df87f1b:1b4a1845<br>            Events : 0<br><br>    Number   Major   Minor   RaidDevice State<br>       0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>       1       8       18        1      active <span class="hljs-built_in">sync</span>   /dev/sdb2<br></code></pre></td></tr></table></figure><h4 id="2-2-4格式化挂载使用并查看空间使用情况："><a href="#2-2-4格式化挂载使用并查看空间使用情况：" class="headerlink" title="2.2.4格式化挂载使用并查看空间使用情况："></a>2.2.4格式化挂载使用并查看空间使用情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mkfs.ext4 /dev/md0<br>mke2fs 1.47.0 (5-Feb-2023)<br>创建含有 5238016 个块（每块 4k）和 1310720 个 inode 的文件系统<br>文件系统 UUID：d6fa2ff5-b54c-4300-9fc2-eeceaa32ef9a<br>超级块的备份存储于下列块：<br>32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, <br>4096000<br><br>正在分配组表：完成                            <br>正在写入 inode表：完成                            <br>创建日志（32768 个块）：完成<br>写入超级块和文件系统账户统计信息：已完成 <br><br>[root@192 ~]# <span class="hljs-built_in">mkdir</span> /md0（创建挂载目录）<br>[root@192 ~]# mount /dev/md0 /md0/<br>[root@192 ~]# <span class="hljs-built_in">df</span> -h<br>文件系统        大小  已用  可用 已用% 挂载点<br>/dev/sda4        26G  2.7G   23G   11% /<br>devtmpfs        4.0M     0  4.0M    0% /dev<br>tmpfs           1.7G     0  1.7G    0% /dev/shm<br>tmpfs           4.0M     0  4.0M    0% /sys/fs/cgroup<br>tmpfs           682M  8.8M  673M    2% /run<br>/dev/sda4        26G  2.7G   23G   11% /home<br>tmpfs           1.7G     0  1.7G    0% /tmp<br>/dev/sda2       974M  207M  700M   23% /boot<br>/dev/md0         20G   24K   19G    1% /md0<br></code></pre></td></tr></table></figure><p>停止raid并擦除超级块（superblock）清楚相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.卸载设备<br><span class="hljs-comment"># umount /md5/</span><br>2.移除所有磁盘<br><span class="hljs-comment"># mdadm /dev/md0 -f /dev/sdb[12]</span><br><span class="hljs-comment"># mdadm /dev/md0 -r /dev/sdb[12]</span><br>3.停止raid：<br><span class="hljs-comment"># mdadm --stop /dev/md0</span><br>4.擦除超级块（superblock）清楚相关信息<br><span class="hljs-comment"># mdadm --zero-superblock /dev/sdb[12]</span><br></code></pre></td></tr></table></figure><h3 id="2-3创建raid1"><a href="#2-3创建raid1" class="headerlink" title="2.3创建raid1"></a>2.3创建raid1</h3><h4 id="2-3-1创建raid1："><a href="#2-3-1创建raid1：" class="headerlink" title="2.3.1创建raid1："></a>2.3.1创建raid1：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -C /dev/md1 -l 1 -n 2 /dev/sdb1 /dev/sdb2<br></code></pre></td></tr></table></figure><h4 id="2-3-2查看状态信息："><a href="#2-3-2查看状态信息：" class="headerlink" title="2.3.2查看状态信息："></a>2.3.2查看状态信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# watch -n1 <span class="hljs-string">&quot;cat /proc/mdstat&quot;</span> <br><span class="hljs-comment">#watch命令监控该文件变化情况,1秒钟显示一次</span><br><span class="hljs-comment">#或者直接查看</span><br>[root@node01 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat <br>Personalities : [raid0] [raid1] <br>md1 : active raid1 sdb2[1] sdb1[0]<br>      10475520 blocks super 1.2 [2/2] [UU]<br>      <br>unused devices: &lt;none&gt;<br>      <span class="hljs-comment">#以上信息说明两块盘在进行同步，100%说明同步完成</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3查看raid1详细信息"><a href="#2-3-3查看raid1详细信息" class="headerlink" title="2.3.3查看raid1详细信息"></a>2.3.3查看raid1详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -D /dev/md1   <br></code></pre></td></tr></table></figure><h4 id="2-3-4格式化挂载使用："><a href="#2-3-4格式化挂载使用：" class="headerlink" title="2.3.4格式化挂载使用："></a>2.3.4格式化挂载使用：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mkfs.ext4 /dev/md1<br>[root@192 ~]# <span class="hljs-built_in">mkdir</span> /md1<br>[root@192 ~]# mount /dev/md1 /md1<br></code></pre></td></tr></table></figure><h4 id="2-3-5查看空间使用情况："><a href="#2-3-5查看空间使用情况：" class="headerlink" title="2.3.5查看空间使用情况："></a>2.3.5查看空间使用情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">df</span> -h<br>文件系统        大小  已用  可用 已用% 挂载点<br>/dev/md1      9.8G  24K  9.3G  1%  /md1<br><span class="hljs-comment">#可用空间50%</span><br></code></pre></td></tr></table></figure><h4 id="2-3-6测试验证热插拔："><a href="#2-3-6测试验证热插拔：" class="headerlink" title="2.3.6测试验证热插拔："></a>2.3.6测试验证热插拔：</h4><h5 id="1-模拟一块盘故障（将磁盘标记为失效）"><a href="#1-模拟一块盘故障（将磁盘标记为失效）" class="headerlink" title="1.模拟一块盘故障（将磁盘标记为失效）"></a>1.模拟一块盘故障（将磁盘标记为失效）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md1 -f /dev/sdb2<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb2 faulty <span class="hljs-keyword">in</span> /dev/md1<br><span class="hljs-comment">#-f or --fail  表示失效</span><br></code></pre></td></tr></table></figure><h5 id="2-查看raid1状态"><a href="#2-查看raid1状态" class="headerlink" title="2.查看raid1状态"></a>2.查看raid1状态</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] [raid1] <br>md1 : active raid1 sdb2[1](F) sdb1[0](F表示失效失败)<br>      10475520 blocks super 1.2 [2/1] [U_]<br>      <span class="hljs-comment">#_表示有一块盘失效</span><br>unused devices: &lt;none&gt;<br><br>[root@192 dev]# mdadm -D /dev/md1<br>...<br>    Number   Major   Minor   RaidDevice State<br>       0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>       -       0        0        1      removed<br>       1       8       18        -      faulty   /dev/sdb2<br><span class="hljs-comment"># 失效盘等待移除</span><br></code></pre></td></tr></table></figure><h5 id="3-移除故障或者失效硬盘（热拔）"><a href="#3-移除故障或者失效硬盘（热拔）" class="headerlink" title="3.移除故障或者失效硬盘（热拔）"></a>3.移除故障或者失效硬盘（热拔）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md1 -r /dev/sdb1<br>mdadm: hot removed /dev/sdb1 from /dev/md1<br><br><span class="hljs-comment">#-r or --remove 表示移除</span><br><br>[root@192 ~]# mdadm -D /dev/md1<br>...<br>Number   Major   Minor   RaidDevice State<br>   0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>   -       0        0        1      removed<br></code></pre></td></tr></table></figure><h5 id="4-加入新的磁盘到raid1中（热插）"><a href="#4-加入新的磁盘到raid1中（热插）" class="headerlink" title="4.加入新的磁盘到raid1中（热插）"></a>4.加入新的磁盘到raid1中（热插）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm  /dev/md1 -a /dev/sdb5<br>mdadm: added /dev/sdd5<br></code></pre></td></tr></table></figure><h5 id="5-加入新的磁盘到raid1中（热插）"><a href="#5-加入新的磁盘到raid1中（热插）" class="headerlink" title="5.加入新的磁盘到raid1中（热插）"></a>5.加入新的磁盘到raid1中（热插）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm  /dev/md1 -a /dev/sdb3<br>mdadm: added /dev/sdb3<br><br><span class="hljs-comment">#-a or --add 表示增加</span><br><br>[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat <br></code></pre></td></tr></table></figure><h3 id="2-4创建raid5"><a href="#2-4创建raid5" class="headerlink" title="2.4创建raid5"></a>2.4创建raid5</h3><h4 id="2-4-1创建raid5："><a href="#2-4-1创建raid5：" class="headerlink" title="2.4.1创建raid5："></a>2.4.1创建raid5：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -C /dev/md5 -l 5 -n 3 -x 1 /dev/sdb&#123;1,2,3,4&#125;<br><span class="hljs-comment">#-x, --spare-devices=  表示指定热备盘</span><br>[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] <br>md5 : active raid5 sdb3[4] sdb4[3](S) sdb2[1] sdb1[0]<br>      10473472 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3/3] [UUU]<br>      <br>unused devices: &lt;none&gt;<br></code></pre></td></tr></table></figure><p>说明：热备盘表示当其中一块盘故障后，热备盘会立马顶上去，而不需要人为手动干预。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -D /dev/md5<br>    Number   Major   Minor   RaidDevice State<br>       0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>       1       8       18        1      active <span class="hljs-built_in">sync</span>   /dev/sdb2<br>       4       8       19        2      active <span class="hljs-built_in">sync</span>   /dev/sdb3<br>       3       8       20        -      spare     /dev/sdb4<br></code></pre></td></tr></table></figure><h4 id="2-4-2格式化挂载使用："><a href="#2-4-2格式化挂载使用：" class="headerlink" title="2.4.2格式化挂载使用："></a>2.4.2格式化挂载使用：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mkfs.ext4 /dev/md5<br>[root@192 ~]# <span class="hljs-built_in">mkdir</span> /md5<br>[root@192 ~]# mount /dev/md5 /md5/<br></code></pre></td></tr></table></figure><h4 id="2-4-3查看空间使用情况："><a href="#2-4-3查看空间使用情况：" class="headerlink" title="2.4.3查看空间使用情况："></a>2.4.3查看空间使用情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">df</span> -h<br>文件系统             容量  已用  可用 已用% 挂载点<br>/dev/md5        9.8G   24K  9.3G    1%  /md5<br><span class="hljs-comment">#可用空间 （磁盘数量-1）x 单一磁盘容量</span><br></code></pre></td></tr></table></figure><h4 id="2-4-4测试热备磁盘作用："><a href="#2-4-4测试热备磁盘作用：" class="headerlink" title="2.4.4测试热备磁盘作用："></a>2.4.4测试热备磁盘作用：</h4><h5 id="1-标记一块活动盘失效"><a href="#1-标记一块活动盘失效" class="headerlink" title="1.标记一块活动盘失效"></a>1.标记一块活动盘失效</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md5 -f /dev/sdb1<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb1 faulty <span class="hljs-keyword">in</span> /dev/md5<br><br>[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] <br>md5 : active raid5 sdb3[4] sdb4[3] sdb2[1] sdb1[0](F)<br>      10473472 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3/3] [UUU]<br>      <br>unused devices: &lt;none&gt;<br><br>[root@192 ~]# mdadm -D /dev/md5<br>    Number   Major   Minor   RaidDevice State<br>       3       8       20        0      active <span class="hljs-built_in">sync</span>   /dev/sdb4<br>       1       8       18        1      active <span class="hljs-built_in">sync</span>   /dev/sdb2<br>       4       8       19        2      active <span class="hljs-built_in">sync</span>   /dev/sdb3<br><br>       0       8       17        -      faulty   /dev/sdb1<br><br></code></pre></td></tr></table></figure><h5 id="2-移除失效的盘"><a href="#2-移除失效的盘" class="headerlink" title="2.移除失效的盘"></a>2.移除失效的盘</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md5 -r /dev/sdb1<br>mdadm: hot removed /dev/sdb1 from /dev/md5<br>[root@192 ~]# mdadm /dev/md5 -a /dev/sdb1<br>mdadm: added /dev/sdb1<br></code></pre></td></tr></table></figure><h2 id="3-保存RAID信息"><a href="#3-保存RAID信息" class="headerlink" title="3.保存RAID信息"></a>3.保存RAID信息</h2><p>为什么要保存raid信息？<br>如果不做信息的保存，在CentOS6中，重启系统后raid不能自动被识别到，7,8系统中不会出现这种状况。</p><h3 id="3-1创建配置文件"><a href="#3-1创建配置文件" class="headerlink" title="3.1创建配置文件"></a>3.1创建配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">cat</span> /etc/mdadm.conf<br>ARRAY /dev/md5 metadata=1.2 spares=1 name=192.168.135.174:5 UUID=352fe575:2b243e2a:3d6f59b4:88ef686a<br></code></pre></td></tr></table></figure><h2 id="4-raid停止与启动"><a href="#4-raid停止与启动" class="headerlink" title="4.raid停止与启动"></a>4.raid停止与启动</h2><p>以RAID5为例说明：<br>停止raid:</p><h4 id="4-1卸载raid"><a href="#4-1卸载raid" class="headerlink" title="4.1卸载raid"></a>4.1卸载raid</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># umount /md5 </span><br></code></pre></td></tr></table></figure><h4 id="4-2-使用命令停止raid"><a href="#4-2-使用命令停止raid" class="headerlink" title="4.2.使用命令停止raid"></a>4.2.使用命令停止raid</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm --stop /dev/md5</span><br></code></pre></td></tr></table></figure><h4 id="4-3-启动raid"><a href="#4-3-启动raid" class="headerlink" title="4.3.启动raid"></a>4.3.启动raid</h4><h5 id="4-3-1配置文件-etc-mdadm-conf-存在如下启动"><a href="#4-3-1配置文件-etc-mdadm-conf-存在如下启动" class="headerlink" title="4.3.1配置文件(&#x2F;etc&#x2F;mdadm.conf)存在如下启动"></a>4.3.1配置文件(&#x2F;etc&#x2F;mdadm.conf)存在如下启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm -A /dev/md5</span><br></code></pre></td></tr></table></figure><h5 id="4-3-2配置文件-etc-mdadm-conf-不存在如下启动"><a href="#4-3-2配置文件-etc-mdadm-conf-不存在如下启动" class="headerlink" title="4.3.2配置文件(&#x2F;etc&#x2F;mdadm.conf)不存在如下启动"></a>4.3.2配置文件(&#x2F;etc&#x2F;mdadm.conf)不存在如下启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm -A /dev/md5 /dev/sdb[1234]</span><br></code></pre></td></tr></table></figure><h5 id="4-3-3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合"><a href="#4-3-3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合" class="headerlink" title="4.3.3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合"></a>4.3.3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -E /dev/sdb1 | grep UUID<br>     Array UUID : 352fe575:2b243e2a:3d6f59b4:88ef686a<br>    Device UUID : fd110eee:41700eb5:242c1771:5b5ab08f<br><span class="hljs-comment">#说明：同一个raid里每个磁盘查看的UUID都是这个值</span><br>[root@192 ~]# mdadm -E /dev/sdb2 | grep UUID<br>     Array UUID : 352fe575:2b243e2a:3d6f59b4:88ef686a<br>    Device UUID : 974d110f:f9cb7a58:19b41563:4781649c<br><span class="hljs-comment">#通过以上方法找到后进行重新组合，如下：</span><br>[root@node01 ~]# mdadm -A --uuid=352fe575:2b243e2a:3d6f59b4:88ef686a /dev/md5<br>mdadm: /dev/md5 has been started with 3 drives and 1 spare.<br></code></pre></td></tr></table></figure><h4 id="4-4raid的删除"><a href="#4-4raid的删除" class="headerlink" title="4.4raid的删除"></a>4.4raid的删除</h4><h5 id="4-4-1卸载设备"><a href="#4-4-1卸载设备" class="headerlink" title="4.4.1卸载设备"></a>4.4.1卸载设备</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># umount /md5/</span><br></code></pre></td></tr></table></figure><h5 id="4-4-2移出所有磁盘"><a href="#4-4-2移出所有磁盘" class="headerlink" title="4.4.2移出所有磁盘"></a>4.4.2移出所有磁盘</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 dev]# mdadm /dev/md5 -f /dev/sdb[1234]<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb6 faulty <span class="hljs-keyword">in</span> /dev/md5<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb7 faulty <span class="hljs-keyword">in</span> /dev/md5<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb8 faulty <span class="hljs-keyword">in</span> /dev/md5<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb9 faulty <span class="hljs-keyword">in</span> /dev/md5<br><br>[root@192 dev]# mdadm /dev/md5 -r /dev/sdb[1234]<br>mdadm: hot removed /dev/sdb6 from /dev/md5<br>mdadm: hot removed /dev/sdb7 from /dev/md5<br>mdadm: hot removed /dev/sdb8 from /dev/md5<br>mdadm: hot removed /dev/sdb9 from /dev/md5<br></code></pre></td></tr></table></figure><h5 id="4-4-3停止raid"><a href="#4-4-3停止raid" class="headerlink" title="4.4.3停止raid"></a>4.4.3停止raid</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node01 ~]# mdadm --stop /dev/md5<br>mdadm: stopped /dev/md5<br></code></pre></td></tr></table></figure><p>4.4.4擦出超级块（superblock）清除相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm --zero-superblock /dev/sdb[1234]</span><br></code></pre></td></tr></table></figure><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>做之前注意看一下系统内核是否自动装配了raid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 dev]# mdadm --examine /dev/sdb1 /dev/sdb2<br>mdadm: No md superblock detected on /dev/sdb1.<br>mdadm: No md superblock detected on /dev/sdb2.<br></code></pre></td></tr></table></figure><p>这里可以看到没有，如果自动装填了，那我们需要去先停止自动创建的设备，并且清楚分区上RAID元数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 停止自动创建的 RAID 设备<br>mdadm --stop /dev/mdXXX<br><br>2. 清除分区上的 RAID 元数据<br>mdadm --zero-superblock /dev/sde1 /dev/sde2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Virtualenv基础命令</title>
    <link href="/2025/02/19/Virtualenv%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/Virtualenv%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-安装-virtualenv-如果你还没有安装-virtualenv，可以使用-pip-进行安装："><a href="#1-安装-virtualenv-如果你还没有安装-virtualenv，可以使用-pip-进行安装：" class="headerlink" title="1.安装 virtualenv 如果你还没有安装 virtualenv，可以使用 pip 进行安装："></a>1.安装 virtualenv 如果你还没有安装 <code>virtualenv</code>，可以使用 <code>pip</code> 进行安装：</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install virtualenv<br></code></pre></td></tr></table></figure><h4 id="2-创建虚拟环境在指定目录下创建一个新的虚拟环境："><a href="#2-创建虚拟环境在指定目录下创建一个新的虚拟环境：" class="headerlink" title="2.创建虚拟环境在指定目录下创建一个新的虚拟环境："></a>2.创建虚拟环境在指定目录下创建一个新的虚拟环境：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv myenv<br></code></pre></td></tr></table></figure><p>或者你可以指定 Python 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv -p /usr/bin/python3 myenv<br></code></pre></td></tr></table></figure><h4 id="3-激活虚拟环境激活虚拟环境后，你的-shell-提示符会显示当前活动的环境名称。"><a href="#3-激活虚拟环境激活虚拟环境后，你的-shell-提示符会显示当前活动的环境名称。" class="headerlink" title="3.激活虚拟环境激活虚拟环境后，你的 shell 提示符会显示当前活动的环境名称。"></a>3.激活虚拟环境激活虚拟环境后，你的 shell 提示符会显示当前活动的环境名称。</h4><ul><li><p>在 Windows 上**(进入到你创建的虚拟环境文件中的Script目录，直接执行activate)**：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\myenv\Scripts\activate<br></code></pre></td></tr></table></figure></li><li><p>在 macOS&#x2F;Linux 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> myenv/bin/activate<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-停用虚拟环境当你想退出虚拟环境时，可以使用以下命令："><a href="#4-停用虚拟环境当你想退出虚拟环境时，可以使用以下命令：" class="headerlink" title="4.停用虚拟环境当你想退出虚拟环境时，可以使用以下命令："></a>4.停用虚拟环境当你想退出虚拟环境时，可以使用以下命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure><h4 id="5-删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可："><a href="#5-删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可：" class="headerlink" title="5.删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可："></a>5.删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可：</h4><p>linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf myenv<br></code></pre></td></tr></table></figure><p>或者在 Windows 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> /s /q myenv<br></code></pre></td></tr></table></figure><h4 id="6-列出已安装的包在激活的虚拟环境中，你可以使用-pip-列出已安装的包："><a href="#6-列出已安装的包在激活的虚拟环境中，你可以使用-pip-列出已安装的包：" class="headerlink" title="6.列出已安装的包在激活的虚拟环境中，你可以使用 pip 列出已安装的包："></a>6.列出已安装的包在激活的虚拟环境中，你可以使用 <code>pip</code> 列出已安装的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip list<br></code></pre></td></tr></table></figure><h4 id="7-安装包使用-pip-安装包到当前激活的虚拟环境中："><a href="#7-安装包使用-pip-安装包到当前激活的虚拟环境中：" class="headerlink" title="7.安装包使用 pip 安装包到当前激活的虚拟环境中："></a>7.安装包使用 <code>pip</code> 安装包到当前激活的虚拟环境中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install package_name<br></code></pre></td></tr></table></figure><h4 id="8-更新包更新已安装的包："><a href="#8-更新包更新已安装的包：" class="headerlink" title="8.更新包更新已安装的包："></a>8.更新包更新已安装的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install --upgrade package_name<br></code></pre></td></tr></table></figure><h4 id="9-卸载包卸载不需要的包："><a href="#9-卸载包卸载不需要的包：" class="headerlink" title="9.卸载包卸载不需要的包："></a>9.卸载包卸载不需要的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip uninstall package_name<br></code></pre></td></tr></table></figure><h4 id="10-导出环境配置文件将当前环境中的所有包及其版本信息导出到一个-requirements-txt-文件中："><a href="#10-导出环境配置文件将当前环境中的所有包及其版本信息导出到一个-requirements-txt-文件中：" class="headerlink" title="10.导出环境配置文件将当前环境中的所有包及其版本信息导出到一个 requirements.txt 文件中："></a>10.导出环境配置文件将当前环境中的所有包及其版本信息导出到一个 <code>requirements.txt</code> 文件中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure><h4 id="11-从配置文件安装包根据-requirements-txt-文件安装所有需要的包："><a href="#11-从配置文件安装包根据-requirements-txt-文件安装所有需要的包：" class="headerlink" title="11.从配置文件安装包根据 requirements.txt 文件安装所有需要的包："></a>11.从配置文件安装包根据 <code>requirements.txt</code> 文件安装所有需要的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>Virtualenv</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda基础命令</title>
    <link href="/2025/02/19/Anaconda%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/Anaconda%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-创建新的-Conda-环境"><a href="#1-创建新的-Conda-环境" class="headerlink" title="1.创建新的 Conda 环境"></a>1.创建新的 Conda 环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create --name 环境名 python=3.x<br></code></pre></td></tr></table></figure><h4 id="2-激活环境"><a href="#2-激活环境" class="headerlink" title="2.激活环境"></a>2.激活环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate 环境名<br></code></pre></td></tr></table></figure><h4 id="3-停用当前环境"><a href="#3-停用当前环境" class="headerlink" title="3.停用当前环境"></a>3.停用当前环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<br></code></pre></td></tr></table></figure><h4 id="4-列出所有环境"><a href="#4-列出所有环境" class="headerlink" title="4.列出所有环境"></a>4.列出所有环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><h4 id="5-删除环境"><a href="#5-删除环境" class="headerlink" title="5. 删除环境"></a>5. 删除环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda remove --name myenv --all<br></code></pre></td></tr></table></figure><h4 id="6-安装包"><a href="#6-安装包" class="headerlink" title="6.安装包"></a>6.安装包</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install package_name<br></code></pre></td></tr></table></figure><h4 id="7-更新包"><a href="#7-更新包" class="headerlink" title="7.更新包"></a>7.更新包</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda update package_name<br></code></pre></td></tr></table></figure><h4 id="8-卸载包"><a href="#8-卸载包" class="headerlink" title="8.卸载包"></a>8.卸载包</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda remove package_name<br></code></pre></td></tr></table></figure><h4 id="9-查看已安装的包列表"><a href="#9-查看已安装的包列表" class="headerlink" title="9.查看已安装的包列表"></a>9.查看已安装的包列表</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda list<br></code></pre></td></tr></table></figure><h4 id="10-导出环境配置文件"><a href="#10-导出环境配置文件" class="headerlink" title="10.导出环境配置文件"></a>10.导出环境配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> &gt; environment.yml<br></code></pre></td></tr></table></figure><h4 id="11-从配置文件创建环境"><a href="#11-从配置文件创建环境" class="headerlink" title="11.从配置文件创建环境"></a>11.从配置文件创建环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> create -f environment.yml<br></code></pre></td></tr></table></figure><h4 id="12-搜索包"><a href="#12-搜索包" class="headerlink" title="12.搜索包"></a>12.搜索包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda search search_term<br></code></pre></td></tr></table></figure><h4 id="13-虚拟环境解释器所处位置"><a href="#13-虚拟环境解释器所处位置" class="headerlink" title="13.虚拟环境解释器所处位置"></a>13.虚拟环境解释器所处位置</h4><p>Anaconda安装位置的envs中，例子：D:\Apps\anaconda3\envs</p>]]></content>
    
    
    <categories>
      
      <category>Anaconda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda与virtualenv</title>
    <link href="/2025/02/19/Anaconda%E4%B8%8Evirtualenv/"/>
    <url>/2025/02/19/Anaconda%E4%B8%8Evirtualenv/</url>
    
    <content type="html"><![CDATA[<p>Anaconda虚拟环境（基于<code>conda</code>）与<code>virtualenv</code>虚拟环境在多个方面存在显著差异，以下是它们的详细对比：</p><h3 id="1-包管理与依赖范围"><a href="#1-包管理与依赖范围" class="headerlink" title="1. 包管理与依赖范围"></a>1. <strong>包管理与依赖范围</strong></h3><ul><li><strong>Anaconda (conda)</strong><ul><li><strong>多语言支持</strong>：管理Python包的同时，可处理非Python依赖（如C&#x2F;C++库、R包等），例如MKL、OpenSSL。</li><li><strong>预编译二进制包</strong>：通过Anaconda仓库提供优化后的二进制包，避免从源码编译，适合科学计算。</li><li><strong>依赖解析器</strong>：具备更强的依赖冲突解决能力，适合复杂依赖环境。</li></ul></li><li><strong>virtualenv</strong><ul><li><strong>纯Python环境</strong>：仅管理Python包，依赖<code>pip</code>安装，非Python依赖需手动处理。</li><li><strong>源码编译</strong>：部分包需本地编译（如无预编译wheel），可能需安装系统级开发工具。</li></ul></li></ul><h3 id="2-Python版本管理"><a href="#2-Python版本管理" class="headerlink" title="2. Python版本管理"></a>2. <strong>Python版本管理</strong></h3><ul><li><strong>conda</strong>：可直接安装不同Python版本，无需预先存在于系统（如<code>conda create -n env python=3.6</code>）。</li><li><strong>virtualenv</strong>：依赖系统已安装的Python版本，需结合<code>pyenv</code>等工具切换Python版本。</li></ul><h3 id="3-跨平台与生态系统"><a href="#3-跨平台与生态系统" class="headerlink" title="3. 跨平台与生态系统"></a>3. <strong>跨平台与生态系统</strong></h3><ul><li><strong>conda</strong>：原生支持Windows、Linux、macOS，尤其在Windows上兼容性更佳（解决C库依赖问题）。</li><li><strong>virtualenv</strong>：跨平台支持良好，但部分库在Windows下可能存在兼容性问题（如某些C扩展包）。</li></ul><h3 id="4-环境隔离与资源占用"><a href="#4-环境隔离与资源占用" class="headerlink" title="4. 环境隔离与资源占用"></a>4. <strong>环境隔离与资源占用</strong></h3><ul><li><strong>隔离程度</strong>：两者均隔离Python解释器和包，但<code>conda</code>能处理更广泛的系统依赖。</li><li><strong>资源占用</strong>：Anaconda默认包含大量科学计算包，占用更大磁盘空间；<code>virtualenv</code>环境更轻量。</li></ul><h3 id="5-适用场景"><a href="#5-适用场景" class="headerlink" title="5. 适用场景"></a>5. <strong>适用场景</strong></h3><ul><li><strong>conda</strong>：适合数据科学、机器学习等需要复杂依赖或跨语言工具链的项目（如使用NumPy、TensorFlow）。</li><li><strong>virtualenv</strong>：适合普通Python开发（如Web开发、脚本工具），依赖简单且无需科学计算库。</li></ul><h3 id="6-配置与工具"><a href="#6-配置与工具" class="headerlink" title="6. 配置与工具"></a>6. <strong>配置与工具</strong></h3><ul><li><strong>配置文件</strong>：<ul><li><strong>conda</strong>：使用<code>environment.yml</code>，可指定通道、Python版本及非Python依赖。</li><li><strong>virtualenv</strong>：依赖<code>requirements.txt</code>，仅记录Python包及版本。</li></ul></li><li><strong>图形界面</strong>：Anaconda提供Navigator管理环境和包，<code>virtualenv</code>仅命令行操作。</li></ul><h3 id="7-性能与灵活性"><a href="#7-性能与灵活性" class="headerlink" title="7. 性能与灵活性"></a>7. <strong>性能与灵活性</strong></h3><ul><li><strong>依赖安装速度</strong>：<code>conda</code>可能因解析复杂依赖较慢，但二进制包安装更快；<code>pip</code>在简单场景下更快。</li><li><strong>混合使用</strong>：<code>conda</code>环境中可混合使用<code>conda</code>与<code>pip</code>（但有冲突风险），而<code>virtualenv</code>统一使用<code>pip</code>。</li></ul><h3 id="8-社区与支持"><a href="#8-社区与支持" class="headerlink" title="8. 社区与支持"></a>8. <strong>社区与支持</strong></h3><ul><li><strong>conda</strong>：受数据科学社区支持，与PyTorch、Jupyter等工具深度集成。</li><li><strong>virtualenv</strong>：广泛用于通用Python开发，与PyPI生态无缝衔接。</li></ul><h3 id="总结对比表"><a href="#总结对比表" class="headerlink" title="总结对比表"></a>总结对比表</h3><table><thead><tr><th><strong>对比维度</strong></th><th><strong>Anaconda (conda)</strong></th><th><strong>virtualenv</strong></th></tr></thead><tbody><tr><td><strong>依赖管理</strong></td><td>Python + 非Python依赖</td><td>仅Python包</td></tr><tr><td><strong>Python版本切换</strong></td><td>直接安装任意版本</td><td>依赖系统已安装版本</td></tr><tr><td><strong>包来源</strong></td><td>Anaconda仓库、conda-forge等</td><td>PyPI</td></tr><tr><td><strong>适用领域</strong></td><td>数据科学、机器学习</td><td>通用Python开发（如Web、脚本）</td></tr><tr><td><strong>配置文件</strong></td><td>environment.yml（含环境元数据）</td><td>requirements.txt（仅包列表）</td></tr><tr><td><strong>跨平台体验</strong></td><td>Windows支持更佳（预编译二进制）</td><td>依赖系统编译环境</td></tr><tr><td><strong>资源占用</strong></td><td>较大（默认科学包）</td><td>轻量</td></tr><tr><td><strong>隔离程度</strong></td><td>高（包括系统库）</td><td>中（仅Python层）</td></tr></tbody></table><h3 id="选择建议"><a href="#选择建议" class="headerlink" title="选择建议"></a>选择建议</h3><ul><li><strong>优先选conda</strong>：项目涉及科学计算、跨语言依赖或需隔离系统库（如CUDA版本）。</li><li><strong>优先选virtualenv</strong>：轻量级开发、依赖简单或需严格遵循PyPI生态。</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>虚拟环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署脚本</title>
    <link href="/2025/02/12/docker%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/02/12/docker%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>执行时显示解释头有问题，则是windows与linux之间的换行符问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">方法1:用vim打开执行命令：<br><span class="hljs-built_in">set</span> fileformat=unix<br>方法2:用工具dos2unix<br>dos2unix ./your_script.sh<br></code></pre></td></tr></table></figure><p>以下为安装docker的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装docker&quot;</span><br><span class="hljs-comment"># 1.安装docker依赖环境</span><br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-comment"># 2.配置国内docker-ce（社区版）的yum源（采用阿里云）</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-comment"># 3.安装docker CE</span><br>yum -y install docker-ce docker-ce-cli containerd.io<br><span class="hljs-comment"># 4.开启网络转发功能</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> -a /etc/sysctl.conf<br><span class="hljs-comment"># 执行生效</span><br>sysctl -p<br><span class="hljs-comment"># 加载驱动</span><br>modprobe ip_tables<br><span class="hljs-comment"># 查看状态</span><br><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/ip_forward<br><span class="hljs-comment"># 查看一下iptable规则，关闭防火墙后会自动插入新规则</span><br>iptables -nL <br><span class="hljs-comment"># 关闭防火墙</span><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld  <br><span class="hljs-comment"># 重启docker</span><br>systemctl restart docker<br><span class="hljs-comment"># 启动服务 并 设置开机自启</span><br>systemctl start docker &amp;&amp; systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>script</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(四)————数据卷挂载路径更改方法</title>
    <link href="/2025/01/16/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E8%B7%AF%E5%BE%84%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/"/>
    <url>/2025/01/16/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E8%B7%AF%E5%BE%84%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>要更改宿主机上的路径，只需在命令中提供一个新的容器路径</p><p>使用前两种方法改路径前，如果容器已经在运行，需要先停止并移除它（然后需要重新创建）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop my_container<br>docker <span class="hljs-built_in">rm</span> my_container<br></code></pre></td></tr></table></figure><h3 id="四种方法-推荐使用2和3，最推荐3-："><a href="#四种方法-推荐使用2和3，最推荐3-：" class="headerlink" title="四种方法(推荐使用2和3，最推荐3)："></a>四种方法(推荐使用2和3，最推荐3)：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 使用：-v</span><br><br>docker run -d \<br>  --name 容器名 \<br>  -v 宿主机路径:新的容器内路径 \<br>  -p 8080:80 \<br>  <span class="hljs-comment"># 将宿主机的 8080 端口映射到容器的 80 端口</span><br>  my_image:tag<br>  <span class="hljs-comment"># 使用的镜像名称和标签。(标签也可不写)</span><br><br><span class="hljs-comment"># 2. 使用：--mount （更灵活，推荐）</span><br><br>docker run -d \<br>  --name my_container \<br>  --mount <span class="hljs-built_in">source</span>=宿主机路径,target=新的容器内路径,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span> \<br>  <span class="hljs-comment"># type=bind：指明绑定</span><br>  my_image:tag<br><br><span class="hljs-comment"># 3.使用Docker Compose（这个不需要移除）</span><br><span class="hljs-comment"># 如果你使用的是Docker Compose来管理你的容器，编辑docker-compose.yml文件中的</span><br><span class="hljs-comment"># volumes设置即可</span><br><br><span class="hljs-comment"># 例子：</span><br>version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  my_service:<br>    image: my_image:tag<br>    volumes:<br>   - 主机路径:新的容器内路径<br><span class="hljs-comment"># 然后运行 docker-compose up -d 来应用更改</span><br><br><span class="hljs-comment"># 4.使用符号链接（这种方法需要容器内的应用程序支持符号链接才行）</span><br><span class="hljs-comment"># 注意这一方法只适用临时方案，长期使用可能导致混乱，并且不适用于所有场景</span><br><span class="hljs-comment"># 先进入正在运行的容器</span><br><br>docker <span class="hljs-built_in">exec</span> -it &lt;container_name&gt; /bin/sh 或 /bin/bash <br><br><span class="hljs-comment"># 创建符号链接（这样，所有对 /old/container/path 的访问都会被重定向到 /new/container/path。）</span><br><br><span class="hljs-built_in">ln</span> -s /new/container/path /old/container/path<br><br><br></code></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker compose"></a>安装docker compose</h3><p>如果你没有安装，则按以下安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><br><span class="hljs-comment"># 开启可执行权限</span><br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br> <br><span class="hljs-comment"># 查看版本</span><br>docker-compose --version<br><span class="hljs-comment">#docker-compose version 1.29.2, build 5becea4c</span><br> <br><span class="hljs-comment"># 使用curl方式安装，这样卸载即可</span><br> <span class="hljs-built_in">rm</span> /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="docker-compose常用命令"><a href="#docker-compose常用命令" class="headerlink" title="docker-compose常用命令"></a>docker-compose常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version <span class="hljs-comment">#查看版本</span><br> <br>docker-compose -h    <span class="hljs-comment"># 查看帮助</span><br> <br>docker-compose up    <span class="hljs-comment"># 启动所有docker-compose服务</span><br> <br>docker-compose up -d    <span class="hljs-comment"># 启动所有docker-compose服务并后台运行</span><br> <br>docker-compose down     <span class="hljs-comment"># 停止并删除容器、网络、卷、镜像。</span><br> <br>docker-compose <span class="hljs-built_in">exec</span>  yml里面的服务<span class="hljs-built_in">id</span>   <span class="hljs-comment"># 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span><br> <br>docker-compose ps      <span class="hljs-comment"># 展示当前docker-compose编排过的运行的所有容器</span><br> <br>docker-compose top       <span class="hljs-comment"># 展示当前docker-compose编排过的容器进程</span><br> <br>docker-compose logs  yml里面的服务<span class="hljs-built_in">id</span>   <span class="hljs-comment"># 查看容器输出日志</span><br> <br>docker-compose config     <span class="hljs-comment"># 检查配置</span><br> <br>docker-compose config -q  <span class="hljs-comment"># 检查配置，有问题才有输出</span><br> <br>docker-compose restart   <span class="hljs-comment"># 重启服务</span><br> <br>docker-compose start     <span class="hljs-comment"># 启动服务</span><br> <br>docker-compose stop      <span class="hljs-comment"># 停止服务</span><br></code></pre></td></tr></table></figure><p>后续操作将开一篇单独文章</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(四)————容器数据卷</title>
    <link href="/2025/01/15/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <url>/2025/01/15/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="1、容器数据卷介绍。"><a href="#1、容器数据卷介绍。" class="headerlink" title="1、容器数据卷介绍。"></a>1、容器数据卷介绍。</h4><p>​docker容器在产生数据的时候，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除之后，数据自然而然的也会消失。为了能保存数据，容器中引用了数据卷的概念。</p><h4 id="2、作用以及特点。"><a href="#2、作用以及特点。" class="headerlink" title="2、作用以及特点。"></a>2、作用以及特点。</h4><p>卷就是目录或者文件，存在一个或者多个容器之中，由docker挂载到容器，但是不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或者共享数据的特性。</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此docker不会再容器删除时删除其挂载的数据卷。</p><p><strong>它还存在以下几种特点：</strong></p><p>​1、数据卷可在容器之间共享或者重用数据。<br>​2、卷中的更改可以直接生效。<br>​3、数据卷中的更改不会包含在镜像的更新中。<br>​4、数据卷的生命周期一直持续到没有容器使用它为止。</p><p>​<strong>再说简单点：方便我们将数据导出来，在删除原本的容器后将其中可用的数据与新的容器对接。</strong></p><p>​<strong>比如  容器a的数据目录挂载在宿主机home下，两处数据同步，a删除后，直接将b新建容器的数据目录再挂载在宿主机home下，同步数据，便能少去数据复刻步骤</strong></p><h4 id="3、使用数据卷。"><a href="#3、使用数据卷。" class="headerlink" title="3、使用数据卷。"></a>3、使用数据卷。</h4><p>（1）：直接使用 -v 命令挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v 主机目录:容器目录 /bin/bash<br></code></pre></td></tr></table></figure><p>创建一个centos容器，并且打开其终端界面，然后将容器centos系统的&#x2F;home目录挂载到宿主机的&#x2F;home&#x2F;test01上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v /home/test01:/home centos /bin/bash<br></code></pre></td></tr></table></figure><p>另外打开一个终端查看宿主机home路径下是否出现test01目录，这个test01目录，就是我们刚启动容器centos的home目录，并且，此时这两个目录是同步的状态，我们在home目录中写入任何新的文件，都会同步到宿主机&#x2F;home&#x2F;test01下，注意是双向同步的。</p><p>（2）：测试同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在宿主机或容器的终端创建一个测试文本</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tong bu&quot;</span> &gt; home/test.txt<br><span class="hljs-comment"># 查看一下另一端的目录下是否有文本文件</span><br></code></pre></td></tr></table></figure><p>当然，我们可以使用更简单的方法查看是否挂载成功</p><p>首先记住这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect 容器ID<br><span class="hljs-comment"># 该命令会返回一个包含所选容器的所有相关数据的 JSON 对象，包括配置、网络设置、挂载点等。</span><br></code></pre></td></tr></table></figure><p>我们找到Mounts，它代表着挂载，type是类型（绑定），source是源（&#x2F;home&#x2F;test01），也就是把什么挂载到哪里。destination（home）就是挂载的目标路径了。</p><p><img src="/img/docker_4_%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD.png"></p><p>这里bote只演示修改容器内文件同步到宿主机挂载文件。反过来也是一样的，这里就不再赘述了。之后如果要修改容器内挂载文件，只需在我们本地挂载点修改就好了，它会自动同步到docker。</p><h5 id="更改方法将在下一篇文章补充给大家。"><a href="#更改方法将在下一篇文章补充给大家。" class="headerlink" title="#####  更改方法将在下一篇文章补充给大家。"></a>#####  更改方法将在下一篇文章补充给大家。</h5><h4 id="4、具名挂载与匿名挂载。"><a href="#4、具名挂载与匿名挂载。" class="headerlink" title="4、具名挂载与匿名挂载。"></a>4、具名挂载与匿名挂载。</h4><p>首先记住这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume <span class="hljs-built_in">ls</span> <span class="hljs-comment">#查看所有卷的情况。</span><br></code></pre></td></tr></table></figure><h5 id="（1）匿名挂载"><a href="#（1）匿名挂载" class="headerlink" title="（1）匿名挂载"></a>（1）匿名挂载</h5><p>我们首先使用匿名挂载的命令启动一个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -P --name=nginx02 -v /etc/nginx nginx<br></code></pre></td></tr></table></figure><p>然后使用docker volume ls 查看，那一长串就是挂载到宿主机的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># less 在信息输出过多的时候使用</span><br>docker inspect （容器ID） | less<br></code></pre></td></tr></table></figure><p>然后输入&#x2F;Mounts, “ &#x2F; ”后是你想查到的内容<br>大家仔细看一下，是不是&#x2F;etc&#x2F;nginx就是那一长串，挂载到了我&#x2F;var&#x2F;lib…路径下，复制一下路径去看一下即可。</p><p><img src="/img/docker_4_%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD.png"></p><h5 id="（2）具名挂载"><a href="#（2）具名挂载" class="headerlink" title="（2）具名挂载"></a>（2）具名挂载</h5><p>具名挂载就很简单了，与匿名挂载类似</p><p>同样，我们使用具名挂载的方式启动一个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -P --name=nginxt04 -v jumingguazai:/etc/nginx nginx<br>docker volume <span class="hljs-built_in">ls</span> 查看卷<br>docker inspect ID | less 找到挂载点。<br></code></pre></td></tr></table></figure><p><img src="/img/docker_4_%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD.png"></p><p>这时我们发现它的Name：jumingguazai，这个也就是我们设置的挂载名</p><p>这就是具名挂载。</p><h5 id="（3）如何确定是具名挂载还是匿名挂载"><a href="#（3）如何确定是具名挂载还是匿名挂载" class="headerlink" title="（3）如何确定是具名挂载还是匿名挂载"></a>（3）如何确定是具名挂载还是匿名挂载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-v  容器内路径               <span class="hljs-comment"># 匿名挂在</span><br>-v  卷名：容器内路径          <span class="hljs-comment"># 具名挂在</span><br>-v  /宿主机路径：容器内路径    <span class="hljs-comment"># 指定路径挂载</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过 -v 容器内路径  :ro   rw   可以改变读写权限</span><br><span class="hljs-comment"># 注意修改需要移除 docker rm 容器名</span><br>ro  <span class="hljs-built_in">readonly</span>   <span class="hljs-comment">#只读</span><br>rw  readwrite  <span class="hljs-comment">#可写可读</span><br>例： docker run -d --name=nginx01 -v test01:/etc/nginx:ro nginx<br>   docker run -d --name=nginx01 -v test01:/etc/nginx:rw nginx<br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好的，大家下期 Dockerfile 再见。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(三)————练手：部署nginx</title>
    <link href="/2025/01/14/docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%BB%83%E6%89%8B%EF%BC%9A%E9%83%A8%E7%BD%B2nginx/"/>
    <url>/2025/01/14/docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%BB%83%E6%89%8B%EF%BC%9A%E9%83%A8%E7%BD%B2nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="首先正常流程是："><a href="#首先正常流程是：" class="headerlink" title="首先正常流程是："></a>首先正常流程是：</h2><p>先搜索镜像再下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search 镜像名<br>docker pull 镜像名<br></code></pre></td></tr></table></figure><h4 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h4><p>但是我们有自己的镜像仓库，所以我们拉取自己的即可<br>镜像仓库 &#x3D;&#x3D;》nginx &#x3D;&#x3D;》操作指南<br>按照指南里面的步骤操作中的前两步将镜像拉去下来<br>（注意，需要什么镜像先使用github的actions（第一期的方法）添加到自己的仓库里）</p><p>命令是一样的，只不过我们需要先登录阿里云Docker Registry，然后docker pull +自己的镜像名即可</p><h4 id="2-查看镜像"><a href="#2-查看镜像" class="headerlink" title="2.查看镜像"></a>2.查看镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h4 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3.启动容器"></a>3.启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name 容器名 -p 80:80 镜像名<br></code></pre></td></tr></table></figure><h4 id="4-查看容器"><a href="#4-查看容器" class="headerlink" title="4.查看容器"></a>4.查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p><img src="/img/docker_3.png"></p><h4 id="5-测试访问"><a href="#5-测试访问" class="headerlink" title="5.测试访问"></a>5.测试访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl 127.0.0.1:80<br>然后就会出现一幅网页代码:<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>html &#123; color-scheme: light dark; &#125;<br>body &#123; width: 35em; margin: 0 auto;<br>font-family: Tahoma, Verdana, Arial, sans-serif; &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h4 id="6-进入容器修改界面"><a href="#6-进入容器修改界面" class="headerlink" title="6.进入容器修改界面"></a>6.进入容器修改界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器ID /bin/bash<br><br>whereis nginx 查找文件位置<br>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx<br><br>这些为其文件，配置与物理机上的大差不差<br></code></pre></td></tr></table></figure><h4 id="7-外网访问"><a href="#7-外网访问" class="headerlink" title="7.外网访问"></a>7.外网访问</h4><p>如果你用的是虚拟机，直接浏览器中：虚拟机的ip:80即可</p><p>我偷懒直接用80映射了，实际工作中80端口要禁止，其他nginx配置看后续其他文章即可</p><h4 id="8-注意事项与参数介绍"><a href="#8-注意事项与参数介绍" class="headerlink" title="8.注意事项与参数介绍"></a>8.注意事项与参数介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [可选参数] image 命令 <span class="hljs-comment">#启动容器（无镜像会先下载镜像）</span><br><span class="hljs-comment">#参数说明</span><br>--name = <span class="hljs-string">&quot;Name&quot;</span>   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷<br></code></pre></td></tr></table></figure><p>大家注意-i 、 -t 、 -d这几个参数。</p><p>it：给我一个可以操作的前台终端。</p><p>id：以后台守护进程的方式运行容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">1：交互方式创建容器，退出后容器关闭。<br>docker run -it 镜像名称:标签 /bin/bash<br><br>2：守护进程方式创建容器。<br>docker run -<span class="hljs-built_in">id</span> 镜像名称:标签<br>通过这种方式创建的容器，我们不会直接进入到容器界面，而是在后台运行了容器，<br>如果我们需要进去，则还需要一个命令。<br>docker <span class="hljs-built_in">exec</span> -it  镜像名称:标签  /bin/bash<br>通过这种方式运行的容器，就不会自动退出了。<br></code></pre></td></tr></table></figure><h4 id="9-最后"><a href="#9-最后" class="headerlink" title="9.最后"></a>9.最后</h4><p>我的文章主要是实际操作，理论极少，因为我希望大家先会操作，只要会操作，会配置，能工作就可以，理论方面会在做的多了以后很快就懂了，而且更加融会贯通。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(二)————安装docker与基础命令</title>
    <link href="/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%BA%8C-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85docker%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%BA%8C-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85docker%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h2><p>​我这里使用的是基于centos的国产某系统，从事过的同行应该知道是什么，它的大部分与centos相同，我测试过，所以如果你是新手，放心使用。</p><p><strong>首先我知道你想安装，但是先别安装</strong></p><p>​在CentOS 8.2版本开始，出于架构更安全以及其与Kubernetes 原生的等原因，CentOS默认安装podman，这是一款与docker类似的容器引擎。</p><p>所以如果你是8.2及以后的版本安装docker后启动任务会出现：</p><p>“Failed to start docker.service: Unit docker.service not found。”</p><p>原因是CentOS默认使用podman代替docker，所以我们需要卸载它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###########卸载podman#############</span><br>yum erase -y podman buildah<br><span class="hljs-comment">#################################</span><br></code></pre></td></tr></table></figure><p>接下来让我们继续：</p><h3 id="1-安装docker依赖环境"><a href="#1-安装docker依赖环境" class="headerlink" title="1.安装docker依赖环境"></a>1.安装docker依赖环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h3 id="2-配置国内docker-ce（社区版）的yum源（采用阿里云）"><a href="#2-配置国内docker-ce（社区版）的yum源（采用阿里云）" class="headerlink" title="2.配置国内docker-ce（社区版）的yum源（采用阿里云）"></a>2.配置国内docker-ce（社区版）的yum源（采用阿里云）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>查看该目录下是否存在docker-ce.repo这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/yum.repos.d<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="3-安装docker-CE"><a href="#3-安装docker-CE" class="headerlink" title="3.安装docker CE"></a>3.安装docker CE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>如果显示哪个包no match</p><p>先查看一下可安装的包版本（如果显示有，那可能是拼写错误）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list 包名 --showduplicates | <span class="hljs-built_in">sort</span> -r<br></code></pre></td></tr></table></figure><p>如果有就单独运行一次 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install 包名<br></code></pre></td></tr></table></figure><p>想知道包名的作用，就使用 yum info 程序名</p><p>使用systemctl 这个命令启动查看一下docker能否正常运行，状态为active</p><h3 id="4-开启网络转发功能"><a href="#4-开启网络转发功能" class="headerlink" title="4.开启网络转发功能"></a>4.开启网络转发功能</h3><p>默认自动开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">路径： /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>手动开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf   <br></code></pre></td></tr></table></figure><p>插入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.ipv4.ip_forward =1<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p   <span class="hljs-comment">#生效</span><br></code></pre></td></tr></table></figure><p>此处如果报错sysctl: cannot stat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ipv4_forward: No such file or directory</p><p>执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">modprobe ip_tables <span class="hljs-comment"># 加载一下驱动</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/ip_forward  <span class="hljs-comment">#查看结果，为1开启成功。</span><br></code></pre></td></tr></table></figure><h3 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5.关闭防火墙"></a>5.关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL <span class="hljs-comment">#查看一下iptable规则，关闭防火墙后会自动插入新规则</span><br><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld  <span class="hljs-comment">#关闭防火墙</span><br><br>systemctl restart docker <br></code></pre></td></tr></table></figure><p>关闭防火墙要把docker重启一下，不然docker的ip包转发功能无法使用。即便防火墙关闭了，docker依旧会调用内核模块netfilter增加规则，所以会新增iptables规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL <span class="hljs-comment">#再查看一下iptable规则，会发现多出很多规则</span><br></code></pre></td></tr></table></figure><h3 id="6-启动服务-并-设置开机自启"><a href="#6-启动服务-并-设置开机自启" class="headerlink" title="6.启动服务 并 设置开机自启"></a>6.启动服务 并 设置开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker &amp;&amp; systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>启动完成后再查看一下网络参数，这个是ip转发会改成1，默认0</p><h3 id="7-基础命令"><a href="#7-基础命令" class="headerlink" title="7.基础命令"></a>7.基础命令</h3><p>哎！这个时候我们就需要搜索和拉取镜像了，我们第一期创建的自己的docker库就有用场了,但是我们下一期说，bote现在要睡了，嘿嘿。</p><p>（1）帮助命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version     <span class="hljs-comment">#显示docker详细信息</span><br>docker info       <span class="hljs-comment">#显示docker的系统信息，包括镜像和容器的数量</span><br>docker --<span class="hljs-built_in">help</span>     <span class="hljs-comment">#docker帮助命令手册</span><br></code></pre></td></tr></table></figure><p>（2）镜像命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images  <span class="hljs-comment">#查看所有本地主机的镜像</span><br>docker search 镜像名           <span class="hljs-comment">#搜索镜像</span><br>docker pull 镜像名 [标签]      <span class="hljs-comment">#下载镜像（如果不写tag，默认是latest）</span><br>docker rmi 镜像名 [标签]       <span class="hljs-comment">#删除镜像    docker rmi -f $(docker images -aq)  删除全部镜像</span><br>docker tag  镜像名:版本   新镜像名:版本    <span class="hljs-comment">#复制镜像并且修改名称</span><br>docker commit  -a <span class="hljs-string">&quot;xxx&quot;</span>  -c <span class="hljs-string">&quot;xxx&quot;</span> 镜像ID 名字：版本   <span class="hljs-comment">#提交镜像 </span><br>-a :提交的镜像作者；<br>-c :使用Dockerfile指令来创建镜像；<br>-m :提交时的说明文字；<br><br>docker load -i    /xxx/xxx.tar         <span class="hljs-comment">#导入镜像</span><br>docker save -o   /xxx/xxx.tar          <span class="hljs-comment">#保存一个镜像为一个tar包</span><br></code></pre></td></tr></table></figure><p>（3）容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [可选参数] image 命令 <span class="hljs-comment">#启动容器（无镜像会先下载镜像）</span><br><span class="hljs-comment">#参数说明</span><br>--name = <span class="hljs-string">&quot;Name&quot;</span>   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷<br><br>docker build  <span class="hljs-comment">#创建镜像        -f：指定dockerfile文件路径   -t：镜像名字以及标签</span><br>docker logs 容器实例的ID          <span class="hljs-comment">#查看容器日志</span><br>docker rename 旧名字  新名字      <span class="hljs-comment"># 给容器重新命名</span><br>docker top    容器实例的ID                  <span class="hljs-comment">#查看容器内进程</span><br>docker ps -a                    <span class="hljs-comment">#列出所有容器（不加-a就是在运行的）</span><br>docker <span class="hljs-built_in">rm</span>      容器实例的ID                 <span class="hljs-comment">#删除容器（正在运行容器不能删除，除非加-f选项）</span><br>docker <span class="hljs-built_in">kill</span>  容器实例的ID        <span class="hljs-comment">#杀掉容器</span><br>docker <span class="hljs-built_in">history</span>   容器实例的ID    <span class="hljs-comment">#查看docker镜像的变更历史</span><br>docker start 容器实例的ID        <span class="hljs-comment">#启动容器</span><br>docker restart 容器实例的ID       <span class="hljs-comment">#重启容器</span><br>docker stop 容器实例的ID         <span class="hljs-comment">#停止正在运行的容器</span><br>docker attach /docker <span class="hljs-built_in">exec</span>  容器实例的ID   <span class="hljs-comment">#同为进入容器命令，不同的是attach连接终止会让容器退出后台运行，而exec不会。并且，docker attach是进入正在执行的终端，不会启动新的进程，而docker exec则会开启一个新的终端，可以在里面操作。</span><br>docker image inspect  容器名称：容器标签       <span class="hljs-comment">#查看容器内源数据</span><br>docker <span class="hljs-built_in">cp</span>  容器<span class="hljs-built_in">id</span>：容器内路径   目的主机路径           <span class="hljs-comment">#从容器内拷贝文件到主机（常用）或者从主机拷贝到容器（一般用挂载）</span><br><span class="hljs-built_in">exit</span>                           <span class="hljs-comment">#直接退出容器 </span><br>crlt + P + Q                   <span class="hljs-comment">#退出容器但是不终止运行</span><br></code></pre></td></tr></table></figure><h3 id="8-最后"><a href="#8-最后" class="headerlink" title="8.最后"></a>8.最后</h3><p>如果有朋友发现有字误或其他错误，欢迎评论指出</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(一)————搭建自己的docker镜像仓库</title>
    <link href="/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <url>/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、为什么不学命令，先学搭建自己的docker仓库？"><a href="#一、为什么不学命令，先学搭建自己的docker仓库？" class="headerlink" title="一、为什么不学命令，先学搭建自己的docker仓库？"></a>一、为什么不学命令，先学搭建自己的docker仓库？</h2><p>​因为Dockerhub宣布不再对中国开源，而国内的多数镜像仓库都停运了，多数大学的都改为仅校内学生申请使用，剩下的一些仓库内的镜像版本都比较老旧，所以我们将基于阿里云提供的<strong>容器镜像服务</strong>和Github的<strong>action</strong>功能搭建自己的docker仓库。</p><h4 id="1-注册两个账号（阿里云与github）"><a href="#1-注册两个账号（阿里云与github）" class="headerlink" title="1.注册两个账号（阿里云与github）"></a>1.注册两个账号（阿里云与github）</h4><p>阿里云：<a href="https://www.aliyun.com/">阿里云-计算，为了无法计算的价值</a></p><p>GitHub：<a href="https://github.com/">https://github.com</a></p><h4 id="2-在阿里云中搜索容器镜像服务"><a href="#2-在阿里云中搜索容器镜像服务" class="headerlink" title="2.在阿里云中搜索容器镜像服务"></a>2.在阿里云中搜索容器镜像服务</h4><p>点击开通</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%911.png"></p><p>选择个人版</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%912.png"></p><p>创建个人版</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%913.png"></p><p>创建命名空间</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%914.png"></p><p>设置固定密码</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%915.png"></p><h4 id="3-在Github中fork一个博主的仓库"><a href="#3-在Github中fork一个博主的仓库" class="headerlink" title="3.在Github中fork一个博主的仓库"></a>3.在Github中fork一个博主的仓库</h4><h6 id="为什么要fork他的仓库？"><a href="#为什么要fork他的仓库？" class="headerlink" title="为什么要fork他的仓库？"></a>为什么要fork他的仓库？</h6><p>因为他已经写好了docker.yaml这个actions工作流文件，此工作流常详细地处理了从镜像拉取、重命名、推送到清理的过程，特别适合于需要频繁更新或同步多个 Docker 镜像到私有仓库的场景。此外，还包含了对磁盘空间管理的考量，确保有足够的空间来进行镜像操作。</p><h6 id="所以你现在有四个数据"><a href="#所以你现在有四个数据" class="headerlink" title="所以你现在有四个数据"></a>所以你现在有四个数据</h6><p>命名空间（<strong>ALIYUN_NAME_SPACE</strong>）：你刚命名的<br>用户名（<strong>ALIYUN_REGISTRY_USER</strong>)：你阿里云的用户名<br>密码（<strong>ALIYUN_REGISTRY_PASSWORD</strong>)：上面让你设置的固定密码<br>仓库地址（<strong>ALIYUN_REGISTRY</strong>）：我涂黑的部分</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%916.png"></p><p>后续按照这位博主的操作完成即可，因为如果用图片去标识的话会很繁琐，而且也不是一目了然，绝不是bote想偷懒，嘿嘿。</p><p> <a href="https://www.bilibili.com/video/BV1Zn4y19743/?share_source=copy_web&vd_source=364c8c17da845006eeb12c4d584799e3">https://www.bilibili.com/video/BV1Zn4y19743/?share_source=copy_web&amp;vd_source=364c8c17da845006eeb12c4d584799e3</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为交换机配置802.1X认证</title>
    <link href="/2025/01/09/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE802-1X%E8%AE%A4%E8%AF%81/"/>
    <url>/2025/01/09/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE802-1X%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-802-1X是做什么的？"><a href="#1-802-1X是做什么的？" class="headerlink" title="1.802.1X是做什么的？"></a>1.802.1X是做什么的？</h2><p>在中型及以上的项目实施中，802.1X是必备的一项配置，简单来说就是检测网络用户的身份，以保证敏感信息的安全性。</p><p>​在这一验证过程中有以下三种角色：</p><ul><li><strong>Supplicant（请求者）</strong>：这是尝试访问受保护网络资源的客户端设备。</li><li><strong>Authenticator（认证器）</strong>：通常是交换机或无线接入点（AP），它充当守门员的角色，只允许经过身份验证的设备访问网络。</li><li><strong>Authentication Server（认证服务器）</strong>：通常是一个RADIUS（Remote Authentication Dial-In User Service）服务器，负责处理来自认证器的身份验证请求，并决定是否授予访问权限。</li></ul><h2 id="2-如何配置802-1X？"><a href="#2-如何配置802-1X？" class="headerlink" title="2.如何配置802.1X？"></a>2.如何配置802.1X？</h2><p>​一般我们将802.1X配置在<strong>接入层</strong>或者<strong>汇聚层</strong>，以下就是配置命令，另外告诉大家一件事，其实在很多项目中使用这一默认配置就可以了，最多根据要求做一点更改，例如最大在线人数等等。</p><h3 id="1-第一种————在接入层配置"><a href="#1-第一种————在接入层配置" class="headerlink" title="(1)第一种————在接入层配置"></a>(1)第一种————在接入层配置</h3><p><img src="/img/802.1X%E6%8E%A5%E5%85%A5%E5%B1%82.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs CLI">1.配置AAA。<br># 创建并配置RADIUS服务器模板“rd1”。<br>[Switch] radius-server template rd1<br>[Switch-radius-rd1] radius-server authentication 192.168.1.30 1812<br>[Switch-radius-rd1] radius-server shared-key cipher YsHsjx_202206<br>[Switch-radius-rd1] quit<br><br># 创建AAA认证方案“abc”并配置认证方式为RADIUS。<br>[Switch] aaa<br>[Switch-aaa] authentication-scheme abc<br>[Switch-aaa-authen-abc] authentication-mode radius<br>[Switch-aaa-authen-abc] quit<br><br># 创建认证域“example.com”，并在其上绑定AAA认证方案“abc”与RADIUS服务器模板“rd1”。<br>[Switch-aaa] domain example.com<br>[Switch-aaa-domain-example.com] authentication-scheme abc<br>[Switch-aaa-domain-example.com] radius-server rd1<br>[Switch-aaa-domain-example.com] quit<br>[Switch-aaa] quit<br><br># 测试用户是否能够通过RADIUS模板的认证。（已在RADIUS服务器上配置了测试用户test，用户密码YsHsjx_2022061）<br>[Switch] test-aaa test YsHsjx_2022061 radius-template rd1<br>Info: Account test succeeded.<br><br>2.配置802.1X认证。<br># 将NAC配置模式切换成统一模式。<br># 注意：设备默认为统一模式。传统模式与统一模式相互切换后，设备会自动重启。<br>[Switch] authentication unified-mode<br><br># 配置802.1X接入模板“d1”。<br>[Switch] dot1x-access-profile name d1<br>[Switch-dot1x-access-profile-d1] dot1x authentication-method eap<br>[Switch-dot1x-access-profile-d1] dot1x timer client-timeout 30<br>[Switch-dot1x-access-profile-d1] quit<br><br># 注意：802.1X接入模板默认采用EAP中继认证方式。请确保RADIUS服务器支持EAP协议，否则无法处理802.1X认证请求。<br><br># 配置认证模板“p1”，并在其上绑定802.1X接入模板“d1”、指定认证模板下用户的强制认证域为“example.com”。<br>[Switch] authentication-profile name p1<br>[Switch-authen-profile-p1] dot1x-access-profile d1<br>[Switch-authen-profile-p1] access-domain example.com force<br>[Switch-authen-profile-p1] quit<br><br># 在接口GE1/0/2-GE1/0/n上绑定认证模板“p1”，使能802.1X认证。以接口GE1/0/2为例，其他接口配置与其类似。<br>[Switch] interface gigabitethernet 1/0/2<br>[Switch-GigabitEthernet1/0/2] authentication-profile p1<br>[Switch-GigabitEthernet1/0/2] quit<br><br>3.验证配置结果。<br>用户在终端上启动802.1X客户端，输入用户名和密码，开始认证。<br>如果用户输入的用户名和密码验证正确，客户端页面会显示认证成功信息。用户即可访问网络。<br>用户上线后，管理员可在设备上执行命令display access-user access-type dot1x查看在线802.1X用户信息。<br></code></pre></td></tr></table></figure><h3 id="2-第二种————在汇聚层配置"><a href="#2-第二种————在汇聚层配置" class="headerlink" title="(2)第二种————在汇聚层配置"></a>(2)第二种————在汇聚层配置</h3><p><img src="/img/802.1X%E6%B1%87%E8%81%9A%E5%B1%82.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs CLI">1.配置SwitchB。<br># 配置802.1X报文透传功能。<br># 下行接口（与用户连接的口GE0/0/2-GE0/0/n）以接口GE0/0/2为例，其他下行接口配置与其类似。（这些连接口下的用户都会触发认证）<br><br>由于认证交换机SwitchA与用户之间存在二层交换机SwitchB，为保证用户能够通过802.1X认证，则务必在SwitchB上配置802.1X报文透传功能。<br><br>[SwitchB] l2protocol-tunnel user-defined-protocol 802.1X protocol-mac 0180-c200-0003 group-mac 0100-0000-0002<br>[SwitchB] interface gigabitethernet 0/0/2<br>[SwitchB-GigabitEthernet0/0/2] l2protocol-tunnel user-defined-protocol 802.1X enable<br>[SwitchB-GigabitEthernet0/0/2] quit<br>[SwitchB] interface gigabitethernet 0/0/1<br>[SwitchB-GigabitEthernet0/0/1] l2protocol-tunnel user-defined-protocol 802.1X enable<br>[SwitchB-GigabitEthernet0/0/1] quit<br><br>2.配置SwitchA。<br># 配置AAA。<br>#（1）创建并配置RADIUS服务器模板“rd1”。<br>[SwitchA] radius-server template rd1<br>[SwitchA-radius-rd1] radius-server authentication 192.168.1.30 1812<br>[SwitchA-radius-rd1] radius-server shared-key cipher YsHsjx_202206<br>[SwitchA-radius-rd1] quit<br><br>#（2）创建AAA认证方案“abc”并配置认证方式为RADIUS。<br>[SwitchA] aaa<br>[SwitchA-aaa] authentication-scheme abc<br>[SwitchA-aaa-authen-abc] authentication-mode radius<br>[SwitchA-aaa-authen-abc] quit<br><br>#（3）创建认证域“example.com”，并在其上绑定AAA认证方案“abc”与RADIUS服务器模板“rd1”。<br>[SwitchA-aaa] domain example.com<br>[SwitchA-aaa-domain-example.com] authentication-scheme abc<br>[SwitchA-aaa-domain-example.com] radius-server rd1<br>[SwitchA-aaa-domain-example.com] quit<br>[SwitchA-aaa] quit<br><br>#（4）测试用户是否能够通过RADIUS模板的认证。（已在RADIUS服务器上配置了测试用户test，用户密码YsHsjx_2022061）<br>[SwitchA] test-aaa test YsHsjx_2022061 radius-template rd1<br>Info: Account test succeeded.<br><br># 配置802.1X认证。<br><br>#(1) 将NAC配置模式切换成统一模式。<br>#注意：设备默认为统一模式。传统模式与统一模式相互切换后，设备会自动重启。<br>[SwitchA] authentication unified-mode<br><br>#(2) 配置802.1X接入模板“d1”。<br>#注意：802.1X接入模板默认采用EAP认证方式。请确保RADIUS服务器支持EAP协议，否则无法处理802.1X认证请求。<br>[SwitchA] dot1x-access-profile name d1<br>[SwitchA-dot1x-access-profile-d1] dot1x authentication-method eap<br>[SwitchA-dot1x-access-profile-d1] dot1x timer client-timeout 30<br>[SwitchA-dot1x-access-profile-d1] quit<br><br>#(3) 配置认证模板“p1”，并在其上绑定802.1X接入模板“d1”、指定认证模板下用户的强制认证域为“example.com”、指定用户接入模式为多用户单独认证接入模式、最大接入用户数为100。<br>[SwitchA] authentication-profile name p1<br>[SwitchA-authen-profile-p1] dot1x-access-profile d1<br>[SwitchA-authen-profile-p1] access-domain example.com force<br>[SwitchA-authen-profile-p1] authentication mode multi-authen max-user 100<br>[SwitchA-authen-profile-p1] quit<br><br># (4) 在接口GE1/0/2上绑定认证模板“p1”，使能802.1X认证。<br>[SwitchA] interface gigabitethernet 1/0/2<br>[SwitchA-GigabitEthernet1/0/2] authentication-profile p1<br>[SwitchA-GigabitEthernet1/0/2] quit<br><br>验证配置结果。<br>用户在终端上启动802.1X客户端，输入用户名和密码，开始认证。<br>如果用户输入的用户名和密码验证正确，客户端页面会显示认证成功信息。用户即可访问网络。<br>用户上线后，管理员可在设备上执行命令display access-user 查看用户在线情况<br></code></pre></td></tr></table></figure><h2 id="3-其他查看用户在线情况命令："><a href="#3-其他查看用户在线情况命令：" class="headerlink" title="3.其他查看用户在线情况命令："></a>3.其他查看用户在线情况命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CLI"># 查看指定接口上的802.1X统计信息<br>display dot1x statistics interface interface-type interface-number<br># 查看某接口的在线用户情况<br>display access-user [interface interface-type interface-number]<br></code></pre></td></tr></table></figure><h2 id="4-最后"><a href="#4-最后" class="headerlink" title="4.最后"></a>4.最后</h2><p>​注意配置的交换机型号与类型，如果是CE交换机，配置命令会有不同，请转至</p><p>华为官网文档：<a href="https://support.huawei.com/enterprise/zh/doc/index.html">https://support.huawei.com/enterprise/zh/doc/index.html</a></p><p>查看参考。</p>]]></content>
    
    
    <categories>
      
      <category>网络工程师</category>
      
      <category>交换机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snmp_服务端配置</title>
    <link href="/2025/01/06/snmp-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/06/snmp-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-snmp是什么？"><a href="#1-snmp是什么？" class="headerlink" title="1.snmp是什么？"></a>1.snmp是什么？</h2><p>​<strong>SNMP</strong>（Simple Network Management Protocol，简单网络管理协议）是一种广泛使用的网络管理协议，用于监控和管理网络设备，如服务器、路由器、交换机、打印机等。它允许网络管理员从中央位置监控网络性能，发现和解决网络问题。</p><h3 id="2-配置snmp服务端"><a href="#2-配置snmp服务端" class="headerlink" title="2.配置snmp服务端"></a>2.配置snmp服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#  以下操作仅为示例操作，详细操作请按实际情况而定</span><br><br><span class="hljs-comment"># 1.编辑snmp配置文件</span><br>vim /etc/snmpd.conf<br><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># community 中是对应 sec.name 的连接密码</span><br><span class="hljs-comment"># SNMP 中 连接密码被称为 community sec.name 类似于用户名</span><br>将 <br>   com2sec notConfigUser default public <br>修改为<br>   com2sec notConfigUser default monitor<br><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># groupName &lt;---&gt; securityName</span><br><span class="hljs-comment"># 组名      &lt;---&gt; 上面设置的用户名</span><br><span class="hljs-comment"># 可指定每个group 使用SNMP协议版本</span><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># group  &lt;---&gt; read write notif</span><br><span class="hljs-comment"># 上面的group &lt;--&gt; 读/写/通知(SNMP trap)使用的上面的view设置</span><br>将第62行的<br>   access  notConfigGroup <span class="hljs-string">&quot;&quot;</span> any noauth exact systemview none none<br>修改为<br>   access  notConfigGroup <span class="hljs-string">&quot;&quot;</span> any noauth exact all none none<br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># view SNMP 中OID设定</span><br><span class="hljs-comment"># name = 此视图名</span><br><span class="hljs-comment"># include/exclude 包括/排除之后的OID地址</span><br><span class="hljs-comment"># subtree=OID地址(.0 表示所有的OID)</span><br>将第85行的<br><span class="hljs-comment">#view all    included  .1       80</span><br>去掉注释 <br><br>2.重启SNMP服务<br>systemctl restart snmppd.service<br><br>3.添加为开机自启<br>systemctl <span class="hljs-built_in">enable</span> snmpd.service<br><br>4.验证snmp是否可以获取到值<br>snmpwalk -v 2c -c monitor [设备IP]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防火墙端口管理</title>
    <link href="/2025/01/06/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <url>/2025/01/06/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>​防火墙端口管理在操作中经常会用到，但是在实际布置生产环境或者一些带单向网闸一系列设备时，我们需要关闭的端口就会很多，这时再去一个个关闭，很显然就非常麻烦了，所以运维经常使用自动化脚本去进行管理。</p><p>以下脚本可直接使用（不能运行时，请修改对应的系统指令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><br><span class="hljs-comment"># 获取用户输入的要关闭的端口列表</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;指定区间格式为： 1000:2000 ===&gt; 将丢弃1000到2000所有端口的tcp数据包&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入要关闭的端口列表，用空格分隔：&quot;</span><br><span class="hljs-built_in">read</span> -a ports_to_close<br><br><span class="hljs-comment"># 获取用户输入的要允许的端口列表</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;指定区间格式为： 1000:2000 ===&gt; 将允许1000到2000所有端口的tcp数据包&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入要允许的端口列表，用空格分隔：&quot;</span><br><span class="hljs-built_in">read</span> -a ports_to_allow<br><br><span class="hljs-comment"># 备份iptables配置</span><br>iptables-save &gt; /path/to/iptables_backup.txt<br><br><span class="hljs-comment"># 加载iptables规则</span><br>iptables -F<br>iptables -X<br>iptables -Z<br><br><span class="hljs-comment"># 允许流量通过的端口</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ports_to_allow[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    iptables -A INPUT -p tcp --dport <span class="hljs-variable">$port</span> -j ACCEPT<br>    iptables -A OUTPUT -p tcp --sport <span class="hljs-variable">$port</span> -j ACCEPT<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 关闭的端口</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ports_to_close[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    iptables -A INPUT -p tcp --dport <span class="hljs-variable">$port</span> -j DROP<br>    iptables -A OUTPUT -p tcp --sport <span class="hljs-variable">$port</span> -j DROP<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 保存iptables规则（redhat系统）</span><br>service iptables save<br><span class="hljs-comment"># 或 iptables-save &gt; /etc/sysconfig/iptables</span><br><br><span class="hljs-comment"># （debian系统）</span><br><span class="hljs-comment"># sudo sh -c &quot;iptables-save &gt; /etc/iptables/rules.v4&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;防火墙端口已更新。&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禁止root账户远程连接</title>
    <link href="/2025/01/06/%E7%A6%81%E6%AD%A2root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <url>/2025/01/06/%E7%A6%81%E6%AD%A2root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p> 在我们实际运维中，经常出于安全考虑禁止root账户远程连接，以下bash脚本可直接使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 备份文件</span><br><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak<br><br><span class="hljs-comment"># 修改SSH配置文件</span><br>sed -i <span class="hljs-string">&#x27;s/PermitRootLogin yes/</span><br><span class="hljs-string">PermitRootLogin no/g&#x27;</span> /etc/ssh/sshd_config<br><br><span class="hljs-comment"># 重启SSH服务</span><br>systemctl restart sshd<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Root 账户远程连接已禁止&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置NFS(服务端与客户端)</title>
    <link href="/2025/01/06/%E9%85%8D%E7%BD%AENFS-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <url>/2025/01/06/%E9%85%8D%E7%BD%AENFS-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><p>安装nfs包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install nfs-utils -y<br></code></pre></td></tr></table></figure><p>启动nfs服务，并设置为开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nfs-server.service<br>systemctl <span class="hljs-built_in">enable</span> nfs-server.service<br></code></pre></td></tr></table></figure><p>选择磁盘作为nfs共享分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk 查看硬盘名<br>fdisk /硬盘名<br><br>第一个为 n<br><br>第二个为 p，然后全部默认后<br><br>第三个为w<br><br>退出<br></code></pre></td></tr></table></figure><p>对硬盘分区格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/分区名<br></code></pre></td></tr></table></figure><p>创建一个挂载nfs目录并挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /nfs<br>mount /dev/分区名<br></code></pre></td></tr></table></figure><p>查看是否挂载成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p>配置共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/exports<br></code></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/nfs 客户端ip/24(掩码号)(rw,no_root_squash)(有很多参数，可以百度看看)<br></code></pre></td></tr></table></figure><p>重启nfs服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart nfs-server.service<br></code></pre></td></tr></table></figure><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><p><strong>此脚本可直接复制执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 设置nfs服务并设置为开机自启动</span><br>systemctl start nfs-server.service<br>systemctl <span class="hljs-built_in">enable</span> nfs.server.service<br><br><span class="hljs-comment"># 创建一个挂载目录</span><br><span class="hljs-built_in">mkdir</span> /nfs01<br>mount -t nfs 服务端ip:/nfs /nfs01<br><span class="hljs-comment"># 查看是否挂载完成</span><br>ds -Th<br><span class="hljs-comment"># 如果不通则关闭防火墙</span><br>systemctl stop firewalld<br>firewall-cmd --state<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multipaths配置多路径</title>
    <link href="/2025/01/05/multipaths%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B7%AF%E5%BE%84/"/>
    <url>/2025/01/05/multipaths%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是多路径？"><a href="#一、什么是多路径？" class="headerlink" title="一、什么是多路径？"></a>一、什么是多路径？</h3><p>​**多路径（Multipath）**通常指的是数据在网络或存储系统中从源到目的地之间存在多个可能的传输路径。这个概念可以应用于不同的技术领域，但最常见的是在计算机网络和存储区域网络（SAN, Storage Area Network）中。</p><ol><li><strong>计算机网络中的多路径</strong>： 在计算机网络中，多路径路由允许数据包通过多个不同路径到达目的地。这可以通过动态路由协议来实现，这些协议能够根据当前网络状况选择最佳路径。多路径路由可以提高网络的可靠性和性能，因为它可以在一条路径失败时自动切换到另一条路径，并且可以通过负载均衡来优化带宽使用。</li><li><strong>存储系统中的多路径</strong>： 在存储系统中，特别是对于SAN环境，多路径是指服务器和存储设备之间的多个连接路径。它提供了冗余，以防止单点故障导致的数据访问中断。例如，如果一个HBA（主机总线适配器）、交换机端口或电缆发生故障，数据仍然可以通过其他路径进行访问。此外，多路径软件还可以提供负载均衡功能，将I&#x2F;O请求分散到多个可用路径上，从而提高性能。</li></ol><h3 id="二、多路径该如何配置？"><a href="#二、多路径该如何配置？" class="headerlink" title="二、多路径该如何配置？"></a>二、多路径该如何配置？</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment"># 1.安装程序</span><br>yum install device-mapper-multipath -y<br><br><span class="hljs-comment"># 2.将多路径软件添加至内核模块中</span><br>modprobe dm-multipath<br>modprode dm-round-robin<br><br><span class="hljs-comment"># 3.检查内核添加情况</span><br>lsmod | grep multipath<br>显示如下类似即可：<br><span class="hljs-comment"># dm_multipath           27427  3 dm_round_robin,dm_service_time</span><br><span class="hljs-comment"># dm_mod                123303  13 dm_round_robin,dm_multipath,dm_log,dm_mirror,dm_service_time</span><br><br><span class="hljs-comment"># 4.启动服务</span><br>systemctl enable multipathd --now<br><br><span class="hljs-comment"># 5.备份并编辑配置文件</span><br><span class="hljs-comment"># 先查看存储设备的WWID（以下两条命令均可）</span><br>sudo udevadm info --query=all --name=<span class="hljs-regexp">/dev/</span>sdX | grep ID_SERIAL<br>multipath -ll<br><br>cp <span class="hljs-regexp">/etc/mu</span>ltipath.conf <span class="hljs-regexp">/etc/mu</span>ltipath.conf.bak<br>vim <span class="hljs-regexp">/etc/mu</span>ltipath.conf<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">blacklist &#123;</span><br><span class="hljs-string">        wwid    3600508b1001c044c39717726236c68d5</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">defaults &#123;</span><br><span class="hljs-string">    user_friendly_names       yes</span><br><span class="hljs-string">    polling_interval            10</span><br><span class="hljs-string">    queue_without_daemon    no</span><br><span class="hljs-string">    flush_on_last_del          yes</span><br><span class="hljs-string">    checker_timeout 120</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">devices &#123;</span><br><span class="hljs-string">    device &#123;</span><br><span class="hljs-string">        vendor                 &quot;3par8400&quot;</span><br><span class="hljs-string">        product                &quot;HP&quot;</span><br><span class="hljs-string">        path_grouping_policy    asmdisk</span><br><span class="hljs-string">        no_path_retry           30</span><br><span class="hljs-string">        prio                    hp_sw</span><br><span class="hljs-string">        path_checker            tur</span><br><span class="hljs-string">        path_selector           &quot;round-robin 0&quot;</span><br><span class="hljs-string">        hardware_handler       &quot;0&quot;</span><br><span class="hljs-string">        failback                15</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 多路径设备信息</span><br><span class="hljs-string">multipaths &#123;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">           wwid    360002ac0000000000000000300023867</span><br><span class="hljs-string">           alias    mpathdisk01</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">如果有两个或者多个就再加一条即可。</span><br><span class="hljs-string">multipaths &#123;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string">           # 多路径设备的wwid放在这里</span><br><span class="hljs-string">           wwid    360002ac0000000000000000300023867</span><br><span class="hljs-string">           # 设置多路径设备的别名</span><br><span class="hljs-string">           # 例如：mpathdisk01</span><br><span class="hljs-string">           alias    mpathdisk01</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string">           wwid    360002ac0000000000000000400023867</span><br><span class="hljs-string">           alias    mpathdisk02</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 6.重启服务</span><br>systemctl restart multipathd<br><br><span class="hljs-comment"># 7.查看是否成功</span><br>lsblk<br><span class="hljs-comment">#结果类似</span><br>[root@test ~]<span class="hljs-comment"># lsblk</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">NAME            MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT</span><br><span class="hljs-string">sda               8:0    0   557G  0 disk</span><br><span class="hljs-string">├─sda1            8:1    0     4G  0 part  /boot</span><br><span class="hljs-string">└─sda2            8:2    0   553G  0 part</span><br><span class="hljs-string">  ├─centos-root 253:0    0 488.9G  0 lvm   /</span><br><span class="hljs-string">  └─centos-swap 253:1    0    64G  0 lvm   [SWAP]</span><br><span class="hljs-string">sdb               8:16   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sdc               8:32   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sdd               8:48   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sde               8:64   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 查看状态</span><br>multipath -d -l<br><br><span class="hljs-comment"># 配置文件解析</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">blacklist：定义了一些被禁用的设备，只要 WWID 匹配了列表中的任何一个，它就会被黑名单所拒绝。</span><br><span class="hljs-string">wwid：唯一标识多路径设备的 32 位十六进制字符串。</span><br><span class="hljs-string">defaults：定义了一些默认设置，这些设置可以在其他部分被重写。</span><br><span class="hljs-string">user_friendly_names：使多路径设备更易于理解和使用。</span><br><span class="hljs-string">polling_interval：检查路径状态的频率（以秒为单位）。</span><br><span class="hljs-string">queue_without_daemon：定义了当 multipathd 守护程序处于未运行状态时处理 I/O 请求的行为。</span><br><span class="hljs-string">flush_on_last_del：在删除最后一个路径时是否刷新 IO 缓存。</span><br><span class="hljs-string">checker_timeout：指定检查器超时的时间。</span><br><span class="hljs-string">devices：包含一个或多个</span><br><span class="hljs-string">device 块，每个块都描述了一个特定的多路径设备。</span><br><span class="hljs-string">device：描述了一个多路径设备及其属性。</span><br><span class="hljs-string">vendor、product：设备的制造商和产品名称。</span><br><span class="hljs-string">path_grouping_policy：指定将路径分组到哪个组中。</span><br><span class="hljs-string">no_path_retry：当无法访问某个路径时进行重试的次数。</span><br><span class="hljs-string">prio：指定优先级算法，如 alua、emc、hp_sw 等。</span><br><span class="hljs-string">path_checker：指定 IO 路径检查器的类型。</span><br><span class="hljs-string">path_selector：指定选择路径的算法。例如，“round-robin 0” 表示依次将请求分发到每个路径上。</span><br><span class="hljs-string">hardware_handler：指定用于处理硬件错误的脚本或程序。</span><br><span class="hljs-string">failback：指定多长时间后进行故障切换。</span><br><span class="hljs-string">multipaths：包含一个或多个</span><br><span class="hljs-string">multipath 块，每个块都描述了一个设备的多个路径。</span><br><span class="hljs-string">alias：为指定的多路径设备定义别名。</span><br><span class="hljs-string"></span><br><span class="hljs-string">prio 是 multipath.conf 配置文件中的一个关键字，表示优先级算法。它可以指定多路径设备使用哪种算法来选择 I/O 请求路径。例如：</span><br><span class="hljs-string"></span><br><span class="hljs-string">prio alua</span><br><span class="hljs-string"></span><br><span class="hljs-string">以上配置指定了使用 Asymmetric Logical Unit Access(ALUA) 算法进行路径选择。这个算法主要用于 SAN 存储环境下，能够更好地处理存储阵列并发访问的问题。</span><br><span class="hljs-string">除了 ALUA，还有其他一些可用的优先级算法，如：</span><br><span class="hljs-string">emc：用于与 EMC 存储阵列配合使用。</span><br><span class="hljs-string">hp_sw：用于与 HP 存储阵列配合使用。</span><br><span class="hljs-string">rdac：用于与 LSI 存储阵列配合使用。</span><br><span class="hljs-string">如果没有指定 prio 设置，则默认为 const（优先选择第一个路径）算法，或者是上层应用程序自己控制路径选择。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo_常用指令</title>
    <link href="/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo是一个对新手很友好，并且可扩展能力强的静态网站生成框架</p><h4 id="1-创建一个空文档（只有空文档才能部署Hexo项目）"><a href="#1-创建一个空文档（只有空文档才能部署Hexo项目）" class="headerlink" title="1.创建一个空文档（只有空文档才能部署Hexo项目）"></a>1.创建一个空文档（只有空文档才能部署Hexo项目）</h4><h4 id="2-提前安装好Node-js、Git"><a href="#2-提前安装好Node-js、Git" class="headerlink" title="2.提前安装好Node.js、Git"></a>2.提前安装好Node.js、Git</h4><p>Hexo是基于Node.js的框架，部署时需要用到git进行部署（版本使用最新的即可）</p><h4 id="3-在空文档下打开cmd，然后依次输入以下命令"><a href="#3-在空文档下打开cmd，然后依次输入以下命令" class="headerlink" title="3.在空文档下打开cmd，然后依次输入以下命令"></a>3.在空文档下打开cmd，然后依次输入以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br></code></pre></td></tr></table></figure><p>此时，就已经完成了一个基础的hexo项目。</p><h4 id="4、部署到-GitHub-Pages"><a href="#4、部署到-GitHub-Pages" class="headerlink" title="4、部署到 GitHub Pages"></a>4、部署到 GitHub Pages</h4><p>创建GitHub仓库<br>在GitHub新建仓库，仓库名为用户名.github.io,这里的用户名替换为自己GitHub的用户名</p><p>比如我的用户名是bote798，新建的仓库名就是bote798.github.io</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89.png"></p><p>创建时选择 public 将仓库公开，推荐勾选 Add a REAMD file 为仓库创建描述文件</p><p><strong>配置SSH密钥连接GitHub</strong><br>由于21年GitHub 取消了对密码身份验证的支持，所以需要使用 GitHub 的个人访问令牌来代替密码，但每次上传都需要输入一次用户名和 token 显然比较麻烦，安全性也较低，配置 ssh 后就可以更加方便的上传文件</p><p>打开C盘，进入 Users 文件夹，接着打开电脑用户名文件夹，寻找是否有.ssh文件夹，如果有的话需删除掉，没有就继续进行下面的步骤</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89.png"></p><p>在该文件夹下右键打开Git Bash，输入以下命令生成ssh密钥，中途需按下三次回车键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;github绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>成功后在该目录下生成了.ssh文件夹，用记事本打开.ssh文件夹下的id_rsa.pub文件，复制里面的内容</p><p>在GitHub设置中点击SSH and GPG keys选项，点击New SSH key</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89.png"></p><p>出现以下界面</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%884%EF%BC%89.png"></p><p>填写 Title项 为 hexo，将复制的内容粘贴到 Key 文本框中，点击 Add SSH key 后需要输入一次 GitHub 密码，即可添加成功</p><p>再次打开Git Bush,输入以下命令验证是否能连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果询问是否继续连接，输入yes即可，如下图出现successfully即为连接成功</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%885%EF%BC%89.png"></p><p>最后，配置用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Github上的username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>到这里已经成功配置好了 ssh 连接，可以将本地博客部署到 GitHub 了·</p><p>在刚刚创建的博客文件夹下再次打开 git bush，安装 hexo-deployer-git 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>打开**_config.yml**文件，更改最后面的 <strong>deploy</strong> 内容，用户名替换为自己的 github 用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repository: https://github.com/用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h4 id="基础命令："><a href="#基础命令：" class="headerlink" title="基础命令："></a>基础命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br>hexo g<span class="hljs-comment"># 生成静态文件</span><br>hexo d<span class="hljs-comment"># 上传到GitHub</span><br><span class="hljs-comment"># 删除文章只需要将source中的markdown文件删掉，然后执行 hexo g 即可</span><br></code></pre></td></tr></table></figure><p>主题可选：<a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>点击后进入其GitHub仓库查看对应指引更换主题</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装vim插件(coc.nvim代码补全)</title>
    <link href="/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <url>/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装vim插件（coc-nvim代码补全）"><a href="#安装vim插件（coc-nvim代码补全）" class="headerlink" title="安装vim插件（coc.nvim代码补全）"></a>安装vim插件（coc.nvim代码补全）</h2><ol><li><p>安装node.js和npm(版本最好高一点)</p><p>最好再找个安装教程看一下环境变量配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install nodejs<br><span class="hljs-built_in">sudo</span> apt install npm<br><span class="hljs-comment"># 设置一下环境变量</span><br>curl -sL install-node.now.sh/lts | bash<br></code></pre></td></tr></table></figure></li><li><p>安装vim－plug（插件管理器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \<br>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<br><br><span class="hljs-built_in">mkdir</span> -p  ~/.vim/autoload/<br><span class="hljs-built_in">cp</span> plug.vim  ~/.vim/autoload/plug.vim<br></code></pre></td></tr></table></figure></li><li><p>.vimrc文件有的系统有，有的没有，没有就自己建一个。这是系统的vim配置文件，home中的是用户的vim配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.vimrc<br></code></pre></td></tr></table></figure><p>将这些复制到vimrc中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">call plug#begin()<br><span class="hljs-string">&quot; The default plugin directory will be as follows:</span><br><span class="hljs-string">&quot;</span>   - Vim (Linux/macOS): <span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span><br><span class="hljs-string">&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;</span><br><span class="hljs-string">&quot;</span>   - Neovim (Linux/macOS/Windows): stdpath(<span class="hljs-string">&#x27;data&#x27;</span>) . <span class="hljs-string">&#x27;/plugged&#x27;</span><br><span class="hljs-string">&quot; You can specify a custom plugin directory by passing it as the argument</span><br><span class="hljs-string">&quot;</span>   - e.g. `call plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)`<br><span class="hljs-string">&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;</span><br><span class="hljs-string">&quot;</span> Make sure you use single quotes<br> <br><span class="hljs-string">&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span><br><span class="hljs-string">Plug &#x27;junegunn/vim-easy-align&#x27;</span><br><span class="hljs-string">&quot;</span> Any valid git URL is allowed<br>Plug <span class="hljs-string">&#x27;https://github.com/junegunn/vim-github-dashboard.git&#x27;</span><br> <br><span class="hljs-string">&quot; Multiple Plug commands can be written in a single line using | separators</span><br><span class="hljs-string">Plug &#x27;SirVer/ultisnips&#x27; | Plug &#x27;honza/vim-snippets&#x27;</span><br><span class="hljs-string">&quot;</span> On-demand loading<br>Plug <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="hljs-string">&#x27;on&#x27;</span>:  <span class="hljs-string">&#x27;NERDTreeToggle&#x27;</span> &#125;<br>Plug <span class="hljs-string">&#x27;tpope/vim-fireplace&#x27;</span>, &#123; <span class="hljs-string">&#x27;for&#x27;</span>: <span class="hljs-string">&#x27;clojure&#x27;</span> &#125;<br> <br><span class="hljs-string">&quot; Using a non-default branch</span><br><span class="hljs-string">Plug &#x27;rdnetto/YCM-Generator&#x27;, &#123; &#x27;branch&#x27;: &#x27;stable&#x27; &#125;</span><br><span class="hljs-string">&quot;</span> Using a tagged release; wildcard allowed (requires git 1.9.2 or above)<br>Plug <span class="hljs-string">&#x27;fatih/vim-go&#x27;</span>, &#123; <span class="hljs-string">&#x27;tag&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span> &#125;<br> <br><span class="hljs-string">&quot; Plugin options</span><br><span class="hljs-string">Plug &#x27;nsf/gocode&#x27;, &#123; &#x27;tag&#x27;: &#x27;v.20150303&#x27;, &#x27;rtp&#x27;: &#x27;vim&#x27; &#125;</span><br><span class="hljs-string">&quot;</span> Plugin outside ~/.vim/plugged with post-update hook<br>Plug <span class="hljs-string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="hljs-string">&#x27;dir&#x27;</span>: <span class="hljs-string">&#x27;~/.fzf&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;./install --all&#x27;</span> &#125;<br> <br><span class="hljs-string">&quot; Unmanaged plugin (manually installed and updated)</span><br><span class="hljs-string">Plug &#x27;~/my-prototype-plugin&#x27;</span><br><span class="hljs-string">&quot;</span> Initialize plugin system<br><span class="hljs-string">&quot; - Automatically executes `filetype plugin indent on` and `syntax enable`.</span><br><span class="hljs-string">call plug#end()</span><br><span class="hljs-string">&quot;</span> You can revert the settings after the call like so:<br><span class="hljs-string">&quot;   filetype indent off   &quot;</span> Disable file-type-specific indentation<br><span class="hljs-string">&quot;   syntax off            &quot;</span> Disable syntax highlighting<br></code></pre></td></tr></table></figure></li><li><p>每一次在.vimrc文件中加入插件配置后，保存退出执行插件安装命令 PlugInstall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载插件                             :PlugInstall<br><br>下载新的插件                在call plug#begin()和call plug#end()之间添加一下新的插件<br><br>安装特定插件                          :PlugInstall gist-vim<br><br>卸载插件                             :PlugClean<br><br>更新vim-plug                        :PlugUpgrade<br><br>更新所有已经安装的插件         :PlugUpdate<br><br>查看插件状态                         :PlugStatus<br></code></pre></td></tr></table></figure></li><li><p>加入coc.nvim配置，执行安装命令，在nvim中执行检查命令检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在Plug#begin() 和 Plug#end()中间加这个</span><br>Plug <span class="hljs-string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="hljs-string">&#x27;branch&#x27;</span>: <span class="hljs-string">&#x27;release&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置python补全servers</p><p>相关网址: <a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers#python">Language servers · neoclide&#x2F;coc.nvim Wiki · GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install <span class="hljs-string">&#x27;python-language-server[all]&#x27;</span><br>vim ~/.vimrc<br>:CocInstall coc-pyright<br></code></pre></td></tr></table></figure><p><strong>记得安装一下cmake吧，之后安装总用</strong></p><p>退回主目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install cmake<br><span class="hljs-built_in">sudo</span> apt-get install cmake-qt-gui<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
