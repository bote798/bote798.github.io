<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux端口管理</title>
    <link href="/2025/05/20/Linux%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <url>/2025/05/20/Linux%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="一、查看已占用端口"><a href="#一、查看已占用端口" class="headerlink" title="一、查看已占用端口"></a>一、查看已占用端口</h3><h4 id="1-ss-命令（推荐）"><a href="#1-ss-命令（推荐）" class="headerlink" title="1. ss 命令（推荐）"></a>1. <strong><code>ss</code> 命令（推荐）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -tulnp<br></code></pre></td></tr></table></figure><ul><li><p><strong>参数解析</strong>：</p><ul><li><code>-t</code>：显示 TCP 端口</li><li><code>-u</code>：显示 UDP 端口</li><li><code>-l</code>：仅显示监听（LISTEN）状态的端口</li><li><code>-n</code>：以数字形式显示端口（不解析服务名称）</li><li><code>-p</code>：显示占用端口的进程信息（需要 root 权限）</li></ul><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Netid State  Recv-Q Send-Q Local Address:Port  Peer Address:Port Process<br>tcp   LISTEN 0      128          0.0.0.0:22          0.0.0.0:*     <span class="hljs-built_in">users</span>:((&quot;sshd&quot;,pid=<span class="hljs-number">1234</span>,fd=<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="2-netstat-命令（传统工具）"><a href="#2-netstat-命令（传统工具）" class="headerlink" title="2. netstat 命令（传统工具）"></a>2. <strong><code>netstat</code> 命令（传统工具）</strong></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -tulnp</span><br></code></pre></td></tr></table></figure><ul><li><strong>参数解析</strong>：<ul><li><code>-t</code>&#x2F;<code>-u</code>：TCP&#x2F;UDP 协议</li><li><code>-l</code>：监听端口</li><li><code>-n</code>：禁用域名解析</li><li><code>-p</code>：显示进程信息</li></ul></li><li><strong>注意</strong>：新版本 Linux 中 <code>netstat</code> 可能被弃用，建议优先使用 <code>ss</code>。</li></ul><hr><h4 id="3-lsof-命令（查看进程与端口的关联）"><a href="#3-lsof-命令（查看进程与端口的关联）" class="headerlink" title="3. lsof 命令（查看进程与端口的关联）"></a>3. <strong><code>lsof</code> 命令（查看进程与端口的关联）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof -i :80          <span class="hljs-comment"># 查看 80 端口占用情况</span><br>lsof -i tcp          <span class="hljs-comment"># 查看所有 TCP 端口</span><br></code></pre></td></tr></table></figure><ul><li><strong>输出关键列</strong>：<ul><li><code>COMMAND</code>：进程名称</li><li><code>PID</code>：进程 ID</li><li><code>USER</code>：运行用户</li><li><code>NODE</code>：协议类型</li><li><code>NAME</code>：地址和端口</li></ul></li></ul><hr><h3 id="二、检查端口开放状态"><a href="#二、检查端口开放状态" class="headerlink" title="二、检查端口开放状态"></a>二、检查端口开放状态</h3><h4 id="1-本地端口是否开放"><a href="#1-本地端口是否开放" class="headerlink" title="1. 本地端口是否开放"></a>1. <strong>本地端口是否开放</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -p 22 localhost   <span class="hljs-comment"># 扫描本机 22 端口</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>输出示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">PORT   STATE SERVICE<br>22/tcp open  ssh<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-远程主机端口扫描"><a href="#2-远程主机端口扫描" class="headerlink" title="2. 远程主机端口扫描"></a>2. <strong>远程主机端口扫描</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -p 80,443 example.com      <span class="hljs-comment"># 扫描指定端口的开放状态</span><br></code></pre></td></tr></table></figure><hr><h3 id="三、过滤特定端口信息"><a href="#三、过滤特定端口信息" class="headerlink" title="三、过滤特定端口信息"></a>三、过滤特定端口信息</h3><h4 id="1-使用-grep-过滤"><a href="#1-使用-grep-过滤" class="headerlink" title="1. 使用 grep 过滤"></a>1. 使用 <code>grep</code> 过滤</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -tulnp | grep <span class="hljs-string">&#x27;:80&#x27;</span>          <span class="hljs-comment"># 查找 80 端口</span><br></code></pre></td></tr></table></figure><h4 id="2-查看-TCP-连接状态"><a href="#2-查看-TCP-连接状态" class="headerlink" title="2. 查看 TCP 连接状态"></a>2. 查看 TCP 连接状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -t -a                        <span class="hljs-comment"># 显示所有 TCP 连接（包括 ESTABLISHED）</span><br></code></pre></td></tr></table></figure><hr><h3 id="四、端口与服务的映射关系"><a href="#四、端口与服务的映射关系" class="headerlink" title="四、端口与服务的映射关系"></a>四、端口与服务的映射关系</h3><h4 id="查看-etc-services-文件"><a href="#查看-etc-services-文件" class="headerlink" title="查看 /etc/services 文件"></a>查看 <code>/etc/services</code> 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&#x27;80/tcp&#x27;</span> /etc/services      <span class="hljs-comment"># 查看 80 端口对应的服务名称</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>输出</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http    80/tcp     www    <span class="hljs-comment"># WorldWideWeb HTTP</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="五、命令对比速查表"><a href="#五、命令对比速查表" class="headerlink" title="五、命令对比速查表"></a>五、命令对比速查表</h3><table><thead><tr><th align="left">命令</th><th align="left">特点</th><th align="left">推荐场景</th></tr></thead><tbody><tr><td align="left"><code>ss</code></td><td align="left">速度快，信息详细</td><td align="left">日常端口检查</td></tr><tr><td align="left"><code>netstat</code></td><td align="left">传统工具，兼容性好</td><td align="left">旧系统兼容</td></tr><tr><td align="left"><code>lsof</code></td><td align="left">显示进程与文件的关联</td><td align="left">定位具体进程</td></tr><tr><td align="left"><code>nmap</code></td><td align="left">专业级端口扫描</td><td align="left">安全检测&#x2F;网络诊断</td></tr></tbody></table><hr><h3 id="六、常见问题排查"><a href="#六、常见问题排查" class="headerlink" title="六、常见问题排查"></a>六、常见问题排查</h3><h4 id="问题：端口显示-LISTEN-但无法访问"><a href="#问题：端口显示-LISTEN-但无法访问" class="headerlink" title="问题：端口显示 LISTEN 但无法访问"></a><strong>问题：端口显示 <code>LISTEN</code> 但无法访问</strong></h4><ol><li><p>检查防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw status              <span class="hljs-comment"># Ubuntu 防火墙状态</span><br>firewall-cmd --list-all <span class="hljs-comment"># CentOS 防火墙规则</span><br></code></pre></td></tr></table></figure></li><li><p>验证 SELinux 限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ausearch -m avc -ts recent  <span class="hljs-comment"># 查看 SELinux 拒绝日志</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>系统运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令速查</title>
    <link href="/2025/05/20/Linux%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
    <url>/2025/05/20/Linux%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux命令速查"><a href="#Linux命令速查" class="headerlink" title="[Linux命令速查]"></a>[Linux命令速查]</h1><h3 id="1、基本命令"><a href="#1、基本命令" class="headerlink" title="1、基本命令"></a>1、基本命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> uname -m 显示机器的处理器架构<br><span class="hljs-bullet">2.</span> uname -r 显示正在使用的内核版本<br><span class="hljs-bullet">3.</span> dmidecode -q 显示硬件系统部件<br><span class="hljs-bullet">4.</span> (SMBIOS / DMI) hdparm -i /dev/hda 罗列一个磁盘的架构特性<br><span class="hljs-bullet">5.</span> hdparm -tT /dev/sda 在磁盘上执行测试性读取操作系统信息<br><span class="hljs-bullet">6.</span> arch 显示机器的处理器架构<br><span class="hljs-bullet">7.</span> uname -m 显示机器的处理器架构<br><span class="hljs-bullet">8.</span> uname -r 显示正在使用的内核版本<br><span class="hljs-bullet">9.</span> dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br><span class="hljs-bullet">10.</span> hdparm -i /dev/hda 罗列一个磁盘的架构特性<br><span class="hljs-bullet">11.</span> hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br><span class="hljs-bullet">12.</span> cat /proc/cpuinfo 显示CPU info的信息<br><span class="hljs-bullet">13.</span> cat /proc/interrupts 显示中断<br><span class="hljs-bullet">14.</span> cat /proc/meminfo 校验内存使用<br><span class="hljs-bullet">15.</span> cat /proc/swaps 显示哪些swap被使用<br><span class="hljs-bullet">16.</span> cat /proc/version 显示内核的版本<br><span class="hljs-bullet">17.</span> cat /proc/net/dev 显示网络适配器及统计<br><span class="hljs-bullet">18.</span> cat /proc/mounts 显示已加载的文件系统<br><span class="hljs-bullet">19.</span> lspci -tv 罗列 PCI 设备<br><span class="hljs-bullet">20.</span> lsusb -tv 显示 USB 设备<br><span class="hljs-bullet">21.</span> date 显示系统日期<br><span class="hljs-bullet">22.</span> cal 2007 显示2007年的日历表<br><span class="hljs-bullet">23.</span> date 041217002007.00 设置日期和时间 - 月日时分年.秒<br><span class="hljs-bullet">24.</span> clock -w 将时间修改保存到 BIOS<br></code></pre></td></tr></table></figure><h3 id="2、关机"><a href="#2、关机" class="headerlink" title="2、关机"></a>2、关机</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> shutdown -h now 关闭系统(1)<br><span class="hljs-bullet">2.</span> init 0 关闭系统(2)<br><span class="hljs-bullet">3.</span> telinit 0 关闭系统(3)<br><span class="hljs-bullet">4.</span> shutdown -h hours:minutes &amp; 按预定时间关闭系统<br><span class="hljs-bullet">5.</span> shutdown -c 取消按预定时间关闭系统<br><span class="hljs-bullet">6.</span> shutdown -r now 重启(1)<br><span class="hljs-bullet">7.</span> reboot 重启(2)<br><span class="hljs-bullet">8.</span> logout 注销<br></code></pre></td></tr></table></figure><h3 id="3、文件和目录"><a href="#3、文件和目录" class="headerlink" title="3、文件和目录"></a>3、文件和目录</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> cd /home 进入 &#x27;/ home&#x27; 目录&#x27;<br><span class="hljs-bullet">2.</span> cd .. 返回上一级目录<br><span class="hljs-bullet">3.</span> cd ../.. 返回上两级目录<br><span class="hljs-bullet">4.</span> cd 进入个人的主目录<br><span class="hljs-bullet">5.</span> cd ~user1 进入个人的主目录<br><span class="hljs-bullet">6.</span> cd - 返回上次所在的目录<br><span class="hljs-bullet">7.</span> pwd 显示工作路径<br><span class="hljs-bullet">8.</span> ls 查看目录中的文件<br><span class="hljs-bullet">9.</span> ls -F 查看目录中的文件<br><span class="hljs-bullet">10.</span> ls -l 显示文件和目录的详细资料<br><span class="hljs-bullet">11.</span> ls -a 显示隐藏文件<br><span class="hljs-bullet">12.</span> ls <span class="hljs-emphasis">*[0-9]*</span> 显示包含数字的文件名和目录名<br><span class="hljs-bullet">13.</span> tree 显示文件和目录由根目录开始的树形结构(1)<br><span class="hljs-bullet">14.</span> lstree 显示文件和目录由根目录开始的树形结构(2)<br><span class="hljs-bullet">15.</span> mkdir dir1 创建一个叫做 &#x27;dir1&#x27; 的目录&#x27;<br><span class="hljs-bullet">16.</span> mkdir dir1 dir2 同时创建两个目录<br><span class="hljs-bullet">17.</span> mkdir -p /tmp/dir1/dir2 创建一个目录树<br><span class="hljs-bullet">18.</span> rm -f file1 删除一个叫做 &#x27;file1&#x27; 的文件&#x27;<br><span class="hljs-bullet">19.</span> rmdir dir1 删除一个叫做 &#x27;dir1&#x27; 的目录&#x27;<br><span class="hljs-bullet">20.</span> rm -rf dir1 删除一个叫做 &#x27;dir1&#x27; 的目录并同时删除其内容<br><span class="hljs-bullet">21.</span> rm -rf dir1 dir2 同时删除两个目录及它们的内容<br><span class="hljs-bullet">22.</span> mv dir1 new<span class="hljs-emphasis">_dir 重命名/移动 一个目录</span><br><span class="hljs-emphasis">23. cp file1 file2 复制一个文件</span><br><span class="hljs-emphasis">24. cp dir/* . 复制一个目录下的所有文件到当前工作目录</span><br><span class="hljs-emphasis">25. cp -a /tmp/dir1 . 复制一个目录到当前工作目录</span><br><span class="hljs-emphasis">26. cp -a dir1 dir2 复制一个目录</span><br><span class="hljs-emphasis">27. ln -s file1 lnk1 创建一个指向文件或目录的软链接</span><br><span class="hljs-emphasis">28. ln file1 lnk1 创建一个指向文件或目录的物理链接</span><br><span class="hljs-emphasis">29. touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</span><br><span class="hljs-emphasis">30. file file1 outputs the mime type of the file as text</span><br><span class="hljs-emphasis">31. iconv -l 列出已知的编码</span><br><span class="hljs-emphasis">32. iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.</span><br><span class="hljs-emphasis">33. find . -maxdepth 1 -name *.jpg -print -exec convert &quot;&#123;&#125;&quot; -resize 80x60 &quot;thumbs/&#123;&#125;&quot; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</span><br></code></pre></td></tr></table></figure><h3 id="4、文件搜索"><a href="#4、文件搜索" class="headerlink" title="4、文件搜索"></a>4、文件搜索</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> find / -name file1 从 &#x27;/&#x27; 开始进入根文件系统搜索文件和目录<br><span class="hljs-bullet">2.</span> find / -user user1 搜索属于用户 &#x27;user1&#x27; 的文件和目录<br><span class="hljs-bullet">3.</span> find /home/user1 -name \<span class="hljs-emphasis">*.bin 在目录 &#x27;/ home/user1&#x27; 中搜索带有&#x27;.bin&#x27; 结尾的文件</span><br><span class="hljs-emphasis">4. find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件</span><br><span class="hljs-emphasis">5. find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</span><br><span class="hljs-emphasis">6. find / -name \*</span>.rpm -exec chmod 755 &#x27;&#123;&#125;&#x27; \; 搜索以 &#x27;.rpm&#x27; 结尾的文件并定义其权限<br><span class="hljs-bullet">7.</span> find / -xdev -name \<span class="hljs-emphasis">*.rpm 搜索以 &#x27;.rpm&#x27; 结尾的文件，忽略光驱、捷盘等可移动设备</span><br><span class="hljs-emphasis">8. locate \*</span>.ps 寻找以 &#x27;.ps&#x27; 结尾的文件 - 先运行 &#x27;updatedb&#x27; 命令<br><span class="hljs-bullet">9.</span> whereis halt 显示一个二进制文件、源码或man的位置<br><span class="hljs-bullet">10.</span> which halt 显示一个二进制文件或可执行文件的完整路径<br></code></pre></td></tr></table></figure><h3 id="5、挂载一个文件系统"><a href="#5、挂载一个文件系统" class="headerlink" title="5、挂载一个文件系统"></a>5、挂载一个文件系统</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 &#x27;/ mnt/hda2&#x27; 已经存在<br><span class="hljs-bullet">2.</span> umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 &#x27;/ mnt/hda2&#x27; 退出<br><span class="hljs-bullet">3.</span> fuser -km /mnt/hda2 当设备繁忙时强制卸载<br><span class="hljs-bullet">4.</span> umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用<br><span class="hljs-bullet">5.</span> mount /dev/fd0 /mnt/floppy 挂载一个软盘<br><span class="hljs-bullet">6.</span> mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom<br><span class="hljs-bullet">7.</span> mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom<br><span class="hljs-bullet">8.</span> mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom<br><span class="hljs-bullet">9.</span> mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件<br><span class="hljs-bullet">10.</span> mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统<br><span class="hljs-bullet">11.</span> mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备<br><span class="hljs-bullet">12.</span> mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享<br></code></pre></td></tr></table></figure><h3 id="6、磁盘空间"><a href="#6、磁盘空间" class="headerlink" title="6、磁盘空间"></a>6、磁盘空间</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> df -h 显示已经挂载的分区列表<br><span class="hljs-bullet">2.</span> ls -lSr |more 以尺寸大小排列文件和目录<br><span class="hljs-bullet">3.</span> du -sh dir1 估算目录 &#x27;dir1&#x27; 已经使用的磁盘空间&#x27;<br><span class="hljs-bullet">4.</span> du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小<br><span class="hljs-bullet">5.</span> rpm -q -a --qf &#x27;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#x27; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br><span class="hljs-bullet">6.</span> dpkg-query -W -f=&#x27;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#x27; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)<br></code></pre></td></tr></table></figure><h3 id="7、用户和群组"><a href="#7、用户和群组" class="headerlink" title="7、用户和群组"></a>7、用户和群组</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> groupadd group<span class="hljs-emphasis">_name 创建一个新用户组</span><br><span class="hljs-emphasis">2. groupdel group_</span>name 删除一个用户组<br><span class="hljs-bullet">3.</span> groupmod -n new<span class="hljs-emphasis">_group_</span>name old<span class="hljs-emphasis">_group_</span>name 重命名一个用户组<br><span class="hljs-bullet">4.</span> useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 &quot;admin&quot; 用户组的用户<br><span class="hljs-bullet">5.</span> useradd user1 创建一个新用户<br><span class="hljs-bullet">6.</span> userdel -r user1 删除一个用户 ( &#x27;-r&#x27; 排除主目录)<br><span class="hljs-bullet">7.</span> usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性<br><span class="hljs-bullet">8.</span> passwd 修改口令<br><span class="hljs-bullet">9.</span> passwd user1 修改一个用户的口令 (只允许root执行)<br><span class="hljs-bullet">10.</span> chage -E 2005-12-31 user1 设置用户口令的失效期限<br><span class="hljs-bullet">11.</span> pwck 检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的用户<br><span class="hljs-bullet">12.</span> grpck 检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的群组<br><span class="hljs-bullet">13.</span> newgrp group<span class="hljs-emphasis">_name 登陆进一个新的群组以改变新创建文件的预设群组</span><br></code></pre></td></tr></table></figure><h3 id="8、文件的权限"><a href="#8、文件的权限" class="headerlink" title="8、文件的权限"></a>8、文件的权限</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> ls -lh 显示权限<br><span class="hljs-bullet">2.</span> ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示<br><span class="hljs-bullet">3.</span> chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br><span class="hljs-bullet">4.</span> chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br><span class="hljs-bullet">5.</span> chown user1 file1 改变一个文件的所有人属性<br><span class="hljs-bullet">6.</span> chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br><span class="hljs-bullet">7.</span> chgrp group1 file1 改变文件的群组<br><span class="hljs-bullet">8.</span> chown user1:group1 file1 改变一个文件的所有人和群组属性<br><span class="hljs-bullet">9.</span> find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br><span class="hljs-bullet">10.</span> chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br><span class="hljs-bullet">11.</span> chmod u-s /bin/file1 禁用一个二进制文件的 SUID位<br><span class="hljs-bullet">12.</span> chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br><span class="hljs-bullet">13.</span> chmod g-s /home/public 禁用一个目录的 SGID 位<br><span class="hljs-bullet">14.</span> chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br><span class="hljs-bullet">15.</span> chmod o-t /home/public 禁用一个目录的 STIKY 位<br><span class="hljs-bullet">16.</span> chmod +x 文件路径 为所有者、所属组和其他用户添加执行的权限<br><span class="hljs-bullet">17.</span> chmod -x 文件路径 为所有者、所属组和其他用户删除执行的权限<br><span class="hljs-bullet">18.</span> chmod u+x 文件路径 为所有者添加执行的权限<br><span class="hljs-bullet">19.</span> chmod g+x 文件路径 为所属组添加执行的权限<br><span class="hljs-bullet">20.</span> chmod o+x 文件路径 为其他用户添加执行的权限<br><span class="hljs-bullet">21.</span> chmod ug+x 文件路径 为所有者、所属组添加执行的权限<br><span class="hljs-bullet">22.</span> chmod =wx 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限<br><span class="hljs-bullet">23.</span> chmod ug=wx 文件路径 为所有者、所属组添加写、执行的权限，取消读权限<br></code></pre></td></tr></table></figure><h3 id="9、文件的特殊属性"><a href="#9、文件的特殊属性" class="headerlink" title="9、文件的特殊属性"></a>9、文件的特殊属性</h3><blockquote><p>使用 “+” 设置权限，使用 “-” 用于取消</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> chattr +a file1 只允许以追加方式读写文件<br><span class="hljs-bullet">2.</span> chattr +c file1 允许这个文件能被内核自动压缩/解压<br><span class="hljs-bullet">3.</span> chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br><span class="hljs-bullet">4.</span> chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br><span class="hljs-bullet">5.</span> chattr +s file1 允许一个文件被安全地删除<br><span class="hljs-bullet">6.</span> chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br><span class="hljs-bullet">7.</span> chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br><span class="hljs-bullet">8.</span> lsattr 显示特殊的属性<br></code></pre></td></tr></table></figure><h3 id="10、打包和压缩文件"><a href="#10、打包和压缩文件" class="headerlink" title="10、打包和压缩文件"></a>10、打包和压缩文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> bunzip2 file1.bz2 解压一个叫做 &#x27;file1.bz2&#x27;的文件<br><span class="hljs-bullet">2.</span> bzip2 file1 压缩一个叫做 &#x27;file1&#x27; 的文件<br><span class="hljs-bullet">3.</span> gunzip file1.gz 解压一个叫做 &#x27;file1.gz&#x27;的文件<br><span class="hljs-bullet">4.</span> gzip file1 压缩一个叫做 &#x27;file1&#x27;的文件<br><span class="hljs-bullet">5.</span> gzip -9 file1 最大程度压缩<br><span class="hljs-bullet">6.</span> rar a file1.rar test<span class="hljs-emphasis">_file 创建一个叫做 &#x27;file1.rar&#x27; 的包</span><br><span class="hljs-emphasis">7. rar a file1.rar file1 file2 dir1 同时压缩 &#x27;file1&#x27;, &#x27;file2&#x27; 以及目录 &#x27;dir1&#x27;</span><br><span class="hljs-emphasis">8. rar x file1.rar 解压rar包</span><br><span class="hljs-emphasis">9. unrar x file1.rar 解压rar包</span><br><span class="hljs-emphasis">10. tar -cvf archive.tar file1 创建一个非压缩的 tarball</span><br><span class="hljs-emphasis">11. tar -cvf archive.tar file1 file2 dir1 创建一个包含了 &#x27;file1&#x27;, &#x27;file2&#x27; 以及 &#x27;dir1&#x27;的档案文件</span><br><span class="hljs-emphasis">12. tar -tf archive.tar 显示一个包中的内容</span><br><span class="hljs-emphasis">13. tar -xvf archive.tar 释放一个包</span><br><span class="hljs-emphasis">14. tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</span><br><span class="hljs-emphasis">15. tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包</span><br><span class="hljs-emphasis">16. tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包</span><br><span class="hljs-emphasis">17. tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包</span><br><span class="hljs-emphasis">18. tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包</span><br><span class="hljs-emphasis">19. zip file1.zip file1 创建一个zip格式的压缩包</span><br><span class="hljs-emphasis">20. zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包</span><br><span class="hljs-emphasis">21. unzip file1.zip 解压一个zip格式压缩包</span><br></code></pre></td></tr></table></figure><h3 id="11、RPM-包"><a href="#11、RPM-包" class="headerlink" title="11、RPM 包"></a>11、RPM 包</h3><blockquote><p>（Fedora, Redhat及类似系统）</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> rpm -ivh package.rpm 安装一个rpm包<br><span class="hljs-bullet">2.</span> rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告<br><span class="hljs-bullet">3.</span> rpm -U package.rpm 更新一个rpm包但不改变其配置文件<br><span class="hljs-bullet">4.</span> rpm -F package.rpm 更新一个确定已经安装的rpm包<br><span class="hljs-bullet">5.</span> rpm -e package<span class="hljs-emphasis">_name.rpm 删除一个rpm包</span><br><span class="hljs-emphasis">6. rpm -qa 显示系统中所有已经安装的rpm包</span><br><span class="hljs-emphasis">7. rpm -qa | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的rpm包</span><br><span class="hljs-emphasis">8. rpm -qi package_</span>name 获取一个已安装包的特殊信息<br><span class="hljs-bullet">9.</span> rpm -qg &quot;System Environment/Daemons&quot; 显示一个组件的rpm包<br><span class="hljs-bullet">10.</span> rpm -ql package<span class="hljs-emphasis">_name 显示一个已经安装的rpm包提供的文件列表</span><br><span class="hljs-emphasis">11. rpm -qc package_</span>name 显示一个已经安装的rpm包提供的配置文件列表<br><span class="hljs-bullet">12.</span> rpm -q package<span class="hljs-emphasis">_name --whatrequires 显示与一个rpm包存在依赖关系的列表</span><br><span class="hljs-emphasis">13. rpm -q package_</span>name --whatprovides 显示一个rpm包所占的体积<br><span class="hljs-bullet">14.</span> rpm -q package<span class="hljs-emphasis">_name --scripts 显示在安装/删除期间所执行的脚本l</span><br><span class="hljs-emphasis">15. rpm -q package_</span>name --changelog 显示一个rpm包的修改历史<br><span class="hljs-bullet">16.</span> rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供<br><span class="hljs-bullet">17.</span> rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br><span class="hljs-bullet">18.</span> rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书<br><span class="hljs-bullet">19.</span> rpm --checksig package.rpm 确认一个rpm包的完整性<br><span class="hljs-bullet">20.</span> rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br><span class="hljs-bullet">21.</span> rpm -V package<span class="hljs-emphasis">_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</span><br><span class="hljs-emphasis">22. rpm -Va 检查系统中所有已安装的rpm包- 小心使用</span><br><span class="hljs-emphasis">23. rpm -Vp package.rpm 确认一个rpm包还未安装</span><br><span class="hljs-emphasis">24. rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件</span><br><span class="hljs-emphasis">25. rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包</span><br><span class="hljs-emphasis">26. rpmbuild --rebuild package_</span>name.src.rpm 从一个rpm源码构建一个 rpm 包<br></code></pre></td></tr></table></figure><h3 id="12、YUM-软件包升级器"><a href="#12、YUM-软件包升级器" class="headerlink" title="12、YUM 软件包升级器"></a>12、YUM 软件包升级器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; （Fedora, RedHat及类似系统）</span><br><span class="hljs-quote">&gt;</span><br><span class="hljs-quote"></span><br><span class="hljs-quote">1. yum install package<span class="hljs-emphasis">_name 下载并安装一个rpm包</span></span><br><span class="hljs-emphasis"><span class="hljs-quote">2. yum localinstall package_</span>name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</span><br><span class="hljs-bullet">3.</span> yum update package<span class="hljs-emphasis">_name.rpm 更新当前系统中所有安装的rpm包</span><br><span class="hljs-emphasis">4. yum update package_</span>name 更新一个rpm包<br><span class="hljs-bullet">5.</span> yum remove package<span class="hljs-emphasis">_name 删除一个rpm包</span><br><span class="hljs-emphasis">6. yum list 列出当前系统中安装的所有包</span><br><span class="hljs-emphasis">7. yum search package_</span>name 在rpm仓库中搜寻软件包<br><span class="hljs-bullet">8.</span> yum clean packages 清理rpm缓存删除下载的包<br><span class="hljs-bullet">9.</span> yum clean headers 删除所有头文件<br><span class="hljs-bullet">10.</span> yum clean all 删除所有缓存的包和头文件<br></code></pre></td></tr></table></figure><blockquote><h3 id="13、DEB-包"><a href="#13、DEB-包" class="headerlink" title="13、DEB 包"></a>13、DEB 包</h3></blockquote><p>(Debian, Ubuntu 以及类似系统)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> dpkg -i package.deb 安装/更新一个 deb 包<br><span class="hljs-bullet">2.</span> dpkg -r package<span class="hljs-emphasis">_name 从系统删除一个 deb 包</span><br><span class="hljs-emphasis">3. dpkg -l 显示系统中所有已经安装的 deb 包</span><br><span class="hljs-emphasis">4. dpkg -l | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的deb包</span><br><span class="hljs-emphasis">5. dpkg -s package_</span>name 获得已经安装在系统中一个特殊包的信息<br><span class="hljs-bullet">6.</span> dpkg -L package<span class="hljs-emphasis">_name 显示系统中已经安装的一个deb包所提供的文件列表</span><br><span class="hljs-emphasis">7. dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表</span><br><span class="hljs-emphasis">8. dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</span><br><span class="hljs-emphasis">9. APT 软件工具 (Debian, Ubuntu 以及类似系统)</span><br><span class="hljs-emphasis">10. apt-get install package_</span>name 安装/更新一个 deb 包<br><span class="hljs-bullet">11.</span> apt-cdrom install package<span class="hljs-emphasis">_name 从光盘安装/更新一个 deb 包</span><br><span class="hljs-emphasis">12. apt-get update 升级列表中的软件包</span><br><span class="hljs-emphasis">13. apt-get upgrade 升级所有已安装的软件</span><br><span class="hljs-emphasis">14. apt-get remove package_</span>name 从系统删除一个deb包<br><span class="hljs-bullet">15.</span> apt-get check 确认依赖的软件仓库正确<br><span class="hljs-bullet">16.</span> apt-get clean 从下载的软件包中清理缓存<br><span class="hljs-bullet">17.</span> apt-cache search searched-package 返回包含所要搜索字符串的软件包名称<br></code></pre></td></tr></table></figure><h3 id="14、查看文件内容"><a href="#14、查看文件内容" class="headerlink" title="14、查看文件内容"></a>14、查看文件内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> cat file1 从第一个字节开始正向查看文件的内容<br><span class="hljs-bullet">2.</span> tac file1 从最后一行开始反向查看一个文件的内容<br><span class="hljs-bullet">3.</span> more file1 查看一个长文件的内容<br><span class="hljs-bullet">4.</span> less file1 类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作<br><span class="hljs-bullet">5.</span> head -2 file1 查看一个文件的前两行<br><span class="hljs-bullet">6.</span> tail -2 file1 查看一个文件的最后两行<br><span class="hljs-bullet">7.</span> tail -f /var/log/messages 实时查看被添加到一个文件中的内容<br></code></pre></td></tr></table></figure><h3 id="15、文本处理"><a href="#15、文本处理" class="headerlink" title="15、文本处理"></a>15、文本处理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> cat file1 file2 ... | command &lt;&gt; file1<span class="hljs-emphasis">_in.txt_</span>or<span class="hljs-emphasis">_file1_</span>out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT<br><span class="hljs-bullet">2.</span> cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br><span class="hljs-bullet">3.</span> cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br><span class="hljs-bullet">4.</span> grep Aug /var/log/messages 在文件 &#x27;/var/log/messages&#x27;中查找关键词&quot;Aug&quot;<br><span class="hljs-bullet">5.</span> grep ^Aug /var/log/messages 在文件 &#x27;/var/log/messages&#x27;中查找以&quot;Aug&quot;开始的词汇<br><span class="hljs-bullet">6.</span> grep [0-9] /var/log/messages 选择 &#x27;/var/log/messages&#x27; 文件中所有包含数字的行<br><span class="hljs-bullet">7.</span> grep Aug -R /var/log/* 在目录 &#x27;/var/log&#x27; 及随后的目录中搜索字符串&quot;Aug&quot;<br><span class="hljs-bullet">8.</span> sed &#x27;s/stringa1/stringa2/g&#x27; example.txt 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;<br><span class="hljs-bullet">9.</span> sed &#x27;/^$/d&#x27; example.txt 从example.txt文件中删除所有空白行<br><span class="hljs-bullet">10.</span> sed &#x27;/ <span class="hljs-emphasis">*#/d; /^$/d&#x27; example.txt 从example.txt文件中删除所有注释和空白行</span><br><span class="hljs-emphasis">11. echo &#x27;esempio&#x27; | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; 合并上下单元格内容</span><br><span class="hljs-emphasis">12. sed -e &#x27;1d&#x27; result.txt 从文件example.txt 中排除第一行</span><br><span class="hljs-emphasis">13. sed -n &#x27;/stringa1/p&#x27; 查看只包含词汇 &quot;string1&quot;的行</span><br><span class="hljs-emphasis">14. sed -e &#x27;s/ *</span>$//&#x27; example.txt 删除每一行最后的空白字符<br><span class="hljs-bullet">15.</span> sed -e &#x27;s/stringa1//g&#x27; example.txt 从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部<br><span class="hljs-bullet">16.</span> sed -n &#x27;1,5p;5q&#x27; example.txt 查看从第一行到第5行内容<br><span class="hljs-bullet">17.</span> sed -n &#x27;5p;5q&#x27; example.txt 查看第5行<br><span class="hljs-bullet">18.</span> sed -e &#x27;s/00<span class="hljs-emphasis">*/0/g&#x27; example.txt 用单个零替换多个零</span><br><span class="hljs-emphasis">19. cat -n file1 标示文件的行数</span><br><span class="hljs-emphasis">20. cat example.txt | awk &#x27;NR%2==1&#x27; 删除example.txt文件中的所有偶数行</span><br><span class="hljs-emphasis">21. echo a b c | awk &#x27;&#123;print $1&#125;&#x27; 查看一行第一栏</span><br><span class="hljs-emphasis">22. echo a b c | awk &#x27;&#123;print $1,$3&#125;&#x27; 查看一行的第一和第三栏</span><br><span class="hljs-emphasis">23. paste file1 file2 合并两个文件或两栏的内容</span><br><span class="hljs-emphasis">24. paste -d &#x27;+&#x27; file1 file2 合并两个文件或两栏的内容，中间用&quot;+&quot;区分</span><br><span class="hljs-emphasis">25. sort file1 file2 排序两个文件的内容</span><br><span class="hljs-emphasis">26. sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</span><br><span class="hljs-emphasis">27. sort file1 file2 | uniq -u 删除交集，留下其他的行</span><br><span class="hljs-emphasis">28. sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</span><br><span class="hljs-emphasis">29. comm -1 file1 file2 比较两个文件的内容只删除 &#x27;file1&#x27; 所包含的内容</span><br><span class="hljs-emphasis">30. comm -2 file1 file2 比较两个文件的内容只删除 &#x27;file2&#x27; 所包含的内容</span><br><span class="hljs-emphasis">31. comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</span><br></code></pre></td></tr></table></figure><h3 id="16、字符设置和文件格式转换"><a href="#16、字符设置和文件格式转换" class="headerlink" title="16、字符设置和文件格式转换"></a>16、字符设置和文件格式转换</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br><span class="hljs-bullet">2.</span> unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br><span class="hljs-bullet">3.</span> recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br><span class="hljs-bullet">4.</span> recode -l | more 显示所有允许的转换格式<br></code></pre></td></tr></table></figure><h3 id="17、文件系统分析"><a href="#17、文件系统分析" class="headerlink" title="17、文件系统分析"></a>17、文件系统分析</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块<br><span class="hljs-bullet">2.</span> fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性<br><span class="hljs-bullet">3.</span> fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br><span class="hljs-bullet">4.</span> e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br><span class="hljs-bullet">5.</span> e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br><span class="hljs-bullet">6.</span> fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br><span class="hljs-bullet">7.</span> fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性<br><span class="hljs-bullet">8.</span> fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br><span class="hljs-bullet">9.</span> dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br></code></pre></td></tr></table></figure><h3 id="18、初始化一个文件系统"><a href="#18、初始化一个文件系统" class="headerlink" title="18、初始化一个文件系统"></a>18、初始化一个文件系统</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> mkfs /dev/hda1 在hda1分区创建一个文件系统<br><span class="hljs-bullet">2.</span> mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统<br><span class="hljs-bullet">3.</span> mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br><span class="hljs-bullet">4.</span> mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统<br><span class="hljs-bullet">5.</span> fdformat -n /dev/fd0 格式化一个软盘<br><span class="hljs-bullet">6.</span> mkswap /dev/hda3 创建一个swap文件系统<br></code></pre></td></tr></table></figure><h3 id="19、SWAP文件系统"><a href="#19、SWAP文件系统" class="headerlink" title="19、SWAP文件系统"></a>19、SWAP文件系统</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> mkswap /dev/hda3 创建一个swap文件系统<br><span class="hljs-bullet">2.</span> swapon /dev/hda3 启用一个新的swap文件系统<br><span class="hljs-bullet">3.</span> swapon /dev/hda2 /dev/hdb3 启用两个swap分区<br></code></pre></td></tr></table></figure><h3 id="20、备份"><a href="#20、备份" class="headerlink" title="20、备份"></a>20、备份</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> dump -0aj -f /tmp/home0.bak /home 制作一个 &#x27;/home&#x27; 目录的完整备份<br><span class="hljs-bullet">2.</span> dump -1aj -f /tmp/home0.bak /home 制作一个 &#x27;/home&#x27; 目录的交互式备份<br><span class="hljs-bullet">3.</span> restore -if /tmp/home0.bak 还原一个交互式备份<br><span class="hljs-bullet">4.</span> rsync -rogpav --delete /home /tmp 同步两边的目录<br><span class="hljs-bullet">5.</span> rsync -rogpav -e ssh --delete /home ip<span class="hljs-emphasis">_address:/tmp 通过SSH通道rsync</span><br><span class="hljs-emphasis">6. rsync -az -e ssh --delete ip_</span>addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br><span class="hljs-bullet">7.</span> rsync -az -e ssh --delete /home/local ip<span class="hljs-emphasis">_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录</span><br><span class="hljs-emphasis">8. dd bs=1M if=/dev/hda | gzip | ssh user@ip_</span>addr &#x27;dd of=hda.gz&#x27; 通过ssh在远程主机上执行一次备份本地磁盘的操作<br><span class="hljs-bullet">9.</span> dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br><span class="hljs-bullet">10.</span> tar -Puf backup.tar /home/user 执行一次对 &#x27;/home/user&#x27; 目录的交互式备份操作<br><span class="hljs-bullet">11.</span> ( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip<span class="hljs-emphasis">_addr &#x27;cd /home/share/ &amp;&amp; tar x -p&#x27; 通过ssh在远程目录中复制一个目录内容</span><br><span class="hljs-emphasis">12. ( tar c /home ) | ssh -C user@ip_</span>addr &#x27;cd /home/backup-home &amp;&amp; tar x -p&#x27; 通过ssh在远程目录中复制一个本地目录<br><span class="hljs-bullet">13.</span> tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br><span class="hljs-bullet">14.</span> find /home/user1 -name &#x27;<span class="hljs-emphasis">*.txt&#x27; | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 &#x27;.txt&#x27; 结尾的文件到另一个目录</span><br><span class="hljs-emphasis">15. find /var/log -name &#x27;*</span>.log&#x27; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 &#x27;.log&#x27; 结尾的文件并做成一个bzip包<br><span class="hljs-bullet">16.</span> dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br><span class="hljs-bullet">17.</span> dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容<br></code></pre></td></tr></table></figure><h3 id="21、光盘"><a href="#21、光盘" class="headerlink" title="21、光盘"></a>21、光盘</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容<br><span class="hljs-bullet">2.</span> mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件<br><span class="hljs-bullet">3.</span> mkisofs /dev/cdrom | gzip &gt; cd<span class="hljs-emphasis">_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</span><br><span class="hljs-emphasis">4. mkisofs -J -allow-leading-dots -R -V &quot;Label CD&quot; -iso-level 4 -o ./cd.iso data_</span>cd 创建一个目录的iso镜像文件<br><span class="hljs-bullet">5.</span> cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件<br><span class="hljs-bullet">6.</span> gzip -dc cd<span class="hljs-emphasis">_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件</span><br><span class="hljs-emphasis">7. mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件</span><br><span class="hljs-emphasis">8. cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</span><br><span class="hljs-emphasis">9. cd-paranoia -- &quot;-3&quot; 从一个CD光盘转录音轨到 wav 文件中（参数-3）</span><br><span class="hljs-emphasis">10. cdrecord --scanbus 扫描总线以识别scsi通道</span><br><span class="hljs-emphasis">11. dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</span><br></code></pre></td></tr></table></figure><h3 id="22、网络"><a href="#22、网络" class="headerlink" title="22、网络"></a>22、网络</h3><blockquote><p>（以太网和WIFI无线）</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> ifconfig eth0 显示一个以太网卡的配置<br><span class="hljs-bullet">2.</span> ifup eth0 启用一个 &#x27;eth0&#x27; 网络设备<br><span class="hljs-bullet">3.</span> ifdown eth0 禁用一个 &#x27;eth0&#x27; 网络设备<br><span class="hljs-bullet">4.</span> ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址<br><span class="hljs-bullet">5.</span> ifconfig eth0 promisc 设置 &#x27;eth0&#x27; 成混杂模式以嗅探数据包 (sniffing)<br><span class="hljs-bullet">6.</span> dhclient eth0 以dhcp模式启用 &#x27;eth0&#x27;<br><span class="hljs-bullet">7.</span> route -n show routing table<br><span class="hljs-bullet">8.</span> route add -net 0/0 gw IP<span class="hljs-emphasis">_Gateway configura default gateway</span><br><span class="hljs-emphasis">9. route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network &#x27;192.168.0.0/16&#x27;</span><br><span class="hljs-emphasis">10. route del 0/0 gw IP_</span>gateway remove static route<br><span class="hljs-bullet">11.</span> echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip<span class="hljs-emphasis">_forward activate ip routing</span><br><span class="hljs-emphasis">12. hostname show hostname of system</span><br><span class="hljs-emphasis">13. host www.example.com lookup hostname to resolve name to ip address and viceversa(1)</span><br><span class="hljs-emphasis">14. nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)</span><br><span class="hljs-emphasis">15. ip link show show link status of all interfaces</span><br><span class="hljs-emphasis">16. mii-tool eth0 show link status of &#x27;eth0&#x27;</span><br><span class="hljs-emphasis">17. ethtool eth0 show statistics of network card &#x27;eth0&#x27;</span><br><span class="hljs-emphasis">18. netstat -tup show all active network connections and their PID</span><br><span class="hljs-emphasis">19. netstat -tupl show all network services listening on the system and their PID</span><br><span class="hljs-emphasis">20. tcpdump tcp port 80 show all HTTP traffic</span><br><span class="hljs-emphasis">21. iwlist scan show wireless networks</span><br><span class="hljs-emphasis">22. iwconfig eth1 show configuration of a wireless network card</span><br><span class="hljs-emphasis">23. hostname show hostname</span><br><span class="hljs-emphasis">24. host www.example.com lookup hostname to resolve name to ip address and viceversa</span><br><span class="hljs-emphasis">25. nslookup www.example.com lookup hostname to resolve name to ip address and viceversa</span><br><span class="hljs-emphasis">26. whois www.example.com lookup on Whois database</span><br></code></pre></td></tr></table></figure><h3 id="23、防火墙-firewall"><a href="#23、防火墙-firewall" class="headerlink" title="23、防火墙 firewall"></a>23、防火墙 firewall</h3><h4 id="启停防火墙"><a href="#启停防火墙" class="headerlink" title="启停防火墙"></a>启停防火墙</h4><ol><li>设置开机启用防火墙<br><code>systemctl enable firewalld.service</code></li><li>设置开机禁用防火墙<br><code>systemctl disable firewalld.service</code></li><li>检查防火墙状态<br><code>systemctl status firewalld</code></li><li>启动防火墙<br><code>systemctl start firewalld</code></li><li>停止防火墙<br><code>systemctl stop firewalld</code></li><li>重启防火墙<br><code>systemctl restart firewalld</code></li></ol><h4 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h4><ol><li>防火墙开放 8989 端口<br><code>firewall-cmd --add-port=8989/tcp --permanent</code></li><li>防火墙关闭 8989 端口<br><code>firewall-cmd --remove-port=8989/tcp --permanent</code></li><li>重载防火墙<br><code>firewall-cmd --reload</code></li><li>检查 8080 端口是否开放成功<br><code>firewall-cmd --permanent --query-port=8989/tcp</code></li><li>查看防火墙开放端口<br><code>iptables -nL</code></li></ol><h4 id="使用-firewall-cmd-配置端口"><a href="#使用-firewall-cmd-配置端口" class="headerlink" title="使用 firewall-cmd 配置端口"></a>使用 firewall-cmd 配置端口</h4><ol><li><p>查看防火墙状态<br><code>firewall-cmd --state</code></p></li><li><p>重新加载配置<br><code>firewall-cmd --reload</code></p></li><li><p>查看开放的端口<br><code>firewall-cmd --list-ports</code><br>或<br><code>firewall-cmd --list-all</code></p></li><li><p>开启防火墙端口<br><code>firewall-cmd --zone=public --add-port=9200/tcp --permanent</code></p></li><li><p>关闭防火墙端口<br><code>firewall-cmd --zone=public --remove-port=9200/tcp --permanent</code></p><blockquote><p>命令含义：<br>–zone #作用域<br>–add-port&#x3D;9200&#x2F;tcp #添加端口，格式为：端口 &#x2F; 通讯协议<br>–permanent #永久生效，没有此参数重启后失效<br>注意：添加端口后，必须用命令 firewall-cmd –reload 重新加载一遍才会生效，如果用的是云服务器，记得在安全组同步开放端口</p></blockquote></li></ol><h3 id="24、列出目录内容"><a href="#24、列出目录内容" class="headerlink" title="24、列出目录内容"></a>24、列出目录内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> ls -a：显示所有文件（包括隐藏文件）；<br><span class="hljs-bullet">2.</span> ls -l：显示详细信息；<br><span class="hljs-bullet">3.</span> ls -R：递归显示子目录结构；<br><span class="hljs-bullet">4.</span> ls -ld：显示目录和链接信息；<br><span class="hljs-bullet">5.</span> ctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；<br><span class="hljs-bullet">6.</span> Linux中以.开头的文件是隐藏文件；<br><span class="hljs-bullet">7.</span> pwd:显示当前目录<br></code></pre></td></tr></table></figure><h3 id="25、查看文件的类型"><a href="#25、查看文件的类型" class="headerlink" title="25、查看文件的类型"></a>25、查看文件的类型</h3><p>file:查看文件的类型</p><h3 id="26、复制文件目录等操作"><a href="#26、复制文件目录等操作" class="headerlink" title="26、复制文件目录等操作"></a>26、复制文件目录等操作</h3><h4 id="1、cp：复制文件和目录-cp源文件（文件夹）目标文件（文件夹）"><a href="#1、cp：复制文件和目录-cp源文件（文件夹）目标文件（文件夹）" class="headerlink" title="1、cp：复制文件和目录 cp源文件（文件夹）目标文件（文件夹）"></a>1、cp：复制文件和目录 cp源文件（文件夹）目标文件（文件夹）</h4><p>常用参数：-r:递归复制整个目录树；-v：显示详细信息；复制文件夹时要在cp命令后面加一个-r参数：如：cp -r 源文件夹 目标文件夹</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">/bin/<span class="hljs-meta">cp</span> -r /<span class="hljs-meta">opt</span>/app1 /<span class="hljs-meta">opt</span>/app2<br></code></pre></td></tr></table></figure><h4 id="2、touch-文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。"><a href="#2、touch-文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。" class="headerlink" title="2、touch+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。"></a>2、touch+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。</h4><p>功能：生成一个空文件或修改文件的存取&#x2F;修改的时间记录值。touch * ：将当前下的文件时间修改为系统的当前时间</p><p>touch –d 20040210 test：将test文件的日期改为20040210</p><p>touch abc ：若abc文件存在，则修改为系统的当前时间；若不存在，则生成一个为当前时间的空文件</p><h4 id="3、mv-文件-目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。格式为：mv-参数"><a href="#3、mv-文件-目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。格式为：mv-参数" class="headerlink" title="3、mv 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。格式为：mv [参数]&lt;源文件或目录&gt; &lt;目标文件或目录&gt;"></a>3、mv 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。格式为：mv [参数]&lt;源文件或目录&gt; &lt;目标文件或目录&gt;</h4><p>mva.txt ..&#x2F;：将a.txt文件移动上层目录</p><p>mv a.txt b.txt：将a.txt改名为b.txt</p><p>mvdir2 ..&#x2F;：将dir2目录上移一层</p><h4 id="4、rm：删除文件；常用参数：-i：交互式-r：递归的删除包括目录中的所有内容"><a href="#4、rm：删除文件；常用参数：-i：交互式-r：递归的删除包括目录中的所有内容" class="headerlink" title="4、rm：删除文件；常用参数：-i：交互式 -r：递归的删除包括目录中的所有内容"></a>4、rm：删除文件；常用参数：-i：交互式 -r：递归的删除包括目录中的所有内容</h4><h4 id="5、mkdir-文件夹名称：创建文件夹；"><a href="#5、mkdir-文件夹名称：创建文件夹；" class="headerlink" title="5、mkdir +文件夹名称：创建文件夹；"></a>5、mkdir +文件夹名称：创建文件夹；</h4><h4 id="6、rm-r-文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）"><a href="#6、rm-r-文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）" class="headerlink" title="6、rm -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）"></a>6、rm -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）</h4><p>rmdir 文件夹名称：删除文件夹（只能删除空文件夹）</p><h4 id="7、mkdir-p-dir1-dir2-：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录，-也就是连续创建两个目录（dir1-和dir1-dir2）"><a href="#7、mkdir-p-dir1-dir2-：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录，-也就是连续创建两个目录（dir1-和dir1-dir2）" class="headerlink" title="7、mkdir -p dir1&#x2F;dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1&#x2F;和dir1&#x2F;dir2）"></a>7、mkdir -p dir1&#x2F;dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1&#x2F;和dir1&#x2F;dir2）</h4><h4 id="8、rmdir-–p-dir1-dir2：删除dir1下的dir2目录，若dir1目录为空也删除它"><a href="#8、rmdir-–p-dir1-dir2：删除dir1下的dir2目录，若dir1目录为空也删除它" class="headerlink" title="8、rmdir –p dir1&#x2F;dir2：删除dir1下的dir2目录，若dir1目录为空也删除它"></a>8、rmdir –p dir1&#x2F;dir2：删除dir1下的dir2目录，若dir1目录为空也删除它</h4><h4 id="9、rm-：删除当前目录下的所有文件"><a href="#9、rm-：删除当前目录下的所有文件" class="headerlink" title="9、rm * ：删除当前目录下的所有文件"></a>9、rm * ：删除当前目录下的所有文件</h4><h4 id="10、-f参数：强迫删除文件-rm-–f-txt：强迫删除所有以后缀名为txt文件"><a href="#10、-f参数：强迫删除文件-rm-–f-txt：强迫删除所有以后缀名为txt文件" class="headerlink" title="10、-f参数：强迫删除文件 rm –f *.txt：强迫删除所有以后缀名为txt文件"></a>10、-f参数：强迫删除文件 rm –f *.txt：强迫删除所有以后缀名为txt文件</h4><h4 id="11、-i参数：删除文件时询问"><a href="#11、-i参数：删除文件时询问" class="headerlink" title="11、-i参数：删除文件时询问"></a>11、-i参数：删除文件时询问</h4><p>rm –i * ：删除当前目录下的所有文件会有如下提示：rm:backup:is a directory 遇到目录会略过</p><p>rm: remove ‘myfiles.txt’ ? Y</p><p>删除文件时会询问,可按Y或N键表示允许或拒绝删除文件</p><h4 id="12、-r参数：递归删除（连子目录一同删除，这是一个相当常用的参数）"><a href="#12、-r参数：递归删除（连子目录一同删除，这是一个相当常用的参数）" class="headerlink" title="12、-r参数：递归删除（连子目录一同删除，这是一个相当常用的参数）"></a>12、-r参数：递归删除（连子目录一同删除，这是一个相当常用的参数）</h4><p>rm -r test ：删除test目录（含test目录下所有文件和子目录）</p><p>rm -r *：删除所有文件（含当前目录所有文件、所有子目录和子目录下的文件） 一般在删除目录时r和f一起用，避免麻烦</p><p>rm -rf test ：强行删除、不加询问</p><h4 id="13、grep：功能：在文件中搜索匹配的字符并进行输出"><a href="#13、grep：功能：在文件中搜索匹配的字符并进行输出" class="headerlink" title="13、grep：功能：在文件中搜索匹配的字符并进行输出"></a>13、grep：功能：在文件中搜索匹配的字符并进行输出</h4><p>格式：grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;</p><p>greplinux test.txt：搜索test.txt文件中字符串linux并输出</p><h4 id="14、ln命令"><a href="#14、ln命令" class="headerlink" title="14、ln命令"></a>14、ln命令</h4><p>功能：在文件和目录之间建立链接</p><p>格式：ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</p><p>链接分“软链接”和“硬链接”</p><p>1.软链接:</p><p>ln–s &#x2F;usr&#x2F;share&#x2F;do doc ：创建一个链接文件doc,并指向目录&#x2F;usr&#x2F;share&#x2F;do</p><p>2.硬链接:</p><p>ln &#x2F;usr&#x2F;share&#x2F;test hard：创建一个硬链接文件hard，这时对于test文件对应 的存储区域来说，又多了一个文件指向它</p><h3 id="27、系统常用命令"><a href="#27、系统常用命令" class="headerlink" title="27、系统常用命令"></a>27、系统常用命令</h3><h4 id="1、显示命令"><a href="#1、显示命令" class="headerlink" title="1、显示命令"></a>1、显示命令</h4><p>date:查看或设置当前系统的时间：格式化显示时间：+%Y–%m–%d；date -s:设置当前系统的时间</p><p>hwclock(clock)：显示硬件时钟时间(需要管理员权限)；cal：查看日历</p><p>格式cal [参数] 月年</p><p>cal：显示当月的日历 cal4 2004 ：显示2004年4月的日历</p><p>cal- y 2003：显示2003年的日历</p><p>uptime：查看系统运行时间</p><h4 id="2、输出查看命令"><a href="#2、输出查看命令" class="headerlink" title="2、输出查看命令"></a>2、输出查看命令</h4><p>echo：显示输入的内容 追加文件echo “liuyazhuang” &gt;&gt; liuyazhuang.txt</p><p>cat：显示文件内容,也可以将数个文件合并成一个文件。格式：格式：cat[参数]&lt;文件名&gt;</p><p>cat test.txt：显示test.txt文件内容</p><p>cat test.txt | more ：逐页显示test.txt文件中的内容</p><p>cat test.txt &gt;&gt; test1.txt ：将test.txt的内容附加到test1.txt文件之后</p><p>cat test.txt test2.txt &gt;readme.txt : 将test.txt和test2.txt文件合并成readme.txt 文件</p><p>head:显示文件的头几行（默认10行） -n:指定显示的行数格式：head -n 文件名</p><p>tail：显示文件的末尾几行（默认10行）-n：指定显示的行数 -f：追踪显示文件更新 （一般用于查看日志，命令不会退出，而是持续显示新加入的内容）</p><p>格式：格式：tail[参数]&lt;文件名&gt;</p><p>tail-10 &#x2F;etc&#x2F;passwd ：显示&#x2F;etc&#x2F;passwd&#x2F;文件的倒数10行内容</p><p>tail+10 &#x2F;etc&#x2F;passwd ：显示&#x2F;etc&#x2F;passwd&#x2F;文件从第10行开始到末尾的内容</p><p>more：用于翻页显示文件内容（只能向下翻页）</p><p>more命令是一般用于要显示的内容会超过一个画面长度的情况。为了避免画 面显示时瞬间就闪过去，用户可以使用more命令，让画面在显示满一页时暂停，此时可按空格健继续显示下一个画面，或按Q键停止显示。ls -al |more：以长格形式显示etc目录下的文件列表，显示满一个画面便暂停，可 按空格键继续显示下一画面，或按Q键跳离</p><p>less：翻页显示文件内容（带上下翻页）按下上键分页，按q退出、‘</p><p>less命令的用法与more命令类似，也可以用来浏览超过一页的文件。所不同 的是less 命令除了可以按空格键向下显示文件外，还可以利用上下键来卷动文件。当要结束浏览时，只要在less命令的提示符“：”下按Q键即可。ls -al | less：以长格形式列出&#x2F;etc目录中所有的内容。用户可按上下键浏览或按Q键跳离</p><h4 id="3、查看硬件信息"><a href="#3、查看硬件信息" class="headerlink" title="3、查看硬件信息"></a>3、查看硬件信息</h4><p>Ispci：查看PCI设备 -v：查看详细信息</p><p>Isusb：查看USB设备 -v：查看详细信息</p><p>Ismod：查看加载的模块(驱动)</p><h4 id="4、归档、压缩"><a href="#4、归档、压缩" class="headerlink" title="4、归档、压缩"></a>4、归档、压缩</h4><p>zip:压缩文件 zip liuyazhuang.zip myfile 格式为：“zip 压缩后的zip文件文件名”</p><p>unzip：解压文件 unzip liuyazhuang.zip</p><p>gzip：压缩文件 gzip 文件名</p><p>tar：归档文件</p><p>tar -cvf out.tar liuyazhuang 打包一个归档（将文件”liuyazhuang”打包成一个归档）</p><p>tar -xvf liuyazhuang.tar 释放一个归档（释放liuyazhuang.tar归档）</p><p>tar -cvzf backup.tar.gz&#x2F;etc</p><p>-z参数将归档后的归档文件进行gzip压缩以减少大小。-c：创建一个新tar文件</p><p>-v：显示运行过程的信息</p><p>-f：指定文件名</p><p>-z：调用gzip压缩命令进行压缩</p><p>-t：查看压缩文件的内容</p><p>-x：解开tar文件</p><p>tar -cvf test.tar *：将所有文件打包成test.tar,扩展名.tar需自行加上</p><p>tar -zcvf test.tar.gz *：将所有文件打包成test.tar,再用gzip命令压缩</p><p>tar -tf test.tar ：查看test.tar文件中包括了哪些文件</p><p>tar -xvf test.tar 将test.tar解开</p><p>tar -zxvf foo.tar.gz 解压缩</p><p>gzip各gunzip命令</p><p>gziptest.txt ：压缩文件时，不需要任何参数</p><p>gizp–l test.txt.gz：显示压缩率</p><h4 id="5、查找"><a href="#5、查找" class="headerlink" title="5、查找"></a>5、查找</h4><p>locate：快速查找文件、文件夹：locate keyword</p><p>此命令需要预先建立数据库，数据库默认每天更新一次，可用updatedb命令手工建立、更新数据库。欢迎关注我们，公号终码一生。find查找位置查找参数</p><p>如：find . -name <em>liuyazhuang</em> 查找当前目录下名称中含有”liuyazhuang”的文件</p><p>find &#x2F; -name *.conf 查找根目录下（整个硬盘）下后缀为.conf的文件</p><p>find &#x2F; -perm 777 查找所有权限是777的文件</p><p>find &#x2F; -type d 返回根目录下所有的目录</p><p>find . -name “a*”-exec ls -l {} ;</p><p>find功能：用来寻找文件或目录。格式：find [&lt;路径&gt;] [匹配条件]</p><p>find &#x2F; -name httpd.conf 搜索系统根目录下名为httpd.conf的文件</p><h4 id="7、ctrl-c-终止当前的命令"><a href="#7、ctrl-c-终止当前的命令" class="headerlink" title="7、ctrl+c :终止当前的命令"></a>7、ctrl+c :终止当前的命令</h4><h4 id="8、who或w命令"><a href="#8、who或w命令" class="headerlink" title="8、who或w命令"></a>8、who或w命令</h4><p>功能：查看当前系统中有哪些用户登录</p><p>格式：who&#x2F;w[参数]</p><h4 id="9、dmesg命令-功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息"><a href="#9、dmesg命令-功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息" class="headerlink" title="9、dmesg命令 功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息"></a>9、dmesg命令 功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息</h4><h4 id="10、df命令-功能：用于查看文件系统的各个分区的占用情况"><a href="#10、df命令-功能：用于查看文件系统的各个分区的占用情况" class="headerlink" title="10、df命令 功能：用于查看文件系统的各个分区的占用情况"></a>10、df命令 功能：用于查看文件系统的各个分区的占用情况</h4><h4 id="11、du命令"><a href="#11、du命令" class="headerlink" title="11、du命令"></a>11、du命令</h4><p>功能：查看某个目录中各级子目录所使用的硬盘空间数</p><p>格式：du [参数] &lt;目录名&gt;</p><h4 id="12、free命令"><a href="#12、free命令" class="headerlink" title="12、free命令"></a>12、free命令</h4><p>功能：用于查看系统内存，虚拟内存（交换空间）的大小占用情况</p><h3 id="28、VIM"><a href="#28、VIM" class="headerlink" title="28、VIM"></a>28、VIM</h3><p>VIM 是一款功能强大的命令行文本编辑器，在 Linux 中通过 vim 命令可以启动 vim编辑器。</p><p>一般使用 vim + 目标文件路径的形式使用vim。</p><p>如果目标文件存在，则 vim 打开目标文件，如果目标文件不存在，则 vim 新建并打开该文件。</p><p>:q：退出vim编辑器<br>VIM模式</p><p>vim拥有三种模式：</p><h4 id="（1）命令模式（常规模式）"><a href="#（1）命令模式（常规模式）" class="headerlink" title="（1）命令模式（常规模式）"></a>（1）命令模式（常规模式）</h4><p>vim启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。<br>命名模式常用命令如下：<br>i：在光标前插入文本；</p><p>o：在当前行的下面插入新行；</p><p>dd：删除整行；</p><p>yy：将当前行的内容放入缓冲区（复制当前行）</p><p>n+yy：将n行的内容放入缓冲区（复制n行）</p><p>p：将缓冲区中的文本放入光标后（粘贴）</p><p>u：撤销上一个操作</p><p>r：替换当前字符</p><p>&#x2F;：查找关键字</p><h4 id="（2）插入模式"><a href="#（2）插入模式" class="headerlink" title="（2）插入模式"></a>（2）插入模式</h4><p>在命令模式下按 “ i “键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。</p><h4 id="（3）ex模式"><a href="#（3）ex模式" class="headerlink" title="（3）ex模式"></a>（3）ex模式</h4><p>在命令模式中按” : “键可以进入ex模式，光标会移动到底部，在这里可以保存修改或退出vim。<br>ex模式常用命令如下：</p><p>:w 保存当前的修改</p><p>:q 退出</p><p>:wq! 强制退出，保存修改</p><p>:x 保存并退出，相当于:wq</p><p>:set number 显示行号</p><p>:! 系统命令 执行一个系统命令并显示结果</p><p>:sh 切换到命令行，使用ctrl+d切换回vim</p><h3 id="29、软件包管理命令-RPM"><a href="#29、软件包管理命令-RPM" class="headerlink" title="29、软件包管理命令(RPM)"></a>29、软件包管理命令(RPM)</h3><h4 id="1、软件包的安装"><a href="#1、软件包的安装" class="headerlink" title="1、软件包的安装"></a>1、软件包的安装</h4><p>使用RPM命令的安装模式可以将软件包内所有的组件放到系统中的正确路径，安装软件包的命令是：rpm –ivh wu-ftpd-2.6.2-8.i386.rpm<br>i：作用rpm的安装模式，v: 校验文件信息，h: 以＃号显示安装进度。</p><h4 id="2、软件包的删除"><a href="#2、软件包的删除" class="headerlink" title="2、软件包的删除"></a>2、软件包的删除</h4><p>删除模式会将指定软件包的内容全部删除，但并不包括已更改过的配置文件，删除RPM软件包的命令如下：rpm -e wu-ftpd<br>注意：这里必须使用软件名“wu-ftpd”或”wu-ftpd-2.6.2-8而不是使用当初安装时的软件包名.wu-ftpd-2.6.2-8.i386.rpm</p><h4 id="3、软件包升级"><a href="#3、软件包升级" class="headerlink" title="3、软件包升级"></a>3、软件包升级</h4><p>升级模式会安装用户所指定的更新版本，并删除已安装在系统中的相同软件包，升级软件包命令如下：rpm -Uvh wu-ftpd-2.6.2-8.i386.rpm -Uvh：升级参数</p><h4 id="4、软件包更新"><a href="#4、软件包更新" class="headerlink" title="4、软件包更新"></a>4、软件包更新</h4><p>更新模式下，rpm命令会检查在命令行中所指定的软件包是否比系统中原有的软件 包更新。如果情况属实，rpm命令会自动更新指定的软件包；反之，若系统中并没有指定软件包的较旧版本，rpm命令并不会安装此软件包。而在升级模式下，不管系统中是否有较旧的版本，rpm命令都会安装指定的软件包。<br>rpm –Fvhwu-ftpd-2.6.2-8.i386.rpm -Fvh：更新参数</p><h4 id="5、软件包查询"><a href="#5、软件包查询" class="headerlink" title="5、软件包查询"></a>5、软件包查询</h4><p>若要获取RPM软件包的相关信息，可以使用查询模式。使用-q参数可查询一个已 安装的软件包的内容<br>rpm –q wu-ftpd<br>查询软件包所安装的位置：rpm –ql package-name</p><p>rpm –ql xv (l参数：显示文件列表)</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>系统运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux时间校准——Chrony</title>
    <link href="/2025/05/19/Linux%E6%97%B6%E9%97%B4%E6%A0%A1%E5%87%86%E2%80%94%E2%80%94Chrony/"/>
    <url>/2025/05/19/Linux%E6%97%B6%E9%97%B4%E6%A0%A1%E5%87%86%E2%80%94%E2%80%94Chrony/</url>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><code>Chrony</code>是一款开源的网络时间协议（NTP）客户端和服务端软件，旨在提供高精度的时间同步功能。相较于传统的 <code>NTP</code> 实现如 <code>ntpd</code>，<code>Chrony</code>提供了一些改进和优势，包括更快的同步速度、低延迟、低CPU占用和低内存消耗。以下是 <code>Chrony</code>的几个关键特性和使用场景：</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li><strong><code>chronyd</code></strong>：这是一个后台守护进程，负责与时间服务器通信，根据网络条件和系统时钟特性动态调整内核中的系统时钟，以最小化时间和频率误差。它能够智能地应对网络延迟、间歇性连接、时钟漂移以及虚拟环境中的不稳定性。</li><li><strong><code>chronyc</code></strong>：这是一个命令行工具，为用户提供了一个界面来监控<code>Chrony</code>的性能、查看同步状态、调整配置参数以及手动执行某些操作，如立即同步或查看时间源的状态。</li></ul><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li><strong>快速同步</strong>：<code>Chrony</code>使用特殊算法能快速减少系统时钟的偏移和频率误差，非常适合那些非24小时运行的系统，如虚拟机。</li><li><strong>频率调整</strong>：能够更有效地应对时钟频率的快速变化，适合于拥有不稳定时钟的虚拟环境或受节能技术影响的系统。</li><li><strong>节能技术兼容性</strong>：即使在节能技术导致CPU频率变化的系统中也能保持良好的时间同步。</li><li><strong>灵活配置</strong>：支持多种同步源，包括<code>NTP</code>服务器、<code>GPS</code>接收器或其他参考时钟，以及手动时间输入。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li><strong>企业服务器</strong>：确保数据中心内的所有服务器保持时间同步，这对于日志记录、交易时间戳、数据一致性等至关重要。</li><li><strong>桌面系统</strong>：提高个人电脑的时间精度，尤其是对于依赖精确时间的应用，如开发环境、金融交易软件或科学计算。</li><li><strong>嵌入式系统和物联网设备</strong>：在资源有限的设备上，<code>Chrony</code>的低资源消耗特性使其成为理想的选择。</li><li><strong>虚拟环境</strong>：在云服务器或虚拟机中，<code>Chrony</code>能有效应对由于虚拟化带来的时钟漂移问题。</li><li><strong>高精度应用</strong>：科研机构、天文观测、卫星通信等领域，需要高度精确时间同步的应用场景。</li></ol><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前时区</span><br>timedatectl<br><br><span class="hljs-comment">#时区不一致时，时区改为亚洲上海</span><br>timedatectl set-timezone Asia/Shanghai<br><br><span class="hljs-comment"># 1.安装</span><br>yum install chrony<br><br><span class="hljs-comment"># 2.备份原配置文件</span><br><span class="hljs-built_in">cp</span> /etc/chrony.conf /etc/chrony.conf_bak<br><br><span class="hljs-comment"># 3.修改配置文件</span><br>vim /etc/chrony.conf<br><span class="hljs-comment">#####################################################</span><br><span class="hljs-comment"># 使用阿里云NTP服务器（国内推荐）</span><br>server ntp.aliyun.com iburst<br><span class="hljs-comment"># 使用腾讯云NTP服务器</span><br>server ntp.tencent.com iburst<br><span class="hljs-comment"># 使用公共NTP池</span><br>pool pool.ntp.org iburst<br><br><span class="hljs-comment"># 允许其他客户端同步时间（可选）</span><br><span class="hljs-comment"># allow 192.168.135.0/24</span><br><br><span class="hljs-comment"># 启用硬件时间同步</span><br>rtcsync<br><br><span class="hljs-comment"># 记录时间偏差日志</span><br>logdir /var/log/chrony<br><span class="hljs-comment">#####################################################</span><br><br><span class="hljs-comment"># 4.启动服务</span><br><span class="hljs-comment"># 设置开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> chronyd<br><span class="hljs-comment"># 重启服务</span><br>systemctl restart chronyd<br><span class="hljs-comment"># 查看状态</span><br>systemctl status chronyd<br><span class="hljs-comment"># 5.验证同步情况</span><br>chronyc sources -v<br><span class="hljs-comment"># 查看本机时间</span><br><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure><p><strong>systemctl status chronyd</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1-142 etc]# systemctl status chronyd<br>● chronyd.service - NTP client/server<br>     Loaded: loaded (/usr/lib/systemd/system/chronyd.service; enabled; preset: enabled)<br>     Active: active (running) since Mon 2025-05-19 20:15:03 CST; 13s ago<br>       Docs: man:chronyd(8)<br>             man:chrony.conf(5)<br>   Main PID: 13058 (chronyd)<br>      Tasks: 1 (<span class="hljs-built_in">limit</span>: 21564)<br>     Memory: 672.0K ()<br>     CGroup: /system.slice/chronyd.service<br>             └─13058 /usr/sbin/chronyd<br><br>5月 19 20:15:03 node1-142 systemd[1]: Starting NTP client/server...<br>5月 19 20:15:03 node1-142 chronyd[13058]: chronyd version 4.3 starting (+CMDMON +NTP +REFCLOCK +RTC +PRIVDROP +SCFILTER +SIGND &gt;<br>5月 19 20:15:03 node1-142 chronyd[13058]: Frequency 0.000 +/- 1000000.000 ppm <span class="hljs-built_in">read</span> from /var/lib/chrony/drift<br>5月 19 20:15:03 node1-142 systemd[1]: Started NTP client/server.<br>5月 19 20:15:07 node1-142 chronyd[13058]: Selected <span class="hljs-built_in">source</span> 203.107.6.88 (ntp.aliyun.com)  <span class="hljs-comment"># 这里说明已经索引到ntp服务器了</span><br></code></pre></td></tr></table></figure><p> <strong>chronyc sources -v</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1-142 etc]# chronyc sources -v<br><br>  .-- Source mode  <span class="hljs-string">&#x27;^&#x27;</span> = server, <span class="hljs-string">&#x27;=&#x27;</span> = peer, <span class="hljs-string">&#x27;#&#x27;</span> = <span class="hljs-built_in">local</span> clock.<br> / .- Source state <span class="hljs-string">&#x27;*&#x27;</span> = current best, <span class="hljs-string">&#x27;+&#x27;</span> = combined, <span class="hljs-string">&#x27;-&#x27;</span> = not combined,<br>| /             <span class="hljs-string">&#x27;x&#x27;</span> = may be <span class="hljs-keyword">in</span> error, <span class="hljs-string">&#x27;~&#x27;</span> = too variable, <span class="hljs-string">&#x27;?&#x27;</span> = unusable.<br>||                                                 .- xxxx [ yyyy ] +/- zzzz<br>||      Reachability register (octal) -.           |  xxxx = adjusted offset,<br>||      Log2(Polling interval) --.      |          |  yyyy = measured offset,<br>||                                \     |          |  zzzz = estimated error.<br>||                                 |    |           \<br><br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br><br>^* 203.107.6.88                  2   6    37    21    +34us[ +505us] +/-   25ms<br>[root@node1-142 etc]# <span class="hljs-built_in">date</span><br>2025年 05月 19日 星期一 20:17:03 CST<br></code></pre></td></tr></table></figure><p><em><strong>以上为以公网ntp为例</strong></em></p><h2 id="三、相关指令"><a href="#三、相关指令" class="headerlink" title="三、相关指令"></a>三、相关指令</h2><h3 id="（1）选项说明"><a href="#（1）选项说明" class="headerlink" title="（1）选项说明"></a>（1）选项说明</h3><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-4</td><td align="center">仅解析 IPv4 地址并创建 IPv4 套接字。</td></tr><tr><td align="center">-6</td><td align="center">仅解析 IPv6 地址并创建 IPv6 套接字。</td></tr><tr><td align="center"><code>-f file</code></td><td align="center">指定配置文件路径（默认为 <code>/etc/chrony.conf</code>）。</td></tr><tr><td align="center">-n</td><td align="center">不分离终端，保持在前台运行。</td></tr><tr><td align="center">-d</td><td align="center">不分离终端，将日志输出到终端而非 <code>syslog</code>。若编译支持调试，则重复使用 <code>-d</code> 可显示调试信息。</td></tr><tr><td align="center"><code>-l file</code></td><td align="center">将日志输出到指定文件而非 <code>syslog</code> 或终端。</td></tr><tr><td align="center">-q</td><td align="center">快速同步时间后退出（需 root 权限）。</td></tr><tr><td align="center">-Q</td><td align="center">仅显示时间偏移，不调整时间（无需 root 权限）。</td></tr><tr><td align="center">-r</td><td align="center">重新加载并删除服务器&#x2F;参考时钟的历史数据文件（需 <code>dumpdir</code> 指定目录）。</td></tr><tr><td align="center">-R</td><td align="center">忽略 <code>initstepslew</code> 和 <code>makestep</code> 指令（常与 <code>-r</code> 结合用于重启）。</td></tr><tr><td align="center">-s</td><td align="center">从硬件时钟（RTC）或 <code>driftfile</code> 的最后修改时间设置系统时间（Linux 系统支持）。</td></tr><tr><td align="center"><code>-t timeout</code></td><td align="center">设置超时时间（秒），超时后退出。</td></tr><tr><td align="center"><code>-u user</code></td><td align="center">启动后切换为指定用户（默认 <code>chrony</code>），需依赖 <code>libcap</code>（Linux）。</td></tr><tr><td align="center"><code>-F level</code></td><td align="center">启用 seccomp 过滤器（Linux 专用），限制系统调用。</td></tr><tr><td align="center">-P priority</td><td align="center">在 Linux 中使用实时调度器（SCHED_FIFO），优先级 0-100；在 macOS 中启用时间约束策略。</td></tr><tr><td align="center">-m</td><td align="center">锁定进程到内存，避免分页（Linux 专用）。</td></tr><tr><td align="center">-x</td><td align="center">禁用系统时钟控制（仅用于 NTP 服务器模式，不调整本地时间）。</td></tr><tr><td align="center"><code>-v</code></td><td align="center">显示版本号并退出。</td></tr></tbody></table><h3 id="（2）配置文件-etc-chrony-conf"><a href="#（2）配置文件-etc-chrony-conf" class="headerlink" title="（2）配置文件 (&#x2F;etc&#x2F;chrony.conf)"></a>（2）配置文件 (&#x2F;etc&#x2F;chrony.conf)</h3><p>关键配置项包括：</p><table><thead><tr><th>server：</th><th><strong>指定 NTP 服务器（如 <code>server 0.pool.ntp.org iburst</code>）。</strong></th></tr></thead><tbody><tr><td><strong>driftfile：</strong></td><td>记录系统时钟偏差的文件路径（如 &#x2F;var&#x2F;lib&#x2F;chrony&#x2F;drift）。</td></tr><tr><td><strong>makestep：</strong></td><td>允许在首次启动时快速调整时间（如 makestep 1.0 3&#x2F;7200）。</td></tr><tr><td><strong>rtcsync：</strong></td><td>启用内核每 11 分钟同步硬件时钟（RTC）。</td></tr><tr><td><strong>logdir：</strong></td><td>指定日志目录（如 &#x2F;var&#x2F;log&#x2F;chrony）。</td></tr></tbody></table><h3 id="（3）使用场景示例："><a href="#（3）使用场景示例：" class="headerlink" title="（3）使用场景示例："></a>（3）使用场景示例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.启动并后台运行：</span><br>systemctl start chronyd<br>systemctl <span class="hljs-built_in">enable</span> chronyd<br><br><span class="hljs-comment"># 2.快速同步时间：</span><br>chronyd -q <span class="hljs-string">&#x27;server time.example.com iburst&#x27;</span><br><br><span class="hljs-comment"># 3.查看版本与退出：</span><br>chronyd -v<br><br><span class="hljs-comment"># 4.从硬件时钟设置时间：</span><br>chronyd -s<br><br><span class="hljs-comment"># 5.调试模式输出到终端：</span><br>chronyd -d<br><br><span class="hljs-comment"># 6.查看 Chrony日志</span><br><span class="hljs-comment"># 默认的日志路径在 /var/log/chrony/chronyd.log</span><br><span class="hljs-built_in">cat</span> /var/log/chrony/chronyd.log<br><br><span class="hljs-comment"># 或使用 journalctl 查看实时日志：</span><br>journalctl -u chronyd -f<br><br></code></pre></td></tr></table></figure><h2 id="四、内网环境下服务配置"><a href="#四、内网环境下服务配置" class="headerlink" title="四、内网环境下服务配置"></a>四、内网环境下服务配置</h2><p>其他的先看一下稀土掘金里的收藏文章</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>系统运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>普罗米修斯(prometheus)</title>
    <link href="/2025/05/16/%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF-prometheus/"/>
    <url>/2025/05/16/%E6%99%AE%E7%BD%97%E7%B1%B3%E4%BF%AE%E6%96%AF-prometheus/</url>
    
    <content type="html"><![CDATA[<h1 id="Prometheus-普罗米修斯-监控系统"><a href="#Prometheus-普罗米修斯-监控系统" class="headerlink" title="Prometheus(普罗米修斯)监控系统"></a>Prometheus(普罗米修斯)监控系统</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够安装 Prometheus 服务器  </li><li>能够通过安装 <code>node_exporter</code> 监控远程 Linux  </li><li>能够通过安装 <code>mysqld_exporter</code> 监控远程 MySQL 数据库  </li><li>能够安装 Grafana  </li><li>能够在 Grafana 添加 Prometheus 数据源  </li><li>能够在 Grafana 添加监控 CPU 负载的图形  </li><li>能够在 Grafana 图形显示 MySQL 监控数据  </li><li>能够通过 Grafana + OneAlert 实现报警</li></ul><hr><h2 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h2><p>某某某公司是一家电商网站，由于业务快速发展，需对现有机器进行业务监控，责成运维部门实施此项目。</p><hr><h2 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h2><ol><li><strong>部署监控服务器</strong>，实现 7x24 实时监控。  </li><li><strong>设计监控系统</strong>，针对业务及研发部门设计监控项和触发器，提出合理意见。  </li><li><strong>问题预警机制</strong>，对可能出现的问题及时告警并形成严格处理机制。  </li><li><strong>告警分级系统</strong>：  <ul><li>一级报警：电话通知  </li><li>二级报警：微信通知  </li><li>三级报警：邮件通知</li></ul></li><li><strong>异地集中监控</strong>：处理服务器异地监控问题，K8S 内部使用 Prometheus。</li></ol><hr><h2 id="任务分析"><a href="#任务分析" class="headerlink" title="任务分析"></a>任务分析</h2><p>为什么要监控？<br>答:实时收集数据，通过报警及时发现问题，及时处理。数据为优化也可以<br>提供依据。<br>监控四要素：</p><p>​监控对象: [主机状态 服务 资源 页面，url]</p><p>​用什么监控 :[zabbix-server zabbix-agent]&#x3D;&gt;普罗米修斯监控</p><p>​什么时间监控 :[7x24 5x8]</p><p>​报警给谁: [管理员]</p><h2 id="项目选型"><a href="#项目选型" class="headerlink" title="项目选型"></a>项目选型</h2><table><thead><tr><th>工具</th><th>特点</th><th>官网地址</th></tr></thead><tbody><tr><td><strong>MRTG</strong>(Multi Router Traﬃc Grapher)</td><td>通过snmp协议得到设备的流量信息，并以包含PNG格式的图形的HTML文档方式显示给用户。</td><td></td></tr><tr><td><strong>Cacti</strong>(仙人掌)</td><td>用php语言实现的一个软件，它的主要功能是用snmp服务获取数据，然后用rrdtool储存和更新数据。</td><td><a href="https://www.cacti.net/">https://www.cacti.net/</a></td></tr><tr><td><strong>ntop</strong></td><td></td><td>:<a href="https://www.ntop.org/">https://www.ntop.org/</a></td></tr><tr><td><strong>Nagios</strong></td><td>跨平台、插件多、报警功能强大</td><td><a href="https://www.nagios.org/">https://www.nagios.org/</a></td></tr><tr><td><strong>centreon</strong></td><td>底层使用的就是nagios。是一个nagios整合版软件。</td><td><a href="https://www.centreon.com/">https://www.centreon.com/</a></td></tr><tr><td><strong>ganglia</strong></td><td>设计用于测量数以千计的节点,资源消耗非常小。</td><td><a href="http://ganglia.info/">http://ganglia.info/</a></td></tr><tr><td><strong>open-falcon</strong></td><td>小米发布的运维监控软件，高效率，高可用。时间较短，用户基数小。</td><td><a href="http://open-falcon.org/">http://open-falcon.org/</a></td></tr><tr><td><strong>Prometheus</strong></td><td>基于时间序列的容器监控解决方案，适合 Docker 和 Kubernetes</td><td><a href="https://prometheus.io/">https://prometheus.io/</a></td></tr><tr><td><strong>Zabbix</strong></td><td>跨平台、多条件告警、API 接口丰富</td><td><a href="https://www.zabbix.com/">https://www.zabbix.com/</a></td></tr></tbody></table><p><em>综合分析：Prometheus比较适合公司的监控需求</em></p><hr><h2 id="一、Prometheus-概述"><a href="#一、Prometheus-概述" class="headerlink" title="一、Prometheus 概述"></a>一、Prometheus 概述</h2><p>Prometheus(由go语言(golang)开发)是一套开源的监控&amp;报警&amp;时间序列数据库的组合。适合监控docker容器。因为kubernetes(俗称k8s)的流行带动了prometheus的发展。<br><a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a></p><h2 id="二、时间序列数据"><a href="#二、时间序列数据" class="headerlink" title="二、时间序列数据"></a>二、时间序列数据</h2><h3 id="1、什么是序列数据"><a href="#1、什么是序列数据" class="headerlink" title="1、什么是序列数据"></a>1、什么是序列数据</h3><p>时间序列数据(TimeSeries Data) :按照时间顺序记录系统、设备状态变化<br>的数据被称为时序数据。<br>应用的场景很多,如：</p><ul><li>无人驾驶车辆运行中要记录的经度，纬度，速度，方向，旁边物体的距离等等。每时每刻都要将数据记录下来做分析。</li><li>某一个地区的各车辆的行驶轨迹数据</li><li>传统证券行业实时交易数据</li><li>实时运维监控数据等</li></ul><h3 id="2、时间序列数据特点"><a href="#2、时间序列数据特点" class="headerlink" title="2、时间序列数据特点"></a>2、时间序列数据特点</h3><ul><li>性能好</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">关系型数据库对于大规模数据的处理性能糟糕。NOSQL可以比较好的处理<br>大规模数据，让依然比不上时间序列数据库。<br></code></pre></td></tr></table></figure><ul><li>存储成本低</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">高效的压缩算法，节省存储空间，有效降低IO<br>Prometheus有着非常高效的时间序列数据存储方法，每个采样数据仅仅占用3.5byte左右空间，上百万条时间序列，30秒间隔，保留60天，大概花了<br>200多G（来自官方数据)<br></code></pre></td></tr></table></figure><h3 id="3、Prometheus的主要特征"><a href="#3、Prometheus的主要特征" class="headerlink" title="3、Prometheus的主要特征"></a>3、Prometheus的主要特征</h3><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><ul><li><strong>多维度数据模型</strong>  </li><li><strong>灵活的查询语言（PromQL）</strong>  </li><li><strong>不依赖分布式存储，单个服务器节点是自主的</strong></li><li><strong>以HTTP方式，通过pull模型拉去时间序列数据</strong></li><li><strong>Pull 模型采集数据</strong>（支持 Push 网关）**[**也可以通过中间网关支持push模型  <strong>]</strong></li><li><strong>通过服务发现或者静态配置，来发现目标服务对象</strong></li><li><strong>支持多种多样的图表和界面展示</strong></li></ul><h3 id="4-架构图"><a href="#4-架构图" class="headerlink" title="4.架构图"></a>4.架构图</h3><p><img src="/img/prometheus/1.png"></p><h2 id="三、实验环境准备"><a href="#三、实验环境准备" class="headerlink" title="三、实验环境准备"></a>三、实验环境准备</h2><p><img src="/img/prometheus/2.png"></p><h4 id="（1）静态ip-要求能上外网"><a href="#（1）静态ip-要求能上外网" class="headerlink" title="（1）静态ip(要求能上外网)"></a><strong>（1）静态ip(要求能上外网)</strong></h4><h4 id="（2）主机名"><a href="#（2）主机名" class="headerlink" title="（2）主机名"></a><strong>（2）主机名</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">各自配置好主机名<br><span class="hljs-comment">#hostnamectlset-hostname--staticserver.cluster.com</span><br>三台都互相绑定IP与主机名<br><span class="hljs-comment">#vim/etc/hosts</span><br>10.1.1.13server.cluster.com<br>10.1.1.14agent1.cluster.com<br>10.1.1.15grafana.cluster.com<br></code></pre></td></tr></table></figure><h4 id="（3）时间同步-时间同步一定要确认一下"><a href="#（3）时间同步-时间同步一定要确认一下" class="headerlink" title="（3）时间同步(时间同步一定要确认一下)"></a><strong>（3）时间同步(时间同步一定要确认一下)</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前时区</span><br>timedatectl<br><br><span class="hljs-comment">#时区不一致时，时区改为亚洲上海</span><br>timedatectl set-timezone Asia/Shanghai<br><br><span class="hljs-comment">############# Chrony服务(联网时进行时间校正) ################</span><br><span class="hljs-comment"># 1.安装</span><br>yum intall chrony<br><br><span class="hljs-comment"># 2.配置修改</span><br>vim /etc/chrony.conf<br><br><span class="hljs-comment">######### 常见配置示例 ##########</span><br><span class="hljs-comment"># 使用阿里云NTP服务器（国内推荐）</span><br>server ntp.aliyun.com iburst<br><span class="hljs-comment"># 使用腾讯云NTP服务器</span><br>server ntp.tencent.com iburst<br><span class="hljs-comment"># 使用公共NTP池</span><br>pool pool.ntp.org iburst<br><br><span class="hljs-comment"># 允许其他客户端同步时间（可选）</span><br><span class="hljs-comment"># allow 192.168.135.0/24</span><br><br><span class="hljs-comment"># 启用硬件时间同步</span><br>rtcsync<br><br><span class="hljs-comment"># 记录时间偏差日志</span><br>logdir /var/log/chrony<br><br><span class="hljs-comment">##############################</span><br><br><span class="hljs-comment"># 3.设置开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> chronyd<br><span class="hljs-comment"># 4.重启服务</span><br>systemctl restart chronyd<br><span class="hljs-comment"># 5.查看状态</span><br>systemctl status chronyd<br><span class="hljs-comment"># 6.验证同步情况</span><br>chronyc sources -v<br><span class="hljs-comment"># 7.查看本机时间</span><br><span class="hljs-built_in">date</span><br><br><span class="hljs-comment"># 查看硬件时间</span><br>hwclock --show<br><span class="hljs-comment"># 修改硬件时间</span><br>hwclock --<span class="hljs-built_in">set</span> --<span class="hljs-built_in">date</span> <span class="hljs-string">&#x27;20250521 14:38:09&#x27;</span><br>hwclock -w //将系统时间同步到硬件时间，或者输入 hwclock --systohc<br>hwclock -s //将硬件时间同步到系统时间<br></code></pre></td></tr></table></figure><h4 id="关键参数说明"><a href="#关键参数说明" class="headerlink" title="关键参数说明"></a><strong>关键参数说明</strong></h4><ul><li><code>iburst</code>: 加快初始同步速度。</li><li><code>rtcsync</code>: 将系统时间同步到硬件时钟（RTC）。</li><li><code>allow</code>: 允许指定网络段的客户端同步时间。</li></ul><h4 id="（4）关闭防火墙-selinux"><a href="#（4）关闭防火墙-selinux" class="headerlink" title="（4）关闭防火墙,selinux"></a><strong>（4）关闭防火墙,selinux</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># systemctl stop firewalld</span><br><span class="hljs-comment"># systemctl disable firewalld</span><br><span class="hljs-comment"># iptables-F</span><br></code></pre></td></tr></table></figure><h3 id="1、安装prometheus（141）"><a href="#1、安装prometheus（141）" class="headerlink" title="1、安装prometheus（141）"></a>1、安装prometheus（141）</h3><p>从<a href="https://prometheus.io/download/%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%89%88%E6%9C%AC%EF%BC%8C%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%98%E7%BD%91%E6%8F%90%E4%BE%9B%E7%9A%84%E6%98%AF%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%89%88%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%B0%B1%E8%83%BD%E7%94%A8%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E7%BC%96%E8%AF%91">https://prometheus.io/download/下载相应版本，安装到服务器上官网提供的是二进制版，解压就能用，不需要编译</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server~]#tar xf prometheus-2.5.0.linux-amd64.tar.gz -C /usr/local/<br>[root@server~]#<span class="hljs-built_in">mv</span> /usr/local/prometheus-2.5.0.linux-amd64/ /usr/local/prometheus<br><br>直接使用默认配置文件启动<br>[root@server~]#/usr/local/prometheus/prometheus --config.file=<span class="hljs-string">&quot;/usr/local/prometheus/prometheus.yml&quot;</span><br><br>确认端口(9090)<br>[root@server~]#lsof-i:9090<br></code></pre></td></tr></table></figure><h3 id="2、prometheus界面"><a href="#2、prometheus界面" class="headerlink" title="2、prometheus界面"></a><strong>2、prometheus界面</strong></h3><p>通过浏览器访问 http:&#x2F;&#x2F;服务器IP:9090 就可以访问到prometheus的主界面。</p><p>默认只监控了本机一台，点Status –》点Targets –》可以看到只监控了本机。</p><p><img src="/img/prometheus/3.png" alt="3"></p><h3 id="3、主机数据展示"><a href="#3、主机数据展示" class="headerlink" title="3、主机数据展示"></a>3、主机数据展示</h3><p>通过http:&#x2F;&#x2F;服务器IP:9090&#x2F;metrics可以查看到监控的数据</p><p>在web主界面可以通过关键字查询监控项</p><p><img src="/img/prometheus/4.png" alt="4"></p><h3 id="4、监控远程Linux主机（142）"><a href="#4、监控远程Linux主机（142）" class="headerlink" title="4、监控远程Linux主机（142）"></a>4、监控远程Linux主机（142）</h3><p>①在远程linux主机(被监控端agent1)上安装node_exporter组件下载地址:<a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@agent1~]#tar xf node_exporter-0.16.0.linux-amd64.tar.gz -C /usr/local/<br>[root@agent1~]#<span class="hljs-built_in">mv</span> /usr/local/node_exporter-0.16.0.linux-amd64/ /usr/local/node_exporter<br><span class="hljs-comment"># 里面就一个启动命令node_exporter,可以直接使用此命令启动</span><br>[root@agent1~]#<span class="hljs-built_in">ls</span> /usr/local/node_exporter/<br>LICENSE node_exporter NOTICE<br>[root@agent1~]#<span class="hljs-built_in">nohup</span> sh /usr/local/node_exporter/node_exporter &amp;<br></code></pre></td></tr></table></figure><p>扩展:nohup命令:如果把启动node_exporter的终端给关闭,那么进程也会随之关闭。nohup命令会帮你解决这个问题。<br>②通过浏览器访问http:&#x2F;&#x2F;被监控端IP:9100&#x2F;metrics就可以查看到node_exporter在被监控端收集的监控信息</p><p>③回到prometheus服务器的配置文件里添加被监控机器的配置段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在主配置文件最后加上下面三行</span><br>[root@server~]#vim/usr/local/prometheus/prometheus.yml<br>-job_name:<span class="hljs-string">&#x27;agent1&#x27;</span><br>表被监控的机器<span class="hljs-comment"># 取一个job名称来代表被监控的机器</span><br> static_configs:<br> -targets:[<span class="hljs-string">&#x27;10.1.1.14:9100&#x27;</span>]<span class="hljs-comment"># 这里改成被监控机器</span><br>的IP，后面端口接9100<br><br><span class="hljs-comment"># 改完配置文件后,重启服务</span><br>[root@server~]#pkill prometheus<br>[root@server~]#lsof-i:9090<span class="hljs-comment"># 确认端口没有进程占用</span><br><br>[root@server~]#/usr/local/prometheus/prometheus --config.file=<span class="hljs-string">&quot;/usr/local/prometheus/prometheus.yml&quot;</span><br><br>[root@server~]#lsof-i:9090 <span class="hljs-comment"># 确认端口被占用，说明重启成功</span><br></code></pre></td></tr></table></figure><p>④回到web管理界面–》点Status –》点Targets –》可以看到多了一台监控目标</p><p>练习:加上本机prometheus的监控<br>答:在本机安装node_exporter，也使用上面的方式监控起来。</p><h3 id="5、监控远程MySQL（142）"><a href="#5、监控远程MySQL（142）" class="headerlink" title="5、监控远程MySQL（142）"></a>5、监控远程MySQL（142）</h3><p>①在被管理机agent1上安装mysqld_exporter组件</p><p>下载地址:<a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装mysqld_exporter组件</span><br>[root@agent1~]# tar xf mysqld_exporter-0.11.0.linux-amd64.tar.gz -C /usr/local/<br>[root@agent1~]#<span class="hljs-built_in">mv</span> /usr/local/mysqld_exporter-0.11.0.linux-amd64/ /usr/local/mysqld_exporter<br>[root@agent1~]#<span class="hljs-built_in">ls</span> /usr/local/mysqld_exporter/<br>LICENSE mysqld_exporter NOTICE<br><span class="hljs-comment"># 安装mariadb数据库,并授权</span><br>[root@agent1~]#yum install mariadb-server mariadb -y<br>[root@agent1~]#systemctl restart mariadb<br>[root@agent1~]#systemctl <span class="hljs-built_in">enable</span> mariadb<br>[root@agent1~]#mysql<br><span class="hljs-comment"># 创建用户，并设置密码</span><br>MariaDB[(none)]&gt;CREATE USER <span class="hljs-string">&#x27;mysql_monitor&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-comment"># 给用户授权</span><br>MariaDB[(none)]&gt;GRANT SELECT, REPLICATION CLIENT, PROCESS ON *.* TO <span class="hljs-string">&#x27;mysql_monitor&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br>(注意:授权ip为localhost，因为不是prometheus服务器来直接找mariadb<br>获取数据，而是prometheus服务器找mysql_exporter,mysql_exporter<br>再找mariadb。所以这个localhost是指的mysql_exporter的IP)<br><br><span class="hljs-comment"># 刷新权限</span><br>MariaDB[(none)]&gt;flush privileges;<br>MariaDB[(none)]&gt;quit<br><br><span class="hljs-comment"># 创建一个mariadb配置文件，写上连接的用户名与密码(和上面的授权的用户名和密码要对应)</span><br>[root@agent1~]#vim /usr/local/mysqld_exporter/.my.cnf<br>[client]<br>user=mysql_monitor<br>password=123<br><br><span class="hljs-comment"># 启动mysqld_exporter</span><br>[root@agent1~]#<span class="hljs-built_in">nohup</span><br>/usr/local/mysqld_exporter/mysqld_exporter --config.my-cnf=/usr/local/mysqld_exporter/.my.cnf&amp;<br>确认端口(9104)<br>[root@agent1~]#lsof -i :9104<br></code></pre></td></tr></table></figure><p>②回到prometheus服务器的配置文件里添加被监控的mariadb的配置段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">在主配置文件最后再加上下面三行<br>[root@server~]#vim /usr/local/prometheus/prometheus.yml<br><br>-job_name:<span class="hljs-string">&#x27;agent1_mariadb&#x27;</span><span class="hljs-comment"># 取一个job名称来代表被监控的mariadb</span><br>static_configs:<br>-targets:[<span class="hljs-string">&#x27;10.1.1.14:9104&#x27;</span>]<span class="hljs-comment"># 这里改成被监控机器的IP，后面端口接9104</span><br><br>改完配置文件后,重启服务<br>[root@server~]#pkill prometheus<br>[root@server~]#lsof -i:9090<br>[root@server~]#/usr/local/prometheus/prometheus --config.file=<span class="hljs-string">&quot;/usr/local/prometheus/prometheus.yml&quot;</span><br>[root@server~]#lsof -i:9090<br></code></pre></td></tr></table></figure><p>③回到web管理界面–》点Status –》点Targets –》可以看到监控<br>mariadb了</p><p><img src="/img/prometheus/5.png" alt="5"></p><p><img src="/img/prometheus/6.png" alt="6"></p><h2 id="四、Grafana可视化图形工具（143）"><a href="#四、Grafana可视化图形工具（143）" class="headerlink" title="四、Grafana可视化图形工具（143）"></a>四、Grafana可视化图形工具（143）</h2><h3 id="1、什么是Grafana"><a href="#1、什么是Grafana" class="headerlink" title="1、什么是Grafana"></a>1、什么是Grafana</h3><p>Grafana是一个开源的度量分析和可视化工具，可以通过将采集的数据分析，查询，然后进行可视化的展示,并能实现报警。</p><p><img src="/img/prometheus/7.png" alt="7"></p><p>网址:<a href="https://grafana.com/">https://grafana.com/</a></p><h3 id="2、使用Grafana连接Prometheus"><a href="#2、使用Grafana连接Prometheus" class="headerlink" title="2、使用Grafana连接Prometheus"></a>2、使用Grafana连接Prometheus</h3><p>① 在grafana服务器上安装grafana<br>下载地址:<a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 我这里选择的rpm包，下载后直接rpm-ivh安装就OK</span><br>[root@grafana~]#rpm -ivh /root/Desktop/grafana-5.3.4-1.x86_64.rpm<br><span class="hljs-comment"># 启动服务</span><br>[root@grafana~]#systemctl start grafana-server<br>[root@grafana~]#systemctl <span class="hljs-built_in">enable</span> grafana-server<br><span class="hljs-comment"># 确认端口(3000)</span><br>[root@grafana~]#lsof -i :3000<br></code></pre></td></tr></table></figure><p>②通过浏览器访问http:&#x2F;&#x2F; grafana服务器IP:3000就到了登录界面,使用默认的admin用户,admin密码就可以登陆了</p><p><img src="/img/prometheus/8.png" alt="8"></p><p>③下面我们把prometheus服务器收集的数据做为一个数据源添加到grafana,让grafana可以得到prometheus的数据。</p><p><img src="/img/prometheus/9.png" alt="9"></p><p><img src="/img/prometheus/10.png" alt="10"></p><p>④然后为添加好的数据源做图形显示</p><p><img src="/img/prometheus/11.png" alt="11"></p><p><img src="/img/prometheus/12.png" alt="12"></p><p><img src="/img/prometheus/13.png" alt="13"></p><p><img src="/img/prometheus/14.png" alt="14"></p><p>⑤保存</p><p><img src="/img/prometheus/15.png" alt="15"></p><p>⑥最后在dashboard可以查看到</p><p><img src="/img/prometheus/16.png" alt="16"></p><p>⑦匹配条件显示</p><p><img src="/img/prometheus/17.png" alt="17"></p><h3 id="3、Grafana图形显示MySQL监控数据"><a href="#3、Grafana图形显示MySQL监控数据" class="headerlink" title="3、Grafana图形显示MySQL监控数据"></a>3、Grafana图形显示MySQL监控数据</h3><p>① 在grafana上修改配置文件,并下载安装mysql监控的dashboard（包含<br>相关json文件，这些json文件可以看作是开发人员开发的一个监控模板)<br>参考网址:<a href="https://github.com/percona/grafana-dashboards">https://github.com/percona/grafana-dashboards</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在grafana配置文件里最后加上以下三行</span><br>[root@grafana~]#vim /etc/grafana/grafana.ini<br><br>[dashboards.json]<br>enabled=<span class="hljs-literal">true</span><br>path=/var/lib/grafana/dashboards<br><br>[root@grafana~]#<span class="hljs-built_in">cd</span> /var/lib/grafana/<br>[root@grafanagrafana]#git <span class="hljs-built_in">clone</span> https://github.com/percona/grafana-dashboards.git<br>[root@grafanagrafana]#<span class="hljs-built_in">cp</span> -r grafana-dashboards/dashboards/ /var/lib/grafana/<br><br><span class="hljs-comment"># 重启grafana服务</span><br>[root@grafanagrafana]#systemctl restart grafana-server<br></code></pre></td></tr></table></figure><p>②在grafana图形界面导入相关json文件</p><p><img src="/img/prometheus/18.png" alt="18"></p><p>③点import导入后,报prometheus数据源找不到,因为这些json文件里默认要找的就是叫Prometheus的数据源，但我们前面建立的数据源却是叫<br>prometheus_data(坑啊)<br>那么请自行把原来的prometheus_data源改名为Prometheus即可(注意:<br>第一个字母P是大写)<br>然后再回去刷新,就有数据了(如下图所示)</p><p><img src="/img/prometheus/19.png" alt="19"></p><p>④过段时间再看，就会有数据了(如下图所示)</p><p><img src="/img/prometheus/20.png" alt="20"></p><h3 id="4、Grafana-onealert报警"><a href="#4、Grafana-onealert报警" class="headerlink" title="4、Grafana+onealert报警"></a>4、Grafana+onealert报警</h3><p>prometheus报警需要使用alertmanager这个组件，而且报警规则需要手<br>动编写(对运维来说不友好)。所以我这里选用grafana+onealert报警。注意:实现报警前把所有机器时间同步再检查一遍。</p><p>①先在onealert里添加grafana应用(申请onealert账号在zabbix已经讲过)</p><p><img src="/img/prometheus/21.png" alt="21"></p><p>②配置通知策略</p><p><img src="/img/prometheus/22.png" alt="22"></p><p>③在grafana增加通知通道</p><p><img src="/img/prometheus/23.png" alt="23"></p><p><img src="/img/prometheus/25.png" alt="24"></p><p>④现在可以去设置一个报警来测试了(这里以我们前面加的cpu负载监控来做测试)</p><p><img src="/img/prometheus/26.png" alt="25"></p><p><img src="/img/prometheus/27.png" alt="26"></p><p>⑤保存后就可以测试了<br>如果agent1上的cpu负载还没有到0.5，你可以试试0.1,或者运行一些程序把agent1负载调大。最终能测试报警成功。</p><p><img src="/img/prometheus/28.png" alt="27"></p><p>最终的邮件报警效果：</p><p><img src="/img/prometheus/29.png" alt="28"></p><p>测试mysql链接数报警:</p><p><img src="/img/prometheus/30.png" alt="29"></p><p><img src="/img/prometheus/31.png" alt="30"></p><p><img src="/img/prometheus/32.png" alt="31"></p><h3 id="5、总结报警不成功的可能原因"><a href="#5、总结报警不成功的可能原因" class="headerlink" title="5、总结报警不成功的可能原因"></a>5、总结报警不成功的可能原因</h3><ol><li>各服务器之间时间不同步，这样时序数据会出问题，也会造成报警出问题</li><li>必须写通知内容，留空内容是不会发报警的</li><li>修改完报警配置后，记得要点右上角的保存</li><li>保存配置后，需要由OK状态变为alerting状态才会报警(也就是说，你配置保存后，就已经是alerting状态是不会报警的)</li><li>grafana与onealert通信有问题</li></ol><h3 id="6、课外扩展"><a href="#6、课外扩展" class="headerlink" title="6、课外扩展"></a>6、课外扩展</h3><p>prometheus目前还在发展中，很多相应的监控都需要开发。但在官网的<br>dashboard库中,也有一些官方和社区开发人员开发的dashboard可以直接拿来用。</p><p><img src="/img/prometheus/33.png" alt="32"></p><p>示例：</p><p><img src="/img/prometheus/34.png" alt="33"></p><p><em><strong>不一定版本兼容,如果不兼容，可多试几个不同版本</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>系统运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx负载均衡</title>
    <link href="/2025/05/15/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2025/05/15/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-基础负载均衡配置"><a href="#1-基础负载均衡配置" class="headerlink" title="1. 基础负载均衡配置"></a><strong>1. 基础负载均衡配置</strong></h3><p>在<code>nginx.conf</code>的<code>http</code>块中添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">http &#123;<br>    upstream backend &#123;<br>        <span class="hljs-comment"># 默认轮询策略</span><br>        server 192.168.1.101:8080;<br>        server 192.168.1.102:8080;<br>        server 192.168.1.103:8080;<br>    &#125;<br><br>    server &#123;<br>        listen 80;<br>        location / &#123;<br>            proxy_pass http://backend;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2-负载均衡策略详解"><a href="#2-负载均衡策略详解" class="headerlink" title="2. 负载均衡策略详解"></a><strong>2. 负载均衡策略详解</strong></h3><h4 id="2-1-加权轮询（Weighted-Round-Robin）"><a href="#2-1-加权轮询（Weighted-Round-Robin）" class="headerlink" title="2.1 加权轮询（Weighted Round Robin）"></a><strong>2.1 加权轮询（Weighted Round Robin）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    server 192.168.1.101:8080 weight=5;  <span class="hljs-comment"># 50%流量</span><br>    server 192.168.1.102:8080 weight=3;  <span class="hljs-comment"># 30%流量</span><br>    server 192.168.1.103:8080 weight=2;  <span class="hljs-comment"># 20%流量</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-最少连接（Least-Connections）"><a href="#2-2-最少连接（Least-Connections）" class="headerlink" title="2.2 最少连接（Least Connections）"></a><strong>2.2 最少连接（Least Connections）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    least_conn;<br>    server 192.168.1.101:8080;<br>    server 192.168.1.102:8080;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-IP哈希（Session-Persistence）"><a href="#2-3-IP哈希（Session-Persistence）" class="headerlink" title="2.3 IP哈希（Session Persistence）"></a><strong>2.3 IP哈希（Session Persistence）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    ip_hash;<br>    server 192.168.1.101:8080;<br>    server 192.168.1.102:8080;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-响应时间动态分配（商业版功能）"><a href="#2-4-响应时间动态分配（商业版功能）" class="headerlink" title="2.4 响应时间动态分配（商业版功能）"></a><strong>2.4 响应时间动态分配（商业版功能）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    fair;<br>    server 192.168.1.101:8080;<br>    server 192.168.1.102:8080;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-高级配置参数"><a href="#3-高级配置参数" class="headerlink" title="3. 高级配置参数"></a><strong>3. 高级配置参数</strong></h3><h4 id="3-1-健康检查机制"><a href="#3-1-健康检查机制" class="headerlink" title="3.1 健康检查机制"></a><strong>3.1 健康检查机制</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    server 192.168.1.101:8080 max_fails=3 fail_timeout=30s;<br>    server 192.168.1.102:8080 max_fails=3 fail_timeout=30s;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>max_fails</code>：允许的最大失败次数</li><li><code>fail_timeout</code>：服务器被标记为不可用的时间</li></ul><h4 id="3-2-备份服务器配置"><a href="#3-2-备份服务器配置" class="headerlink" title="3.2 备份服务器配置"></a><strong>3.2 备份服务器配置</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    server 192.168.1.101:8080;<br>    server 192.168.1.102:8080 backup;  <span class="hljs-comment"># 备用服务器</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-慢启动机制"><a href="#3-3-慢启动机制" class="headerlink" title="3.3 慢启动机制"></a><strong>3.3 慢启动机制</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream backend &#123;<br>    server 192.168.1.101:8080 slow_start=30s;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="4-完整配置示例"><a href="#4-完整配置示例" class="headerlink" title="4. 完整配置示例"></a><strong>4. 完整配置示例</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">http &#123;<br>    <span class="hljs-comment"># 定义上游服务器组</span><br>    upstream myapp &#123;<br>        least_conn;<br>        server app1.example.com:8080 weight=3;<br>        server app2.example.com:8080 max_fails=2;<br>        server backup.example.com:8080 backup;<br>    &#125;<br><br>    <span class="hljs-comment"># 负载均衡服务器配置</span><br>    server &#123;<br>        listen 80;<br>        server_name loadbalancer.example.com;<br><br>        <span class="hljs-comment"># 静态文件缓存</span><br>        location /static/ &#123;<br>            root /var/www/html;<br>            expires 30d;<br>        &#125;<br><br>        <span class="hljs-comment"># 动态请求转发</span><br>        location / &#123;<br>            proxy_pass http://myapp;<br>            proxy_http_version 1.1;<br>            proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>            proxy_set_header Connection <span class="hljs-string">&#x27;upgrade&#x27;</span>;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>            proxy_cache_bypass <span class="hljs-variable">$http_upgrade</span>;<br>            proxy_connect_timeout 5s;  <span class="hljs-comment"># 连接超时时间</span><br>        &#125;<br><br>        <span class="hljs-comment"># 健康检查端点</span><br>        location /nginx_status &#123;<br>            stub_status on;<br>            access_log off;<br>            allow 192.168.1.0/24;<br>            deny all;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-监控与调试"><a href="#5-监控与调试" class="headerlink" title="5. 监控与调试"></a><strong>5. 监控与调试</strong></h3><h4 id="5-1-查看实时状态"><a href="#5-1-查看实时状态" class="headerlink" title="5.1 查看实时状态"></a><strong>5.1 查看实时状态</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://localhost/nginx_status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Active connections: 3 <br>server accepts handled requests<br> 12 12 24 <br>Reading: 0 Writing: 1 Waiting: 2<br></code></pre></td></tr></table></figure><h4 id="5-2-日志分析配置"><a href="#5-2-日志分析配置" class="headerlink" title="5.2 日志分析配置"></a><strong>5.2 日志分析配置</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">log_format upstream_log <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &#x27;</span><br>                       <span class="hljs-string">&#x27;&quot;$request&quot; $status $body_bytes_sent &#x27;</span><br>                       <span class="hljs-string">&#x27;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &#x27;</span><br>                       <span class="hljs-string">&#x27;upstream: $upstream_addr response_time: $upstream_response_time&#x27;</span>;<br><br>access_log /var/log/nginx/access.log upstream_log;<br></code></pre></td></tr></table></figure><hr><h3 id="6-性能优化建议"><a href="#6-性能优化建议" class="headerlink" title="6. 性能优化建议"></a><strong>6. 性能优化建议</strong></h3><p>1.<strong>连接复用配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxy_http_version 1.1;<br>proxy_set_header Connection <span class="hljs-string">&quot;&quot;</span>;<br>keepalive 32;  <span class="hljs-comment"># 每个worker保持的连接数</span><br></code></pre></td></tr></table></figure><p>2.<strong>缓冲区优化</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxy_buffers 16 32k;<br>proxy_buffer_size 64k;<br></code></pre></td></tr></table></figure><p>3.<strong>超时控制</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxy_connect_timeout 5s;<br>proxy_send_timeout 10s;<br>proxy_read_timeout 15s;<br></code></pre></td></tr></table></figure><hr><h3 id="7-常见问题排查"><a href="#7-常见问题排查" class="headerlink" title="7. 常见问题排查"></a><strong>7. 常见问题排查</strong></h3><h4 id="7-1-502-Bad-Gateway"><a href="#7-1-502-Bad-Gateway" class="headerlink" title="7.1 502 Bad Gateway"></a><strong>7.1 502 Bad Gateway</strong></h4><p>检查项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -tnlp | grep 8080           <span class="hljs-comment"># 确认后端服务运行</span><br><span class="hljs-built_in">tail</span> -f /var/log/nginx/error.log  <span class="hljs-comment"># 查看详细错误</span><br></code></pre></td></tr></table></figure><h4 id="7-2-流量分配不均"><a href="#7-2-流量分配不均" class="headerlink" title="7.2 流量分配不均"></a><strong>7.2 流量分配不均</strong></h4><ul><li>确认是否启用<code>ip_hash</code>导致固定分配</li><li>检查后端服务器的响应时间差异</li></ul><hr><h3 id="8-TLS终止配置"><a href="#8-TLS终止配置" class="headerlink" title="8. TLS终止配置"></a><strong>8. TLS终止配置</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 443 ssl;<br>    ssl_certificate /etc/nginx/ssl/server.crt;<br>    ssl_certificate_key /etc/nginx/ssl/server.key;<br>    <br>    location / &#123;<br>        proxy_pass http://backend;<br>        proxy_set_header X-Forwarded-Proto https;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nginx -t &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure><p>根据实际业务需求选择合适的策略组合，建议先进行压力测试（可使用<code>ab</code>或<code>wrk</code>工具）验证配置效果。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为设备命令大全</title>
    <link href="/2025/05/15/%E5%8D%8E%E4%B8%BA%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <url>/2025/05/15/%E5%8D%8E%E4%B8%BA%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="用户视图"><a href="#用户视图" class="headerlink" title="用户视图"></a>用户视图</h3><p>登陆设备后，直接进入用户模式，只能执行少量查看配置的命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">Info: The max number of VTY users is <span class="hljs-number">10</span>, and the number<br>      of current VTY users on line is <span class="hljs-number">1</span>.<br>      The current login time is <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">10</span> <span class="hljs-number">12</span>:<span class="hljs-number">15</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<br>&lt;ZD_agg_5720&gt;<br></code></pre></td></tr></table></figure><h3 id="系统视图"><a href="#系统视图" class="headerlink" title="系统视图"></a>系统视图</h3><p>用户模式下，输入system-view命令进入视图模式，可执行设备全局配置的命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;ZD_agg_5720&gt;system-view <br>Enter system view, return user view with Ctrl+Z.<br><span class="hljs-selector-attr">[ZD_agg_5720]</span><br></code></pre></td></tr></table></figure><h3 id="局部视图"><a href="#局部视图" class="headerlink" title="局部视图"></a>局部视图</h3><p>系统视图模式下，输入局部配置命令，进入局部对像的配置视图。如interface GE 1&#x2F;0&#x2F;0，进入GE1&#x2F;0&#x2F;0端口配置模式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;ZD_agg_5720&gt;system-view <br>Enter system view, return user view with Ctrl+Z.<br><span class="hljs-selector-attr">[ZD_agg_5720]</span>interface GigabitEthernet <span class="hljs-number">1</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-selector-attr">[ZD_agg_5720-GigabitEthernet1/0/1]</span><br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h3 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h3><table><thead><tr><th><strong>命令</strong></th><th><strong>缩写</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>display</td><td>dis</td><td>查看相应对象信息</td></tr><tr><td>undo</td><td></td><td>撤消或反向操作对应命令</td></tr><tr><td>system-view</td><td>sy</td><td>进入系统视图</td></tr><tr><td>sysname</td><td></td><td>设置交换机名称</td></tr><tr><td>quit</td><td>q</td><td>退出当前视图</td></tr><tr><td>reboot</td><td></td><td>交换机重启</td></tr><tr><td>reset</td><td></td><td></td></tr><tr><td>restart</td><td></td><td>重新启动当前接口</td></tr><tr><td>shutdown</td><td></td><td>关闭当前接口</td></tr></tbody></table><h3 id="信息查看命令"><a href="#信息查看命令" class="headerlink" title="信息查看命令"></a>信息查看命令</h3><h3 id="交换机信息查看"><a href="#交换机信息查看" class="headerlink" title="交换机信息查看"></a>交换机信息查看</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> version  查看交换机软件版本<br><span class="hljs-attribute">display</span> clock    查看交换机时钟<br></code></pre></td></tr></table></figure><h3 id="交换机配置查看"><a href="#交换机配置查看" class="headerlink" title="交换机配置查看"></a>交换机配置查看</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> saved-configuration    显示系统保存配置<br><span class="hljs-attribute">display</span> current-configuration  显示系统当前配置<br></code></pre></td></tr></table></figure><h3 id="当前对象信息查看"><a href="#当前对象信息查看" class="headerlink" title="当前对象信息查看"></a>当前对象信息查看</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> this                    显示当前信息。<br><span class="hljs-attribute">display</span> this include-default    显示当前接口视图下的接口信息，包括默认值。<br><span class="hljs-attribute">display</span> this interface          显示当前接口视图下的接口信息。<br></code></pre></td></tr></table></figure><h3 id="查看接口"><a href="#查看接口" class="headerlink" title="查看接口"></a>查看接口</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> interface               查看接口当前运行状态和接口统计信息<br><span class="hljs-attribute">display</span> interface brief         查看接口状态和配置的简要信息。<br><span class="hljs-attribute">display</span> interface description   查看指定接口的描述信息<br><span class="hljs-attribute">display</span> interface vlanif        查看VLANIF接口的状态信息、配置信息和统计信息。<br></code></pre></td></tr></table></figure><h3 id="查看IP相关"><a href="#查看IP相关" class="headerlink" title="查看IP相关"></a>查看IP相关</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> ip interface             查看接口与IP相关的配置和统计信息，包括接口接收和发送的报文数、字节数和组播报文数，以及接口接收、发送、转发和丢弃的广播报文数。<br><span class="hljs-attribute">display</span> ip interface brief       看接口与IP相关的简要信息，包括IP地址、子网掩码、物理链路和协议的Up/Down状态以及处于不同状态的接口数目。<br><span class="hljs-attribute">display</span> ip interface description 查看接口与IP相关的简要信息，包括IP地址、子网掩码、物理层状态、链路层协议状态，及接口描述信息和处于不同状态的接口数目。<br><span class="hljs-attribute">display</span> ip pool                                                          显示所有ip pool<br><span class="hljs-attribute">display</span> ip pool name &#123;pool name&#125; &#123;<span class="hljs-attribute">all</span>|conflict|expired|used&#125;             显示ip pool详细信息<br><span class="hljs-attribute">display</span> ip host                查看静态DNS表项<br><span class="hljs-attribute">display</span> ip socket              查看已创建的IPv4 Socket信息。<br><span class="hljs-attribute">display</span> ip statistics          显示IP流量统计信息。<br></code></pre></td></tr></table></figure><h3 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> ip routing-<span class="hljs-selector-tag">table</span>        显示路由信息<br><span class="hljs-attribute">display</span> ospf peer               查看ospf邻接等信息<br><span class="hljs-attribute">display</span> ospf peer brief         查看ospf邻接等简要信息<br><span class="hljs-attribute">display</span> rip                     查看rip路由信息<br></code></pre></td></tr></table></figure><h3 id="网络及流量"><a href="#网络及流量" class="headerlink" title="网络及流量"></a>网络及流量</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> network status &#123; <span class="hljs-attribute">all</span>|tcp|udp|port port-number &#125;   显示IP流量统计信息 <br><span class="hljs-attribute">display</span> tcp statistics   查看TCP流量统计信息<br><span class="hljs-attribute">display</span> udp statistics   查看UDP流量统计信息<br></code></pre></td></tr></table></figure><h3 id="VLAN查看"><a href="#VLAN查看" class="headerlink" title="VLAN查看"></a>VLAN查看</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">display</span> vlan                              显示VLAN信息<br><span class="hljs-attribute">display</span> vlan &#123;pvid&#125; verbose               查看vlan的详细信息<br><span class="hljs-attribute">display</span> port vlan                         查看VLAN中包含的接口信息<br><span class="hljs-attribute">display</span> sub-vlan                          查看Sub-VLAN类型的VLAN表项信息<br><span class="hljs-attribute">display</span> super-vlan                        查看Super-VLAN类型的VLAN表项信息<br><span class="hljs-attribute">display</span> mac-vlan mac-<span class="hljs-selector-tag">address</span> <span class="hljs-attribute">all</span>          查看所有MAC地址划分VLAN的配置信息<br><span class="hljs-attribute">display</span> mac-vlan vlan <span class="hljs-number">2</span>                   查看vlan <span class="hljs-number">2</span> MAC地址划分VLAN的配置信息<br></code></pre></td></tr></table></figure><h3 id="查看ACL配置"><a href="#查看ACL配置" class="headerlink" title="查看ACL配置"></a>查看ACL配置</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">display <span class="hljs-keyword">acl</span> &#123;all <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> ipv6&#125;                         查看ACL<br>display traffic classifier user<span class="hljs-operator">-</span>defined                 查看用户定义的流分类<br>display traffic behavior user<span class="hljs-operator">-</span>defined                   查看用户定义的流行为<br>display traffic policy user<span class="hljs-operator">-</span><span class="hljs-keyword">defined</span> &#123;policy name&#125;       查看用户定义的流策略<br>display traffic<span class="hljs-operator">-</span><span class="hljs-keyword">applied</span> &#123;inbound <span class="hljs-operator">|</span> outbound <span class="hljs-operator">|</span> <span class="hljs-keyword">interface</span> <span class="hljs-operator">|</span> vlan&#125;  查看流策略应用情况<br><br>display traffic <span class="hljs-keyword">policy</span> &#123;<span class="hljs-keyword">global</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">interface</span> <span class="hljs-operator">|</span> statistics <span class="hljs-operator">|</span> vlan &#125; &#123;inbound <span class="hljs-operator">|</span> outbound&#125;   查看更多流策略信息<br>display traffic policy <span class="hljs-keyword">statistics</span> &#123;<span class="hljs-keyword">global</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">interface</span> <span class="hljs-operator">|</span> vlan&#125; &#123;inbound <span class="hljs-operator">|</span> outbound&#125;      查看流策略统计信息<br><br>display traffic<span class="hljs-operator">-</span>filter applied<span class="hljs-operator">-</span>record                   查看acl应用的接口<br></code></pre></td></tr></table></figure><h3 id="查看NAT配置"><a href="#查看NAT配置" class="headerlink" title="查看NAT配置"></a>查看NAT配置</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">#路由器命令<br>display nat <span class="hljs-keyword">static</span> &#123;acl <span class="hljs-operator">|</span> <span class="hljs-keyword">global</span> <span class="hljs-operator">|</span> inside <span class="hljs-operator">|</span> <span class="hljs-keyword">interface</span>&#125;         查看静态NAT信息<br>display nat <span class="hljs-keyword">session</span> &#123;all <span class="hljs-operator">|</span> dest <span class="hljs-operator">|</span> number <span class="hljs-operator">|</span> protocol <span class="hljs-operator">|</span> source&#125;  查看动态NAT信息<br>display nat <span class="hljs-keyword">server</span> &#123;acl <span class="hljs-operator">|</span> <span class="hljs-keyword">global</span> <span class="hljs-operator">|</span> inside <span class="hljs-operator">|</span> <span class="hljs-keyword">interface</span>&#125;         查看NAT server信息<br></code></pre></td></tr></table></figure><h3 id="配置管理命令"><a href="#配置管理命令" class="headerlink" title="配置管理命令"></a>配置管理命令</h3><h3 id="端口管理"><a href="#端口管理" class="headerlink" title="端口管理"></a>端口管理</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">port                                               配置接口的缺省VLAN并加入该VLAN<br>port description                                   配置接口的描述信息，描述与接口相连的设备类型。<br>port gigabitethernet <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">4</span><br>port <span class="hljs-keyword">default</span> vlan                                  配置接口的缺省VLAN并同时加入这个VLAN。<br>port link<span class="hljs-operator">-</span><span class="hljs-keyword">type</span> &#123;access <span class="hljs-operator">|</span> hybird <span class="hljs-operator">|</span> trunk&#125;           配置接口的链路类型<br>port trunk allow<span class="hljs-operator">-</span>pass <span class="hljs-keyword">vlan</span> &#123;vlanid&#125;                将trunk接口加入vlan<br></code></pre></td></tr></table></figure><h3 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">speed  &#123;<span class="hljs-number">10</span>|<span class="hljs-number">100</span>|<span class="hljs-keyword">auto</span>&#125;                             配置端口工作速率<br>duplex &#123;half|full|<span class="hljs-keyword">auto</span>&#125;                          配置端口工作状态<br></code></pre></td></tr></table></figure><h3 id="端口组操作"><a href="#端口组操作" class="headerlink" title="端口组操作"></a>端口组操作</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">display port<span class="hljs-operator">-</span><span class="hljs-keyword">group</span>  &#123;all&#125;                                     查看端口组<br>port<span class="hljs-operator">-</span><span class="hljs-keyword">group</span> &#123;<span class="hljs-built_in">id</span>&#125;                                               创建端口组<br>group<span class="hljs-operator">-</span><span class="hljs-keyword">member</span> gigabitethernet <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-keyword">to</span> gigabitethernet <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">10</span>  将<span class="hljs-number">2</span>到<span class="hljs-number">10</span>端口加入端口组<br></code></pre></td></tr></table></figure><h3 id="VLAN管理"><a href="#VLAN管理" class="headerlink" title="VLAN管理"></a>VLAN管理</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">vlan</span> &#123;<span class="hljs-built_in">id</span>&#125;                      创建VLAN并进入VLAN视图，如果VLAN已存在，直接进入该VLAN的视图。<br>vlan batch <span class="hljs-number">10</span> <span class="hljs-keyword">to</span> <span class="hljs-number">20</span>            批量创建VLAN<br>vlan range <span class="hljs-number">10</span> <span class="hljs-keyword">to</span> <span class="hljs-number">20</span>            创建临时VLAN组，并进入VLAN<span class="hljs-operator">-</span>Range视图<br>vlan statistics                配置VLAN的流量统计模式，即配置按包或按字节进行VLAN流量统计。<br>vlan statistics interval       配置VLAN的流量统计的时间间隔<br>ip address                     用来配置接口的IP地址。 <br></code></pre></td></tr></table></figure><h3 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">interface gigabitethernet <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>     进入指定的接口或子接口视图，进入<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>的接口<br></code></pre></td></tr></table></figure><h3 id="DNS管理"><a href="#DNS管理" class="headerlink" title="DNS管理"></a>DNS管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">#查看<br><span class="hljs-attribute">display</span> dns dynamic-host       查看动态DNS表项<br><span class="hljs-attribute">display</span> dns domain             查看域名后缀的相关信息<br><span class="hljs-attribute">display</span> dns server             查看DNS服务器的相关信息<br>#设置<br>dns domain domain-name    命令用来配置域名后缀，如 dns domain com<span class="hljs-selector-class">.cn</span>。<br>dns resolve               命令用来使能动态域名解析功能<br>dns server &#123;ip&#125;           命令用来配置DNS服务器的IP地址<br>ip host &#123;domain&#125; &#123;ip&#125;     命令用来配置静态DNS表项 ip host www<span class="hljs-selector-class">.huawei</span><span class="hljs-selector-class">.com</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">10.4</span>。<br></code></pre></td></tr></table></figure><h3 id="DHCP管理"><a href="#DHCP管理" class="headerlink" title="DHCP管理"></a>DHCP管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">dhcp enable                          命令用来开启DHCP功能。 <br>dhcp <span class="hljs-selector-tag">select</span> global                   从全局配置中获取dhcp配置<br></code></pre></td></tr></table></figure><h3 id="ACL管理"><a href="#ACL管理" class="headerlink" title="ACL管理"></a>ACL管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">acl &#123;name | number | ipv6&#125;                     创建acl<br>rule <span class="hljs-selector-attr">[&#123;ruleid&#125;]</span> permit ip <span class="hljs-selector-tag">source</span> &#123;源ip&#125; &#123;反掩码&#125; <span class="hljs-selector-attr">[ destination &#123;源ip&#125; &#123;反掩码&#125; ]</span>  创建允许规则<br>rule <span class="hljs-selector-attr">[&#123;ruleid&#125;]</span> deny ip <span class="hljs-selector-tag">source</span> &#123;源ip&#125; &#123;反掩码&#125; <span class="hljs-selector-attr">[ destination &#123;源ip&#125; &#123;反掩码&#125;  ]</span>   创建拒绝规则<br><br>traffic-<span class="hljs-attribute">filter</span> &#123;inbound | outbound&#125; acl &#123;acl number&#125;              在接口上应用acl规则<br><br>#创建流分类<br>traffic classifier &#123;classifier name&#125; operator &#123; and |or &#125;<br>if-match acl &#123;acl number&#125;                     为流分类设置匹配规则<br>#创建流行为<br>traffic behavior &#123;behavior name&#125;                      <br>permit | deny | redirect                      为流行为配置动作<br>#创建流策略<br>traffic policy &#123;policy name&#125;        <br>classifier &#123;classifier name&#125; behavior &#123;behavior name&#125;             关联流分类与流行为<br>#将流策略应用到接口<br>interface g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br>traffic-policy &#123;policy name&#125;  &#123;inbound | outbound&#125;                 接口绑定流策略<br></code></pre></td></tr></table></figure><h3 id="NAT管理"><a href="#NAT管理" class="headerlink" title="NAT管理"></a>NAT管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">#边界路由器接口上配置静态NAT<br>nat static global &#123;外部ip&#125; inside &#123;内部ip&#125;                 添加静态nat，内外部ip一对一<br>#动态NAT，使用dis nat session查看<br>nat <span class="hljs-selector-tag">address</span>-group &#123;groupid&#125; &#123;ip开始&#125; &#123;ip结束&#125;                     添加外部可用地址池<br>nat outbound &#123;acl id&#125; <span class="hljs-selector-tag">address</span>-group &#123;<span class="hljs-selector-tag">address</span>-group id&#125; no-pat    添加动态地址转换<br><span class="hljs-selector-id">#NAPT</span>，使用dis nat session查看<br>nat outbound &#123;acl id&#125; <span class="hljs-selector-attr">[address-group &#123;address-group id&#125;]</span>         添加动态端口地址转换<br><span class="hljs-selector-id">#NAT</span> server，使用dis nat server查看<br>nat server protocol tcp global &#123;外部ip&#125; &#123;外部端口&#125; inside &#123;内部ip&#125; &#123;内部端口&#125;   添加nat server转换<br></code></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">#查看本地用户<br><span class="hljs-attribute">display</span> local-user<br>#查看用户接口<br><span class="hljs-attribute">display</span> user-interface<br>#设置用户vty0为<span class="hljs-number">4</span>个并发<br>user-interface vty <span class="hljs-number">0</span> <span class="hljs-number">4</span><br>#进入用户console0接口<br>user-interface console <span class="hljs-number">0</span><br>#用户管理<br>local-user &#123;username&#125; password cipher &#123;password&#125;<br>local-user &#123;username&#125; level <span class="hljs-number">15</span><br>local-user &#123;username&#125; service-type telnet terminal ssh<br></code></pre></td></tr></table></figure><h3 id="绑定IP与MAC"><a href="#绑定IP与MAC" class="headerlink" title="绑定IP与MAC"></a>绑定IP与MAC</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">user-bind ip-<span class="hljs-selector-tag">address</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.2</span> mac-<span class="hljs-selector-tag">address</span> <span class="hljs-number">0001</span>-<span class="hljs-number">0203</span>-<span class="hljs-number">0405</span><br>user privilege level <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>LEVEL 0(访问级)：可以执行用于网络诊断等功能的命令。包括ping、tracert、telnet等命令，执行该级别命令的结果不能被保存到配置文件中。<br>LEVEL 1(监控级)：可以执行用于系统维护、业务故障诊断等功能的命令。包括debugging、terminal等命令，执行该级别命令的结果不能被保存到配置文件中。<br>LEVEL 2(系统级)：可以执行用于业务配置的命令，主要包括路由等网络层次的命令，用于向用户提供网络服务。<br>LEVEL 3(管理级)：最高级，可以运行所有命令：关系到系统的基本运行、系统支撑模块功能的命令，这些命令对业务提供支撑作用。包括文件系统、FTP、TFTP、XModem下载、用户管理命令、级别设置命令等。</p><h3 id="日志与统计"><a href="#日志与统计" class="headerlink" title="日志与统计"></a>日志与统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#打开统计</span><br>display counters               查看接口的流量统计计数<br>statistic <span class="hljs-built_in">enable</span><br>trace mac <span class="hljs-built_in">enable</span><br>trace mac aa99-6600-5600 vlan 2<br></code></pre></td></tr></table></figure><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span> stp                   显示生成树信息<br><span class="hljs-attribute">display</span> mac-<span class="hljs-selector-tag">address</span>           显示MAC地址表<br><span class="hljs-attribute">display</span> bridge mac-<span class="hljs-selector-tag">address</span>    查看当前桥接设备mac地址<br><span class="hljs-attribute">display</span> arp                   显示ARP信息表<br><span class="hljs-attribute">display</span> voice-vlan oui                          查看Voice VLAN的OUI及其相关属性。<br><span class="hljs-attribute">display</span> voice-vlan status                       查看当前Voice VLAN的相关信息<br><br>mac-vlan mac-<span class="hljs-selector-tag">address</span><br></code></pre></td></tr></table></figure><h3 id="操作实战"><a href="#操作实战" class="headerlink" title="操作实战"></a>操作实战</h3><h3 id="VLAN操作"><a href="#VLAN操作" class="headerlink" title="VLAN操作"></a>VLAN操作</h3><p>创建vlan，设置vlan的ip，并将端口加入vlan中。</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">#进入全局配置视图<br>&lt;Huawei&gt; system-<span class="hljs-keyword">view</span><br>#新建vlan2<br>[Huawei] vlan <span class="hljs-number">2</span><br>#进入vlan2的接口视图<br>[Huawei] interface vlan <span class="hljs-number">2</span><br>#设置vlan2的三层网关路由<br>[Huawei-Vlanif2] ip address <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>#进入<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>接口，配置为<span class="hljs-keyword">access</span>接口并加入vlan2中<br>[Huawei] interface GigabitEthernet <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br>[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>] <span class="hljs-keyword">port</span> link-<span class="hljs-keyword">type</span> <span class="hljs-keyword">access</span><br>[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>] <span class="hljs-keyword">port</span> <span class="hljs-keyword">default</span> vlan <span class="hljs-number">2</span><br>#进入<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">2</span>接口，配置为trunk接口并加入vlan2中<br>[Huawei] interface GigabitEthernet <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br>[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span>] <span class="hljs-keyword">port</span> link-<span class="hljs-keyword">type</span> trunk<br>[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span>] <span class="hljs-keyword">port</span> trunk allow-pass vlan <span class="hljs-number">2</span><br>#查看端口配置的信息<br>[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span>] dis this<br>#进入vlan2，将<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">2</span>到<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">5</span>端口加入到vlan2中（<span class="hljs-keyword">port</span> link-<span class="hljs-keyword">type</span>需要是<span class="hljs-keyword">access</span>类型）<br>[Huawei] vlan <span class="hljs-number">2</span><br>[Huawei-vlan2] <span class="hljs-keyword">port</span> GigabitEthernet <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">2</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><h3 id="端口组操作-1"><a href="#端口组操作-1" class="headerlink" title="端口组操作"></a>端口组操作</h3><p>需要对多个端口进行相同操作时，可以创建端口组进行批量操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CLI">#创建端口组1，进行批量端口操作<br>[Huawei] port-group 1<br>#将6到10端口加入端口组<br>[Huawei-port-group-1] group-member gigabitethernet 0/0/6 to gigabitethernet 0/0/10<br>#批量将2~10端口修改为access模式<br>[Huawei-port-group-1] port link-type access<br>#批量将6~10端口加入到vlan 2中<br>[Huawei-port-group-1] port default vlan 2<br></code></pre></td></tr></table></figure><h3 id="IP-POOL操作"><a href="#IP-POOL操作" class="headerlink" title="IP POOL操作"></a>IP POOL操作</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;Huawei&gt; system-view<br><span class="hljs-meta">#进入ip pool中</span><br>[<span class="hljs-meta">Huawei</span>] ip pool vlan10<br><span class="hljs-meta">#在ip pool中添加dns server</span><br>[<span class="hljs-meta">Huawei-ip-pool-vlan10</span>] dns-list <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><span class="hljs-meta">#设置网关</span><br>[<span class="hljs-meta">Huawei-ip-pool-vlan10</span>] gateway-list <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-meta">#设置ip pool的ip段和池，需要与vlanif接口配置匹配，否则ip分配不了</span><br>[<span class="hljs-meta">Huawei-ip-pool-vlan10</span>] network <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> mask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br><span class="hljs-meta">#过期时间</span><br>[<span class="hljs-meta">Huawei-ip-pool-vlan10</span>] lease day <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="DHCP操作"><a href="#DHCP操作" class="headerlink" title="DHCP操作"></a>DHCP操作</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;Huawei&gt; <span class="hljs-keyword">system</span>-view<br><span class="hljs-comment">#全局打开DHCP服务</span><br>[Huawei] dhcp enable<br><span class="hljs-comment">#进入vlan的接口视图</span><br>[Huawei] interface vlanif <span class="hljs-number">2</span><br><span class="hljs-comment">#设置vlan2的三层网关路由</span><br>[Huawei-Vlanif2] ip address <span class="hljs-number">10.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">255.255</span><span class="hljs-number">.255</span>.<span class="hljs-number">0</span><br><span class="hljs-comment">#从全局配置中获取dhcp配置</span><br>[Huawei-Vlanif2] dhcp <span class="hljs-keyword">select</span> global<br></code></pre></td></tr></table></figure><h3 id="静态添加路由"><a href="#静态添加路由" class="headerlink" title="静态添加路由"></a>静态添加路由</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;Huawei&gt; system-view<br>&lt;Huawei&gt; display ip routing-table<br><span class="hljs-meta">#ip route-static 目的ip  目标地址掩码  下一跳ip</span><br>[<span class="hljs-meta">Huawei</span>] ip route-<span class="hljs-keyword">static</span> <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-meta">#删除路由</span><br>[<span class="hljs-meta">Huawei</span>] undo ip route-<span class="hljs-keyword">static</span> <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><h3 id="RIP路由管理"><a href="#RIP路由管理" class="headerlink" title="RIP路由管理"></a>RIP路由管理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;Huawei&gt; system-view<br><span class="hljs-meta">#修改loopback0地址</span><br>[<span class="hljs-meta">Huawei</span>] <span class="hljs-built_in">int</span> LoopBack <span class="hljs-number">0</span><br>[<span class="hljs-meta">Huawei-LoopBack0</span>] ip address <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-number">0</span><br><span class="hljs-meta">#创建rip进程</span><br>[<span class="hljs-meta">Huawei</span>] rip <span class="hljs-number">1</span><br><span class="hljs-meta">#启动版本2</span><br>[<span class="hljs-meta">Huawei-rip-1</span>] version <span class="hljs-number">2</span><br><span class="hljs-meta">#宣告网段</span><br>[<span class="hljs-meta">Huawei</span>] network <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>[<span class="hljs-meta">Huawei</span>] network <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h3 id="OSPF路由管理"><a href="#OSPF路由管理" class="headerlink" title="OSPF路由管理"></a>OSPF路由管理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;Huawei&gt; system-view<br><span class="hljs-meta">#创建ospf</span><br>[<span class="hljs-meta">Huawei</span>] ospf <span class="hljs-number">1</span> router-id <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><br><span class="hljs-meta">#创建area0区域</span><br>[<span class="hljs-meta">Huawei-ospf-1</span>] area <span class="hljs-number">0</span><br><span class="hljs-meta">#加入192.168.0.0/24子网</span><br>[<span class="hljs-meta">Huawei-ospf-1-area-0.0.0.0</span>] network <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span><br>[<span class="hljs-meta">Huawei-ospf-1-area-0.0.0.0</span>]dis <span class="hljs-keyword">this</span><br><span class="hljs-meta">#</span><br> area <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>  network <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span><br><span class="hljs-meta">#</span><br>[<span class="hljs-meta">Huawei-ospf-1-area-0.0.0.0</span>]<br></code></pre></td></tr></table></figure><h3 id="ACL管理-1"><a href="#ACL管理-1" class="headerlink" title="ACL管理"></a>ACL管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;Huawei&gt; system-view<br>#配置acl<br><span class="hljs-selector-attr">[Huawei]</span> acl <span class="hljs-number">3000</span><br><span class="hljs-selector-attr">[Huawei-acl-adv-3000]</span> rule permit ip <span class="hljs-selector-tag">source</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.255</span> destination <span class="hljs-number">192.168</span>.<span class="hljs-number">2.0</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.255</span><br><span class="hljs-selector-attr">[Huawei-acl-adv-3000]</span> rule permit ip <span class="hljs-selector-tag">source</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">2.0</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.255</span><br><span class="hljs-selector-attr">[Huawei-acl-adv-3000]</span> quit<br>#配置流分类，匹配acl<br><span class="hljs-selector-attr">[Huawei]</span> traffic classifier c0 operator or <br><span class="hljs-selector-attr">[Huawei-classifier-c0]</span> if-match acl <span class="hljs-number">3000</span><br><span class="hljs-selector-attr">[Huawei-classifier-c0]</span> quit<br>#配置流行为,设置动作<br><span class="hljs-selector-attr">[Huawei-behavior-b0]</span> traffic behavior b0<br><span class="hljs-selector-attr">[Huawei-behavior-b0]</span> permit<br><span class="hljs-selector-attr">[Huawei-behavior-b0]</span> quit<br>#配置流策略，关联流分类c0与流行为b0<br><span class="hljs-selector-attr">[Huawei]</span> traffic policy p0<br><span class="hljs-selector-attr">[Huawei-trafficpolicy-p1]</span> classifier c0 behavior b0<br><span class="hljs-selector-attr">[Huawei-trafficpolicy-p1]</span> quit<br>#配置流策略应用到接口<br><span class="hljs-selector-attr">[Huawei]</span> interface  g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-selector-attr">[Huawei-GigabitEthernet0/0/1]</span> traffic-policy p0 inbound<br><span class="hljs-selector-attr">[Huawei-GigabitEthernet0/0/1]</span> return<br></code></pre></td></tr></table></figure><h3 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#查看本地用户</span><br>&lt;Huawei&gt; display local-user<br>&lt;Huawei&gt; system-view<br><span class="hljs-meta">#进入aaa配置模式</span><br>[<span class="hljs-meta">Huawei</span>] aaa<br><span class="hljs-meta">#配置本地用户账号密码</span><br>[<span class="hljs-meta">Huawei-aaa</span>] loca-user user1 password cipher <span class="hljs-number">123456</span><br><span class="hljs-meta">#用户服务类型为telnet，使用telnet登陆</span><br>[<span class="hljs-meta">Huawei-aaa</span>] local-user user1 service-type telnet<br><span class="hljs-meta">#配置用户特权等级15</span><br>[<span class="hljs-meta">Huawei-aaa</span>] local-user user1 privilege level <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络工程师</category>
      
      <category>交换机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell命令、BASH</title>
    <link href="/2025/05/15/shell%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/05/15/shell%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、shell常用命令"><a href="#一、shell常用命令" class="headerlink" title="一、shell常用命令"></a>一、shell常用命令</h2><ol><li><p><strong>ls</strong> 列出目录内容<br>用法：<code>ls [选项] [目录]</code><br>示例：<code>ls -l /home</code>（长格式列出home目录）</p></li><li><p><strong>cd</strong> 切换目录<br>用法：<code>cd [目录]</code><br>示例：<code>cd ../documents</code>（进入上级的documents目录）</p></li><li><p><strong>pwd</strong> 显示当前路径<br>用法：<code>pwd</code><br>示例：<code>pwd</code>（输出：&#x2F;home&#x2F;user）</p></li><li><p><strong>mkdir</strong> 创建目录<br>用法：<code>mkdir [选项] 目录名</code><br>示例：<code>mkdir -p project/&#123;src,test&#125;</code>（创建多级嵌套目录）</p></li><li><p><strong>rm</strong> 删除文件&#x2F;目录<br>用法：<code>rm [选项] 文件</code><br>示例：<code>rm -rf old_dir</code>（强制删除目录）</p></li><li><p><strong>cp</strong> 复制文件<br>用法：<code>cp [选项] 源文件 目标</code><br>示例：<code>cp -r dir1 dir2</code>（递归复制目录）</p></li><li><p><strong>mv</strong> 移动&#x2F;重命名<br>用法：<code>mv [选项] 源 目标</code><br>示例：<code>mv file.txt ../backup/</code>（移动文件）</p></li><li><p><strong>cat</strong> 显示文件内容<br>用法：<code>cat [文件]</code><br>示例：<code>cat *.log | grep &quot;error&quot;</code>（合并日志并过滤）</p></li><li><p><strong>grep</strong> 文本搜索<br>用法：<code>grep [模式] [文件]</code><br>示例：<code>grep -ri &quot;warning&quot; /var/log</code>（递归忽略大小写搜索）</p></li><li><p><strong>find</strong> 文件查找<br>用法：<code>find [路径] [条件]</code><br>示例：<code>find . -name &quot;*.jpg&quot; -mtime -7</code>（查找7天内修改的jpg）</p></li><li><p><strong>chmod</strong> 修改权限<br>用法：<code>chmod [权限] 文件</code><br>示例：<code>chmod 755 script.sh</code>（设置可执行权限）</p></li><li><p><strong>ps</strong> 查看进程<br>用法：<code>ps [选项]</code><br>示例：<code>ps aux | grep nginx</code>（显示所有进程并过滤）</p></li><li><p><strong>kill</strong> 终止进程<br>用法：<code>kill [信号] PID</code><br>示例：<code>kill -9 1234</code>（强制终止PID为1234的进程）</p></li><li><p><strong>tar</strong> 打包压缩<br>用法：<code>tar [选项] 文件</code><br>示例：<code>tar -czvf archive.tar.gz dir/</code>（创建gzip压缩包）</p></li><li><p><strong>curl</strong> 网络请求<br>用法：<code>curl [选项] URL</code><br>示例：<code>curl -o data.json https://api.example.com/data</code></p></li><li><p><strong>touch</strong> 创建空文件&#x2F;更新时间戳</p></li></ol><p>用法：<code>touch 文件名</code><br>示例：<code>touch newfile.txt</code></p><p>17.<strong>echo</strong> 输出文本<br>用法：<code>echo [选项] 字符串</code><br>示例：<code>echo &quot;Hello&quot; &gt;&gt; file.txt</code>（追加到文件）</p><p>18.<strong>head</strong> 显示文件开头<br>用法：<code>head -n 行数 文件</code><br>示例：<code>head -20 server.log</code>（显示前20行）</p><p>19.<strong>tail</strong> 显示文件结尾<br>用法：<code>tail -n 行数 文件</code><br>示例：<code>tail -f /var/log/syslog</code>（实时跟踪日志）</p><p>20.<strong>wc</strong> 统计文本<br>用法：<code>wc [选项] 文件</code><br>示例：<code>wc -l access.log</code>（统计行数）</p><hr><p><strong>文本处理</strong></p><ol start="21"><li><strong>sed</strong> 流编辑器</li></ol><p>用法：<code>sed &#39;表达式&#39; 文件</code><br>示例：<code>sed &#39;s/foo/bar/g&#39; file.txt</code>（全局替换）</p><p>22.<strong>awk</strong> 文本分析工具<br>用法：<code>awk &#39;模式 &#123;动作&#125;&#39; 文件</code><br>示例：<code>awk &#39;&#123;print $1&#125;&#39; data.csv</code>（输出第一列）</p><p>23.<strong>sort</strong> 排序<br>用法：<code>sort [选项] 文件</code><br>示例：<code>sort -nr file.txt</code>（数字逆序排序）</p><p>24.<strong>uniq</strong> 去重<br>用法：<code>uniq [选项] 文件</code><br>示例：<code>sort file.txt | uniq -c</code>（统计重复次数）</p><p>25.<strong>diff</strong> 文件对比<br>用法：<code>diff 文件1 文件2</code><br>示例：<code>diff -u old.c new.c</code>（生成差异补丁）</p><hr><p><strong>系统管理</strong></p><ol start="26"><li><strong>df</strong> 磁盘空间</li></ol><p>用法：<code>df -h</code><br>示例：<code>df -h /dev/sda1</code>（查看指定分区）</p><p>27.<strong>du</strong> 目录大小<br>用法：<code>du -sh 目录</code><br>示例：<code>du -sh * | sort -hr</code>（按大小排序当前目录）</p><p>28.<strong>top</strong> 动态进程监控<br>用法：<code>top</code><br>示例：<code>top -u mysql</code>（监控MySQL用户进程）</p><p>29.<strong>free</strong> 内存信息<br>用法：<code>free -m</code><br>示例：<code>free -m | awk &#39;/Mem/&#123;print $3 &quot;MB used&quot;&#125;&#39;</code></p><p>30.<strong>uname</strong> 系统信息<br>用法：<code>uname -a</code><br>示例：<code>uname -r</code>（显示内核版本）</p><hr><p><strong>网络相关</strong></p><ol start="31"><li><strong>ssh</strong> 远程连接</li></ol><p>用法：<code>ssh 用户@主机</code><br>示例：<code>ssh -p 2222 admin@192.168.1.100</code></p><p>32.<strong>scp</strong> 安全拷贝<br>用法：<code>scp 源文件 目标路径</code><br>示例：<code>scp -r ~/project user@remote:/backup/</code></p><p>33.<strong>wget</strong> 下载文件<br>用法：<code>wget [选项] URL</code><br>示例：<code>wget -c http://example.com/bigfile.zip</code>（断点续传）</p><p>34.<strong>netstat</strong> 网络状态<br>用法：<code>netstat -tulnp</code><br>示例：<code>netstat -an | grep ESTABLISHED</code></p><p>35.<strong>ping</strong> 网络连通性<br>用法：<code>ping 主机</code><br>示例：<code>ping -c 4 google.com</code>（发送4个包）</p><hr><p><strong>进阶工具</strong></p><ol start="36"><li><strong>cron</strong> 定时任务</li></ol><p>用法：<code>crontab -e</code><br>示例：<code>0 3 * * * /backup.sh</code>（每天3点执行）</p><p>37.<strong>rsync</strong> 高效同步<br>用法：<code>rsync -av 源 目标</code><br>示例：<code>rsync -avz --delete /data/ user@remote:/backup/</code></p><p>38.<strong>ln</strong> 创建链接<br>用法：<code>ln -s 目标 链接名</code><br>示例：<code>ln -s /var/log/ logs</code>（创建软链接）</p><p>39.<strong>history</strong> 命令历史<br>用法：<code>history</code><br>示例：<code>!123</code>（执行历史记录中第123条命令）</p><p>40.<strong>alias</strong> 命令别名<br>用法：<code>alias 别名=&#39;原命令&#39;</code><br>示例：<code>alias ll=&#39;ls -alh&#39;</code></p><hr><p><strong>文件权限</strong></p><ol start="41"><li><strong>chown</strong> 修改所有者</li></ol><p>用法：<code>chown 用户:组 文件</code><br>示例：<code>chown www-data:www-data /var/www/</code></p><p>42.<strong>umask</strong> 默认权限<br>用法：<code>umask 022</code><br>示例：<code>umask</code>（显示当前设置）</p><p>43.<strong>su</strong> 切换用户<br>用法：<code>su - 用户名</code><br>示例：<code>su - root</code></p><p>44.<strong>sudo</strong> 超级权限<br>用法：<code>sudo 命令</code><br>示例：<code>sudo apt update</code></p><hr><p><strong>压缩&#x2F;解压</strong></p><ol start="45"><li><strong>gzip</strong></li></ol><p>用法：<code>gzip 文件</code><br>示例：<code>gzip -9 file.txt</code>（最大压缩率）</p><p>46.<strong>zip</strong><br>用法：<code>zip 压缩包名 文件</code><br>示例：<code>zip -r site.zip public_html/</code></p><p>47.<strong>unzip</strong><br>用法：<code>unzip 压缩包</code><br>示例：<code>unzip -l archive.zip</code>（查看内容）</p><hr><p><strong>其他关键命令</strong></p><ol start="48"><li><strong>which</strong> 查找命令路径</li></ol><p>用法：<code>which 命令</code><br>示例：<code>which python</code></p><p>49.<strong>xargs</strong> 参数传递<br>用法：<code>命令 | xargs 目标命令</code><br>示例：<code>find . -name &quot;*.tmp&quot; | xargs rm</code></p><p>50.<strong>tee</strong> 双重输出<br>用法：<code>命令 | tee 文件</code><br>示例：<code>ls -l | tee dirlist.txt</code></p><h2 id="二、bash脚本"><a href="#二、bash脚本" class="headerlink" title="二、bash脚本"></a>二、bash脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Bash 脚本编程指南</span><br><br><span class="hljs-comment">## 目录</span><br>1. [基础语法](#1-基础语法)<br>2. [变量操作](#2-变量操作)<br>3. [输入输出](#3-输入输出)<br>4. [条件判断](#4-条件判断)<br>5. [循环结构](#5-循环结构)<br>6. [函数](#6-函数)<br>7. [调试技巧](#7-调试技巧)<br>8. [实用示例](#8-实用示例)<br><br>---<br><br><span class="hljs-comment">## 1. 基础语法</span><br><br><span class="hljs-comment">### 1.1 脚本结构</span><br>```bash<br><span class="hljs-comment">#!/bin/bash          # Shebang 声明解释器</span><br><span class="hljs-comment"># 这是注释          # 单行注释</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World&quot;</span>   <span class="hljs-comment"># 打印输出</span><br></code></pre></td></tr></table></figure><h3 id="1-2-执行脚本"><a href="#1-2-执行脚本" class="headerlink" title="1.2 执行脚本"></a>1.2 执行脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x script.sh   <span class="hljs-comment"># 添加执行权限</span><br>./script.sh          <span class="hljs-comment"># 直接执行</span><br>bash script.sh       <span class="hljs-comment"># 指定解释器执行</span><br></code></pre></td></tr></table></figure><h3 id="2-变量操作"><a href="#2-变量操作" class="headerlink" title="2. 变量操作"></a>2. 变量操作</h3><h4 id="2-1-变量声明"><a href="#2-1-变量声明" class="headerlink" title="2.1 变量声明"></a>2.1 变量声明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=<span class="hljs-string">&quot;Alice&quot;</span>         <span class="hljs-comment"># 定义变量（等号两边不能有空格）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span>           <span class="hljs-comment"># 使用变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;name&#125;</span>         <span class="hljs-comment"># 推荐使用花括号形式</span><br></code></pre></td></tr></table></figure><h4 id="2-2-环境变量"><a href="#2-2-环境变量" class="headerlink" title="2.2 环境变量"></a>2.2 环境变量</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">export <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/new/path</span>   <span class="hljs-comment"># 设置环境变量</span><br>env                           <span class="hljs-comment"># 查看所有环境变量</span><br></code></pre></td></tr></table></figure><h4 id="2-3-特殊变量"><a href="#2-3-特殊变量" class="headerlink" title="2.3 特殊变量"></a>2.3 特殊变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$0</span>    脚本名称<br><span class="hljs-variable">$1</span>-<span class="hljs-variable">$9</span> 位置参数<br><span class="hljs-variable">$#</span>    参数数量<br><span class="hljs-variable">$@</span>    所有参数（数组）<br>$*    所有参数（字符串）<br>$?    上条命令的退出码<br>$$    当前进程PID<br></code></pre></td></tr></table></figure><hr><h3 id="3-输入输出"><a href="#3-输入输出" class="headerlink" title="3. 输入输出"></a>3. 输入输出</h3><h4 id="3-1-输入读取"><a href="#3-1-输入读取" class="headerlink" title="3.1 输入读取"></a>3.1 输入读取</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Enter name: &quot;</span> username<br></code></pre></td></tr></table></figure><h4 id="3-2-格式化输出"><a href="#3-2-格式化输出" class="headerlink" title="3.2 格式化输出"></a>3.2 格式化输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Name: %s\nAge: %d\n&quot;</span> <span class="hljs-string">&quot;Bob&quot;</span> 25<br></code></pre></td></tr></table></figure><h4 id="3-3-文件重定向"><a href="#3-3-文件重定向" class="headerlink" title="3.3 文件重定向"></a>3.3 文件重定向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;内容&quot;</span> &gt; file.txt    <span class="hljs-comment"># 覆盖写入</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;追加&quot;</span> &gt;&gt; file.txt   <span class="hljs-comment"># 追加写入</span><br><span class="hljs-built_in">command</span> &lt; input.txt      <span class="hljs-comment"># 输入重定向</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-条件判断"><a href="#4-条件判断" class="headerlink" title="4. 条件判断"></a>4. 条件判断</h3><h4 id="4-1-基本语法"><a href="#4-1-基本语法" class="headerlink" title="4.1 基本语法"></a>4.1 基本语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ condition ]; <span class="hljs-keyword">then</span><br>    commands<br><span class="hljs-keyword">elif</span> [ condition ]; <span class="hljs-keyword">then</span><br>    commands<br><span class="hljs-keyword">else</span><br>    commands<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h4 id="4-2-常用测试运算符"><a href="#4-2-常用测试运算符" class="headerlink" title="4.2 常用测试运算符"></a>4.2 常用测试运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 字符串比较</span><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$str</span>&quot;</span> ]    <span class="hljs-comment"># 空字符串</span><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$b</span>&quot;</span> ] <span class="hljs-comment"># 相等</span><br><br><span class="hljs-comment"># 数值比较</span><br>[ <span class="hljs-variable">$a</span> -eq <span class="hljs-variable">$b</span> ]    <span class="hljs-comment"># 等于</span><br>[ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]    <span class="hljs-comment"># 大于</span><br><br><span class="hljs-comment"># 文件测试</span><br>[ -f file ]      <span class="hljs-comment"># 是普通文件</span><br>[ -d <span class="hljs-built_in">dir</span> ]       <span class="hljs-comment"># 是目录</span><br>[ -x file ]      <span class="hljs-comment"># 可执行</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-循环结构"><a href="#5-循环结构" class="headerlink" title="5. 循环结构"></a>5. 循环结构</h3><h4 id="5-1-for循环"><a href="#5-1-for循环" class="headerlink" title="5.1 for循环"></a>5.1 for循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> *.txt; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Processing <span class="hljs-variable">$file</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="5-2-while循环"><a href="#5-2-while循环" class="headerlink" title="5.2 while循环"></a>5.2 while循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">count=1<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$count</span> -le 5 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$count</span><br>    ((count++))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="5-3-until循环"><a href="#5-3-until循环" class="headerlink" title="5.3 until循环"></a>5.3 until循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">count=1<br><span class="hljs-keyword">until</span> [ <span class="hljs-variable">$count</span> -gt 5 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$count</span><br>    ((count++))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h3><h4 id="6-1-定义函数"><a href="#6-1-定义函数" class="headerlink" title="6.1 定义函数"></a>6.1 定义函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">greet</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> name=<span class="hljs-variable">$1</span>  <span class="hljs-comment"># 局部变量</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$name</span>&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-调用函数"><a href="#6-2-调用函数" class="headerlink" title="6.2 调用函数"></a>6.2 调用函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">greet <span class="hljs-string">&quot;Alice&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-3-返回值"><a href="#6-3-返回值" class="headerlink" title="6.3 返回值"></a>6.3 返回值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">add</span></span>() &#123;<br>    <span class="hljs-built_in">return</span> $((<span class="hljs-variable">$1</span> + <span class="hljs-variable">$2</span>))<br>&#125;<br>add 3 5<br><span class="hljs-built_in">echo</span> $?  <span class="hljs-comment"># 输出8</span><br></code></pre></td></tr></table></figure><hr><h3 id="7-调试技巧"><a href="#7-调试技巧" class="headerlink" title="7. 调试技巧"></a>7. 调试技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -x script.sh      <span class="hljs-comment"># 显示执行过程</span><br><span class="hljs-built_in">set</span> -x                 <span class="hljs-comment"># 开启调试模式</span><br><span class="hljs-built_in">set</span> +x                 <span class="hljs-comment"># 关闭调试模式</span><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;echo ERROR&#x27;</span> ERR  <span class="hljs-comment"># 错误捕获</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-实用示例"><a href="#8-实用示例" class="headerlink" title="8. 实用示例"></a>8. 实用示例</h3><h4 id="8-1-备份脚本"><a href="#8-1-备份脚本" class="headerlink" title="8.1 备份脚本"></a>8.1 备份脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>backup_dir=<span class="hljs-string">&quot;/backup&quot;</span><br>tar -czf <span class="hljs-variable">$backup_dir</span>/$(<span class="hljs-built_in">date</span> +%Y%m%d).tar.gz /data<br></code></pre></td></tr></table></figure><h4 id="8-2-批量重命名"><a href="#8-2-批量重命名" class="headerlink" title="8.2 批量重命名"></a>8.2 批量重命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> *.jpg; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> <span class="hljs-string">&quot;photo_<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="8-3-服务监控"><a href="#8-3-服务监控" class="headerlink" title="8.3 服务监控"></a>8.3 服务监控</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> ! pgrep -x <span class="hljs-string">&quot;nginx&quot;</span> &gt;/dev/null; <span class="hljs-keyword">then</span><br>    systemctl start nginx<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>变量赋值等号两边不能有空格</li><li>字符串比较使用双引号包裹变量</li><li>使用 <code>[[ ]]</code> 代替 <code>[ ]</code> 支持更多特性</li><li>算术运算使用 <code>$(( ))</code></li><li>脚本开头建议添加 <code>set -euo pipefail</code> 增强健壮性</li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维自动化之Ansible--(2)</title>
    <link href="/2025/05/01/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8BAnsible-2/"/>
    <url>/2025/05/01/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8BAnsible-2/</url>
    
    <content type="html"><![CDATA[<h1 id="第二篇文章"><a href="#第二篇文章" class="headerlink" title="第二篇文章"></a>第二篇文章</h1><h2 id="开始实操："><a href="#开始实操：" class="headerlink" title="开始实操："></a>开始实操：</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rpm包安装: EPEL源</span><br>    yum install ansible<br><br><span class="hljs-comment"># 编译安装:</span><br>    yum -y install python-jinja2 PyYAML python-paramiko python-babel python-crypto<br>    tar xf ansible-1.5.4.tar.gz<br>    <span class="hljs-built_in">cd</span> ansible-1.5.4<br>    python setup.py build<br>    python setup.py install<br>    <span class="hljs-built_in">mkdir</span> /etc/ansible<br>    <span class="hljs-built_in">cp</span> -r examples/* /etc/ansible<br><br><br><span class="hljs-comment"># Git方式:</span><br>    git <span class="hljs-built_in">clone</span> git://github.com/ansible/ansible.git --recursive<br>    <span class="hljs-built_in">cd</span> ./ansible<br>    <span class="hljs-built_in">source</span> ./hacking/env-setup<br><br><span class="hljs-comment"># pip安装： pip是安装Python包的管理器，类似yum</span><br>    yum install python-pip python-devel<br>    yum install gcc glibc-devel zibl-devel rpm-bulid openssl-devel<br>    pip install --upgrade pip<br>    pip install ansible --upgrade<br><br><span class="hljs-comment"># 确认安装：</span><br>    ansible --version<br></code></pre></td></tr></table></figure><h3 id="2-配置文件（相关工具）"><a href="#2-配置文件（相关工具）" class="headerlink" title="2. 配置文件（相关工具）"></a>2. 配置文件（相关工具）</h3><ul><li>​    &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg  主配置文件,配置ansible工作特性(一般无需修改)</li><li>​    &#x2F;etc&#x2F;ansible&#x2F;hosts        主机清单(将被管理的主机放到此文件)</li><li>​    &#x2F;etc&#x2F;ansible&#x2F;roles&#x2F;       存放角色的目录</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible          主程序，临时命令执行工具</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible-doc      查看配置文档，模块功能查看工具</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible-galaxy   下载&#x2F;上传优秀代码或Roles模块的官网平台</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible-playbook 定制自动化任务，编排剧本工具</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible-pull     远程执行命令的工具</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible-vault    文件加密工具</li><li>​    &#x2F;usr&#x2F;bin&#x2F;ansible-console  基于Console界面与用户交互的执行工具</li></ul><h3 id="3-ansible-主配置文件"><a href="#3-ansible-主配置文件" class="headerlink" title="3. ansible 主配置文件"></a>3. ansible 主配置文件</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs clean">Ansible 配置文件/etc/ansible/ansible.cfg （一般保持默认）<br><br>vim /etc/ansible/ansible.cfg<br><br>[defaults]<br>#inventory     = /etc/ansible/hosts      # 主机列表配置文件<br>#library       = /usr/share/my_modules/  # 库文件存放目录<br>#remote_tmp    = $HOME/.ansible/tmp      # 临时py命令文件存放在远程主机目录<br>#local_tmp     = $HOME/.ansible/tmp      # 本机的临时命令执行目录  <br>#forks         = <span class="hljs-number">5</span>                       # 默认并发数,同时可以执行<span class="hljs-number">5</span>次<br>#sudo_user     = root                    # 默认sudo 用户<br>#ask_sudo_pass = <span class="hljs-literal">True</span>                    # 每次执行ansible命令是否询问ssh密码<br>#ask_pass      = <span class="hljs-literal">True</span>                    # 每次执行ansible命令是否询问ssh口令<br>#remote_port   = <span class="hljs-number">22</span>                      # 远程主机的端口号(默认<span class="hljs-number">22</span>)<br><br>建议优化项： <br>host_key_checking = <span class="hljs-literal">False</span>               # 检查对应服务器的host_key，建议取消注释<br>log_path=/var/log/ansible.log           # 日志文件,建议取消注释<br>module_name   = command                 # 默认模块<br></code></pre></td></tr></table></figure><h3 id="4-inventory-主机清单"><a href="#4-inventory-主机清单" class="headerlink" title="4. inventory 主机清单"></a>4. inventory 主机清单</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">Inventory 主机清单<br>1&gt; ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory file中将其分组命名 <br>2&gt; 默认的inventory file为/etc/ansible/hosts<br>3&gt; inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成<br><br>/etc/ansible/hosts文件格式<br>inventory文件遵循INI文件风格，中括号中的字符为组名。<br>可以将同一个主机同时归并到多个不同的组中；<br>此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明<br>    ntp.magedu.com   不分组,直接加<br>    <br>    [webservers]     webservers组<br>    www1.magedu.com:2222  可以指定端口<br>    www2.magedu.com<br>    <br>    [dbservers]<br>    db1.magedu.com<br>    db2.magedu.com<br>    db3.magedu.com<br><br>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机<br>示例：<br>    [websrvs]<br>    www[1:100].example.com   ip: 1-100<br>    <br>    [dbsrvs]<br>    db-[a:f].example.com     dba-dbff<br></code></pre></td></tr></table></figure><h3 id="5-ansible系列命令"><a href="#5-ansible系列命令" class="headerlink" title="5. ansible系列命令"></a>5. ansible系列命令</h3><p><strong>利用ansible实现管理的主要方式：</strong></p><ul><li>Ad-Hoc 即利用ansible命令，主要用于临时命令使用场景</li><li>Ansible-playbook 主要用于长期规划好的，大型项目的场景，需要有前期的规划过程</li></ul><h4 id="5-1-ansible-doc-显示模块帮助"><a href="#5-1-ansible-doc-显示模块帮助" class="headerlink" title="5.1 ansible-doc (显示模块帮助)"></a>5.1 ansible-doc (显示模块帮助)</h4><p><em>ansible-doc: 显示模块帮助</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible-doc [options] [module...]<br>        -a            显示所有模块的文档<br>        -l, --list    列出可用模块<br>        -s, --snippet 显示指定模块的playbook片段(简化版,便于查找语法)<br><br>示例：<br>    ansible-doc -l      列出所有模块<br>    ansible-doc ping    查看指定模块帮助用法<br>    ansible-doc -s ping 查看指定模块帮助用法<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Ansible系列命令<br>    ansible ansible-doc ansible-playbook ansible-vault ansible-<span class="hljs-built_in">console</span><br>    ansible-galaxy ansible-pull<br></code></pre></td></tr></table></figure><h4 id="5-2-ansible"><a href="#5-2-ansible" class="headerlink" title="5.2 ansible"></a>5.2 ansible</h4><p>ansible通过ssh实现配置管理、应用部署、任务执行等功能，<br>建议：使用之前，先配置ansible主控端能基于密钥认证的方式联系各个被管理节点</p><p>范例：利用sshpass批量实现基于key验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -f /root/.ssh/id_rsa -P <span class="hljs-string">&#x27;&#x27;</span><br>NET=192.168.135<br><span class="hljs-built_in">export</span> SSHPASS=magedu<br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> &#123;1..200&#125;;<span class="hljs-keyword">do</span><br>sshpass -e ssh-copy-id <span class="hljs-variable">$NET</span>.<span class="hljs-variable">$IP</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h5 id="5-3-ansible的ping"><a href="#5-3-ansible的ping" class="headerlink" title="5.3 ansible的ping"></a>5.3 ansible的ping</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">格式：<br>ansible &lt;host-pattern&gt; [-m module_name] [-a args]<br>例子：ansible target_hosts -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&quot;echo 1&quot;</span><br>ansible + 被管理的主机(分组名 例：webserver/all--&gt;所有主机) + 模块名 + 参数<br>    --version              显示版本<br>    -m module              指定模块，默认为<span class="hljs-built_in">command</span><br>    -v                     详细过程 –vv -vvv更详细<br>    --list-hosts           显示主机列表，可简写 --list<br>    -k, --ask-pass         提示输入ssh连接密码,默认Key验证<br>    -C, --check            检查，并不执行<br>    -T, --<span class="hljs-built_in">timeout</span>=TIMEOUT  执行命令的超时时间,默认10s<br>    -u, --user=REMOTE_USER 执行远程执行的用户<br>    -b, --become           代替旧版的<span class="hljs-built_in">sudo</span>切换<br>        --become-user=USERNAME 指定<span class="hljs-built_in">sudo</span>的runas用户,默认为root<br>    -K, --ask-become-pass  提示输入<span class="hljs-built_in">sudo</span>时的口令<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ansible all --list 或 --list-hosts  列出所有主机</span><br>ping模块: 探测网络中被管理主机是否能够正常使用  走ssh协议<br>          如果对方主机网络正常,返回pong<br><br><span class="hljs-comment"># 检测所有主机的网络状态</span><br>1&gt;  默认情况下连接被管理的主机是ssh基于key验证,如果没有配置key,权限将会被拒绝<br>    因此需要指定以谁的身份连接,输入用户密码,必须保证被管理主机用户密码一致<br>    ansible all -m ping -k<br><br>2&gt; 或者实现基于key验证 将公钥ssh-copy-id到被管理的主机上 , 实现免密登录<br>   ansible all -m ping<br><br>3&gt; 指定使用用户连接,注意不同用户之间的认证不通的，所以使用root登陆过但用其他用户登录依旧需要再次输入密码<br>   ansible all -u bote798 -m ping<br><span class="hljs-comment"># 检查所有主机的连接性</span><br>ansible all -m ping  <br><br><span class="hljs-comment"># 1.以下报错代表被管理主机SSH连接没有确认</span><br><span class="hljs-comment"># 当被控主机较多时我们不能逐个点击确认，所以我们需要在配置文件ansible.cfg中的host-key-checking 注释删掉，并且改成false，代表无需确认。</span><br>192.168.135.143 | UNREACHABLE! =&gt; &#123;<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;Failed to connect to the host via ssh: ssh: Host verification failed&quot;</span>,<br>    <span class="hljs-string">&quot;unreachable&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-comment"># 2.没有做key验证（默认是key验证，使用用户名密码）</span><br>192.168.135.143 | UNREACHABLE! =&gt; &#123;<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;Failed to connect to the host via ssh:root@192.168.135.143: Permission denied (publickey，password).&quot;</span>,<br>    <span class="hljs-string">&quot;unreachable&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment"># 检查所有主机连通性并输入密码验证连接</span><br><span class="hljs-comment"># 注意这种方式只给一次输入密码的机会，所以会出现密码正确的成功，不正确的失败</span><br>ansible all -k -m ping<br><span class="hljs-comment"># 成功：</span><br>192.168.135.142 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/bin/python3&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br><span class="hljs-comment"># 失败：</span><br>192.168.135.143 | UNREACHABLE! =&gt; &#123;<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;Invalid/incorrect password: \nAuthorized users only. All activities may be monitored and reported.\nPermission denied, please try again.&quot;</span>,<br>    <span class="hljs-string">&quot;unreachable&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment"># （1）通过使用ssh-keygen生成密钥对</span><br><span class="hljs-comment"># （2）使用ssh-copy-id 目标主机ip ，将本地公钥复制到目标主机</span><br><span class="hljs-comment"># 这样再使用 ansible all -m ping ，就不必输入密码了</span><br><span class="hljs-comment"># 但当主机过多时，需要使用脚本快速处理：</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">ssh-keygen -f /root/.ssh/id_rsa -P &#x27;&#x27;</span><br><span class="hljs-string">NET=192.168.135</span><br><span class="hljs-string">export SSHPASS=magedu</span><br><span class="hljs-string">for IP in &#123;1..200&#125;;do</span><br><span class="hljs-string">sshpass -e ssh-copy-id <span class="hljs-variable">$NET</span>.<span class="hljs-variable">$IP</span></span><br><span class="hljs-string">done</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-3-ansible的Host-pattern"><a href="#5-3-ansible的Host-pattern" class="headerlink" title="5.3 ansible的Host-pattern"></a>5.3 ansible的Host-pattern</h4><p>匹配主机的列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># All ：表示所有Inventory中的所有主机</span><br>    ansible all –m ping<br><br><span class="hljs-comment"># * :通配符</span><br>    ansible <span class="hljs-string">&quot;*&quot;</span> -m ping  (*表示所有主机)<br>    ansible 192.168.135.* -m ping<br>    ansible <span class="hljs-string">&quot;*srvs&quot;</span> -m ping<br><br><span class="hljs-comment"># 或关系 &quot;:&quot;</span><br>    ansible <span class="hljs-string">&quot;webserver:appserver&quot;</span> -m ping<br>    ansible “192.168.135.142:192.168.135.143” -m ping<br>    哪个成功就先返回哪个，并且随后在一段时间后返回连接错误的<br><br><span class="hljs-comment"># 逻辑与 &quot;:&amp;&quot;</span><br>    ansible <span class="hljs-string">&quot;webserver:&amp;dbserver&quot;</span> –m ping<br>    在websrvs组并且在dbsrvs组中的主机<br><br><span class="hljs-comment"># 逻辑非 &quot;:!&quot;</span><br>    ansible <span class="hljs-string">&#x27;webserver:!dbserver&#x27;</span> –m ping<br>    在websrvs组，但不在dbsrvs组中的主机<br>    注意：此处为单引号,双引号不生效<br><br><span class="hljs-comment"># 综合逻辑</span><br>    ansible <span class="hljs-string">&#x27;webserver:dbserver:&amp;appserver:!ftpserver&#x27;</span> –m ping<br><br><span class="hljs-comment"># 正则表达式</span><br>    ansible <span class="hljs-string">&quot;webserver:&amp;dbserver&quot;</span> –m ping<br>    ansible <span class="hljs-string">&quot;~(web|db).*\.magedu\.com&quot;</span> –m ping<br>    ansible <span class="hljs-string">&quot;~(web|db|app).*&quot;</span> -m ping<br>        <span class="hljs-comment"># ~ ：表示后续内容是正则表达式。</span><br>        <span class="hljs-comment"># (web|db) ：匹配 web 或 db 中的任意一个。</span><br>        <span class="hljs-comment"># .* ：匹配任意字符（零次或多次）。</span><br>        <span class="hljs-comment"># \.magedu\.com（主机名） ：匹配 .magedu.com（注意 \. 转义为实际的点号）。</span><br></code></pre></td></tr></table></figure><h4 id="5-4-ansible命令执行过程"><a href="#5-4-ansible命令执行过程" class="headerlink" title="5.4 ansible命令执行过程"></a>5.4 ansible命令执行过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ansible命令执行过程</span><br>    1. 加载自己的配置文件 默认/etc/ansible/ansible.cfg<br>    2. 加载自己对应的模块文件，如<span class="hljs-built_in">command</span><br>    3. 通过ansible将模块或命令生成对应的临时py文件，<br>       并将该文件传输至远程服务器的对应执行用户<span class="hljs-variable">$HOME</span>/.ansible/tmp/ansible-tmp-数字/XXX.PY文件<br>    4. 给文件+x执行<br>    5. 执行并返回结果<br>    6. 删除临时py文件，<span class="hljs-built_in">sleep</span> 0退出<br>    <br><span class="hljs-comment"># 可以给执行的命令后面加 -v ，这样就会显示执行过程，加的v越多越详细</span><br>ansible <span class="hljs-string">&quot;~(web|db|app).*&quot;</span> -m ping &gt; /home/ansible.log<br>grep <span class="hljs-built_in">chmod</span> /home/ansible.log<br><span class="hljs-comment"># 这样我们就可以看到中途给命令加了执行权限</span><br><br>执行状态：<br>    绿色：执行成功并且不需要做改变的操作<br>    黄色：执行成功并且对目标主机做变更<br>    红色：执行失败<br></code></pre></td></tr></table></figure><h4 id="5-5-ansible使用示例"><a href="#5-5-ansible使用示例" class="headerlink" title="5.5 ansible使用示例"></a>5.5 ansible使用示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">示例<br>    以wang用户执行ping存活检测<br>        ansible all -m<span class="hljs-built_in"> ping </span>-u wang -k<br>    以wang sudo至root执行ping存活检测<br>        ansible all -m<span class="hljs-built_in"> ping </span>-u wang -k -b<br>    以wang sudo至mage用户执行ping存活检测<br>        ansible all -m<span class="hljs-built_in"> ping </span>-u wang -k -b <span class="hljs-attribute">--become-user</span>=mage<br>    以wang sudo至root用户执行ls<br>        ansible all -m command -u wang -a <span class="hljs-string">&#x27;ls /root&#x27;</span> -b <span class="hljs-attribute">--become-user</span>=root -k -K<br><br>ansible ping模块测试连接<br>    ansible 192.168.38.126,192.168.38.127 -m<span class="hljs-built_in"> ping </span>-k <br></code></pre></td></tr></table></figure><h4 id="5-6-ansible相关工具"><a href="#5-6-ansible相关工具" class="headerlink" title="5.6 ansible相关工具"></a>5.6 ansible相关工具</h4><p>模块文档：<a href="https://docs.ansible.com/ansible/latest/modules/modules_by_category.html">https://docs.ansible.com/ansible/latest/modules/modules_by_category.html</a></p><h5 id="5-6-1-ansible-galaxy"><a href="#5-6-1-ansible-galaxy" class="headerlink" title="5.6.1 ansible-galaxy"></a>5.6.1 ansible-galaxy</h5><p>此工具会链接<a href="https://galaxy.ansible.com下载对应的roles/">https://galaxy.ansible.com下载对应的roles</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装指定的roles</span><br>ansible-galaxy install xxxx<br><span class="hljs-comment"># 例子：</span><br>ansible-galaxy install geerlingguy.nginx<br><br><span class="hljs-comment"># 查看下载的 role</span><br>ansible-galaxy list <br><br><span class="hljs-comment"># role都会默认被下载到 /root/.ansible/roles/ 这个目录下</span><br><span class="hljs-comment"># 删除role</span><br>ansible-galaxy remove geerlingguy.mysql<br><span class="hljs-built_in">rm</span> -rf geerlingguy.mysql<br><br><span class="hljs-comment"># 以树形查看文件结构</span><br>[root@control-141 roles]# tree geerlingguy.mysql/<br>geerlingguy.mysql/<br>├── defaults<br>│   └── main.yml<br>├── handlers<br>│   └── main.yml<br>├── LICENSE<br>├── meta<br>│   └── main.yml<br>├── molecule<br>│   └── default<br>│       ├── converge.yml<br>│       └── molecule.yml<br>├── README.md<br>├── tasks<br>│   ├── configure.yml<br>│   ├── databases.yml<br>│   ├── main.yml<br>│   ├── replication.yml<br>│   ├── secure-installation.yml<br>│   ├── setup-Archlinux.yml<br>│   ├── setup-Debian.yml<br>│   ├── setup-RedHat.yml<br>│   ├── users.yml<br>│   └── variables.yml<br>├── templates<br>│   ├── my.cnf.j2<br>│   ├── root-my.cnf.j2<br>│   └── user-my.cnf.j2<br>└── vars<br>    ├── Archlinux.yml<br>    ├── Debian-10.yml<br>    ├── Debian-11.yml<br>    ├── Debian-12.yml<br>    ├── Debian.yml<br>    ├── RedHat-7.yml<br>    ├── RedHat-8.yml<br>    ├── RedHat-9.yml<br>    └── Ubuntu.yml<br>    <br><span class="hljs-comment"># 每一个yml文件都是一个脚本（role），都可以拿来运行，也可以进行修改</span><br></code></pre></td></tr></table></figure><h5 id="5-6-2-ansible-pull"><a href="#5-6-2-ansible-pull" class="headerlink" title="5.6.2 ansible-pull"></a>5.6.2 ansible-pull</h5><p>此工具会推送ansible的命令至远程，效率无限提升，对运维要求较高</p><h5 id="5-6-3-ansbile-playbook"><a href="#5-6-3-ansbile-playbook" class="headerlink" title="5.6.3 ansbile-playbook"></a>5.6.3 ansbile-playbook</h5><p>此工具用于执行编写好的playbook任务</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible-playbook hello.yml<br><span class="hljs-built_in">cat</span> hello.yml<br>---<br><span class="hljs-comment"># hello world yml file</span><br>- hosts: webserver<br>  remote_user: root<br>  tasks:<br>  - name: hello world<br>    <span class="hljs-built_in">command</span>: /usr/bin/wall hello world<br></code></pre></td></tr></table></figure><h5 id="5-6-4-ansible-vault"><a href="#5-6-4-ansible-vault" class="headerlink" title="5.6.4 ansible-vault"></a>5.6.4 ansible-vault</h5><p>此工具可以用于加密解密yml文件</p><h5 id="5-6-5-ansible-console"><a href="#5-6-5-ansible-console" class="headerlink" title="5.6.5 ansible-console"></a>5.6.5 ansible-console</h5><p>此工具可交互执行命令，支持tab，ansible 2.0+新增</p><p>提示符格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行用户@当前操作的主机组(当前组的主机数量)[f:并发数]$<br></code></pre></td></tr></table></figure><p><strong>常用子命令：</strong></p><ul><li>设置并发数：forks n例如：forks 10</li><li>切换组：cd 主机组例如：cd web</li><li>列出当前组主机列表：list</li><li>列出所有的内置命令：？或help</li></ul><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@control-141 home]# ansible-console<br>Welcome to the ansible console.<br>Type <span class="hljs-built_in">help</span> or ? to list commands.<br><br>root@all (3)[f:5]$ forks 3<br>root@all (3)[f:3]$ forks 5<br>root@all (3)[f:5]$ <span class="hljs-built_in">cd</span> webserver<br>root@webserver (2)[f:5]$ list<br>192.168.135.143<br>192.168.135.144<br>root@webserver (2)[f:5]$ <span class="hljs-built_in">cd</span> all<br>root@all (3)[f:5]$ <span class="hljs-built_in">ls</span><br>192.168.135.144 | CHANGED | rc=0 &gt;&gt;<br>anaconda-ks.cfg<br>192.168.135.142 | CHANGED | rc=0 &gt;&gt;<br>anaconda-ks.cfg<br>192.168.135.143 | CHANGED | rc=0 &gt;&gt;<br>anaconda-ks.cfg<br>root@all (3)[f:5]$ ?<br><br>Documented commands (<span class="hljs-built_in">type</span> <span class="hljs-built_in">help</span> &lt;topic&gt;):<br>========================================<br>EOF<br>a10<br>a10_server<br>a10_server_axapi3<br>a10_service_group<br>a10_virtual_server<br>accelerate<br>......<br><br><span class="hljs-comment"># 自己搜一下</span><br>root@appsrvs (2)[f:5]$ yum name=httpd state=present<br>root@appsrvs (2)[f:5]$ service name=httpd state=started<br></code></pre></td></tr></table></figure><h4 id="5-7-ansible常用模块"><a href="#5-7-ansible常用模块" class="headerlink" title="5.7 ansible常用模块"></a>5.7 ansible常用模块</h4><p>功能：在远程主机执行命令，此为默认模块，可忽略 -m选项</p><p>注意：此命令不支持 $VARNAME &lt; &gt; | ; &amp; 等，用shell模块实现</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@control-141 ansible]# ansible appserver -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&#x27;cat /etc/system-release&#x27;</span><br>192.168.135.144 | CHANGED | rc=0 &gt;&gt;<br>openEuler release 24.03 (LTS-SP1)<br>192.168.135.142 | CHANGED | rc=0 &gt;&gt;<br>openEuler release 24.03 (LTS-SP1)<br>192.168.135.143 | CHANGED | rc=0 &gt;&gt;<br>openEuler release 24.03 (LTS-SP1)<br><br><span class="hljs-comment"># chdir:   修改当前进程得到路径进程（进入到被管理主机目录）</span><br><span class="hljs-comment"># 以下相当于批量执行：</span><br><span class="hljs-comment"># cd /etc; cat system-release</span><br>[root@control-141 ~]# ansible webserver -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&#x27;chdir=/etc cat system-release&#x27;</span><br>192.168.135.143 | CHANGED | rc=0 &gt;&gt;<br>openEuler release 24.03 (LTS-SP1)<br>192.168.135.144 | CHANGED | rc=0 &gt;&gt;<br>openEuler release 24.03 (LTS-SP1)<br><br><span class="hljs-comment"># creates：如果文件存在,就不执行后面的Command命令，不存在就执行</span><br><span class="hljs-comment"># removes：和creates相反，如果文件存在就执行，不存在就不执行</span><br>[root@control-141 etc]# ansible webserver -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&#x27;chdir=/etc creates=/home/1.txt cat system-release&#x27;</span><br>192.168.135.144 | CHANGED | rc=0 &gt;&gt;<br>openEuler release 24.03 (LTS-SP1)<br>192.168.135.143 | SUCCESS | rc=0 &gt;&gt;<br>skipped, since /home/1.txt exists<span class="hljs-comment"># 存在1.txt</span><br></code></pre></td></tr></table></figure><p><em>command的局限性：有很多符号（例： $VARNAME &lt; &gt; | ; &amp;等）都不支持，导致很多命令无法使用。</em></p><h5 id="5-7-2-Shell-模块"><a href="#5-7-2-Shell-模块" class="headerlink" title="5.7.2 Shell 模块"></a>5.7.2 Shell 模块</h5><p>功能：和command相似，但比command功能更多，用shell执行命令</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible webserver -m shell -a <span class="hljs-string">&#x27;echo $HOSTNAME&#x27;</span><br><br><span class="hljs-comment"># 修改配置文件,使shell作为默认模块,方便使用    </span><br>vim /etc/ansible/ansible.cfg<br>module_name = shell  <span class="hljs-comment">#注意是把command删掉改为shell，不是直接加，否则会报错。</span><br></code></pre></td></tr></table></figure><p>注意：调用bash执行命令，类似 cat &#x2F;tmp&#x2F;test.md | awk -F ‘|’’{print 1,2}’&amp;&gt; &#x2F;tmp&#x2F;example.txt这些复杂命令，即使使用shell也可能会失败。</p><p>解决办法：写到脚本中，copy到远程，执行，再把需要的结果拉回执行命令的机器</p><h5 id="5-7-3-Script-模块"><a href="#5-7-3-Script-模块" class="headerlink" title="5.7.3 Script 模块"></a>5.7.3 Script 模块</h5><p>功能：在远程主机上运行ansible服务器上的脚本</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ansible 目标端（组） -m script -a &quot;/PATH/TO/SCRIPT_FILE&quot;</span><br><span class="hljs-comment"># ansible webserver -m script -a /home/demo.sh</span><br>192.168.135.144 | CHANGED =&gt; &#123;<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;rc&quot;</span>: 0,<br>    <span class="hljs-string">&quot;stderr&quot;</span>: <span class="hljs-string">&quot;Shared connection to 192.168.135.144 closed.\r\n&quot;</span>,<br>    <span class="hljs-string">&quot;stderr_lines&quot;</span>: [<br>        <span class="hljs-string">&quot;Shared connection to 192.168.135.144 closed.&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;stdout&quot;</span>: <span class="hljs-string">&quot;开始在远端执行\r\n等待 20秒...\r\n等待 10秒...\r\n等待 5秒...\r\n程序结束\r\n&quot;</span>,<br>    <span class="hljs-string">&quot;stdout_lines&quot;</span>: [<br>        <span class="hljs-string">&quot;开始在远端执行&quot;</span>,<br>        <span class="hljs-string">&quot;等待 20秒...&quot;</span>,<br>        <span class="hljs-string">&quot;等待 10秒...&quot;</span>,<br>        <span class="hljs-string">&quot;等待 5秒...&quot;</span>,<br>        <span class="hljs-string">&quot;程序结束&quot;</span><br>    ]<br>&#125;<br>192.168.135.143 | CHANGED =&gt; &#123;<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;rc&quot;</span>: 0,<br>    <span class="hljs-string">&quot;stderr&quot;</span>: <span class="hljs-string">&quot;Shared connection to 192.168.135.143 closed.\r\n&quot;</span>,<br>    <span class="hljs-string">&quot;stderr_lines&quot;</span>: [<br>        <span class="hljs-string">&quot;Shared connection to 192.168.135.143 closed.&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;stdout&quot;</span>: <span class="hljs-string">&quot;开始在远端执行\r\n等待 20秒...\r\n等待 10秒...\r\n等待 5秒...\r\n程序结束\r\n&quot;</span>,<br>    <span class="hljs-string">&quot;stdout_lines&quot;</span>: [<br>        <span class="hljs-string">&quot;开始在远端执行&quot;</span>,<br>        <span class="hljs-string">&quot;等待 20秒...&quot;</span>,<br>        <span class="hljs-string">&quot;等待 10秒...&quot;</span>,<br>        <span class="hljs-string">&quot;等待 5秒...&quot;</span>,<br>        <span class="hljs-string">&quot;程序结束&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment">######</span><br><span class="hljs-comment"># 1.由此可知，script的原理实际上还是将脚本推送到远端执行，执行后将结果返回至控制端</span><br><span class="hljs-comment"># 2.只不过脚本执行完后就会被删除，所以一般我们看不到脚本，使用线程睡眠就可以让我们看到脚本会被推送到 .ansible/tmp/临时生成文件夹/脚本</span><br><span class="hljs-comment">######</span><br><span class="hljs-comment"># cd .ansible/tmp/ansible-tmp-1746103356.844954-4270-93855660393665</span><br>[root@node2-143 ansible-tmp-1746103356.844954-4270-93855660393665]# <span class="hljs-built_in">ls</span><br>demo.sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始在远端执行&quot;</span><br><br><span class="hljs-comment"># 定义需要等待的时间列表（单位：秒）</span><br><span class="hljs-keyword">for</span> wait_time <span class="hljs-keyword">in</span> 30 20 10<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;等待 <span class="hljs-variable">$&#123;wait_time&#125;</span>秒...&quot;</span><br>    <span class="hljs-built_in">sleep</span> <span class="hljs-variable">$wait_time</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;程序结束&quot;</span><br></code></pre></td></tr></table></figure><h5 id="5-7-4-Copy模块"><a href="#5-7-4-Copy模块" class="headerlink" title="5.7.4 Copy模块"></a>5.7.4 Copy模块</h5><p>功能：从ansible服务器主控端复制文件到远程主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">src : 源文件  指定拷贝文件的本地路径  (如果有/ 则拷贝目录内容,比拷贝目录本身)<br>dest: 指定目标路径<br>mode: 设置权限<br>backup: 备份源文件<br>content: 代替src  指定本机文件内容,生成目标主机文件<br>      <br>&gt; ansible websrvs -m copy -a <span class="hljs-string">&quot;src=/root/test1.sh dest=/tmp/test2.showner=wang mode=600 backup=yes&quot;</span><br>如果目标存在，默认覆盖，此处指定先备份<br>&gt; ansible websrvs -m copy -a <span class="hljs-string">&quot;content=&#x27;test content\nxxx&#x27; dest=/tmp/test.txt&quot;</span><br>指定内容，直接生成目标文件<br></code></pre></td></tr></table></figure><h5 id="5-7-5-Fetch模块"><a href="#5-7-5-Fetch模块" class="headerlink" title="5.7.5 Fetch模块"></a>5.7.5 Fetch模块</h5><p>功能：从远程主机提取文件至主控端，与copy相反，目前不支持目录,可以先打包,再提取文件</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; ansible websrvs -m fetch -a <span class="hljs-string">&#x27;src=/root/test.sh dest=/data/scripts&#x27;</span><br>会生成每个被管理主机不同编号的目录,不会发生文件名冲突<br><br>&gt; ansible all -m shell -a <span class="hljs-string">&#x27;tar jxvf test.tar.gz /root/test.sh&#x27;</span><br>&gt; ansible all -m fetch -a <span class="hljs-string">&#x27;src=/root/test.tar.gz dest=/data/&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="5-7-6-File模块"><a href="#5-7-6-File模块" class="headerlink" title="5.7.6 File模块"></a>5.7.6 File模块</h5><p>功能：设置文件属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">path: 要管理的文件路径 (强制添加)<br>recurse: 递归,文件夹要用递归<br>src:  创建硬链接,软链接时,指定源目标,配合<span class="hljs-string">&#x27;state=link&#x27;</span> <span class="hljs-string">&#x27;state=hard&#x27;</span> 设置软链接,硬链接<br>state: 状态<br>absent 缺席,删除<br>          <br>&gt; ansible websrvs -m file -a <span class="hljs-string">&#x27;path=/app/test.txt state=touch&#x27;</span>       创建文件<br>&gt; ansible websrvs -m file -a <span class="hljs-string">&quot;path=/data/testdir state=directory&quot;</span>   创建目录    <br>&gt; ansible websrvs -m file -a <span class="hljs-string">&quot;path=/root/test.sh owner=wang mode=755&quot;</span>  设置权限755<br>&gt; ansible websrvs -m file -a <span class="hljs-string">&#x27;src=/data/testfile dest=/data/testfile-link state=link&#x27;</span> 创建软链接<br></code></pre></td></tr></table></figure><h5 id="5-7-7-unarchive模块"><a href="#5-7-7-unarchive模块" class="headerlink" title="5.7.7 unarchive模块"></a>5.7.7 unarchive模块</h5><p>功能：解包解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">unarchive：解包解压缩，有两种用法：<br>    1、将ansible主机上的压缩包传到远程主机后解压缩至特定目录，设置copy=<span class="hljs-built_in">yes</span>.<br>    2、将远程主机上的某个压缩包解压缩到指定路径下，设置copy=no<br><br>    常见参数：<br>        copy：默认为<span class="hljs-built_in">yes</span>，当copy=<span class="hljs-built_in">yes</span>，拷贝的文件是从ansible主机复制到远程主机上，<br>              如果设置为copy=no，会在远程主机上寻找src源文件<br>        src： 源路径，可以是ansible主机上的路径，也可以是远程主机上的路径，<br>              如果是远程主机上的路径，则需要设置copy=no<br>        dest：远程主机上的目标路径<br>        mode：设置解压缩后的文件权限<br>    <br>示例：<br>    ansible websrvs -m unarchive -a <span class="hljs-string">&#x27;src=foo.tgz dest=/var/lib/foo&#x27;</span>  <br>      <span class="hljs-comment">#默认copy为yes ,将本机目录文件解压到目标主机对应目录下</span><br>    ansible websrvs -m unarchive -a <span class="hljs-string">&#x27;src=/tmp/foo.zip dest=/data copy=no mode=0777&#x27;</span><br>      <span class="hljs-comment"># 解压被管理主机的foo.zip到data目录下, 并设置权限777</span><br>    ansible websrvs -m unarchive -a <span class="hljs-string">&#x27;src=https://example.com/example.zip dest=/data copy=no&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="5-7-8-archive模块"><a href="#5-7-8-archive模块" class="headerlink" title="5.7.8 archive模块"></a>5.7.8 archive模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">archive：打包压缩<br>    &gt; ansible all -m archive -a <span class="hljs-string">&#x27;path=/etc/sysconfig dest=/data/sysconfig.tar.bz2 format=bz2 owner=wang mode=0777&#x27;</span><br>    将远程主机目录打包 <br>        path:   指定路径<br>        dest:   指定目标文件<br>        format: 指定打包格式<br>        owner:  指定所属者<br>        mode:   设置权限<br></code></pre></td></tr></table></figure><h5 id="5-7-9-Hostname模块"><a href="#5-7-9-Hostname模块" class="headerlink" title="5.7.9 Hostname模块"></a>5.7.9 Hostname模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hostname：管理主机名<br>    ansible appsrvs -m hostname -a <span class="hljs-string">&quot;name=app.adong.com&quot;</span>  更改一组的主机名<br>    ansible 192.168.38.103 -m hostname -a <span class="hljs-string">&quot;name=app2.adong.com&quot;</span> 更改单个主机名<br></code></pre></td></tr></table></figure><h5 id="5-7-10-Cron模块"><a href="#5-7-10-Cron模块" class="headerlink" title="5.7.10 Cron模块"></a>5.7.10 Cron模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Cron：计划任务<br>    支持时间：minute,hour,day,month,weekday<br>    &gt; ansible websrvs -m cron -a <span class="hljs-string">&quot;minute=*/5 job=&#x27;/usr/sbin/ntpdate 172.16.0.1 &amp;&gt;/dev/null&#x27; name=Synctime&quot;</span> <br>    创建任务<br>    &gt; ansible websrvs -m cron -a <span class="hljs-string">&#x27;state=absent name=Synctime&#x27;</span> <br>    删除任务<br>    &gt; ansible websrvs -m cron -a <span class="hljs-string">&#x27;minute=*/10 job=&#x27;</span>/usr/sbin/ntpdate 172.30.0.100<span class="hljs-string">&quot; name=synctime disabled=yes&#x27;</span><br><span class="hljs-string">    注释任务,不在生效</span><br></code></pre></td></tr></table></figure><h5 id="5-7-11-Yum模块"><a href="#5-7-11-Yum模块" class="headerlink" title="5.7.11 Yum模块"></a>5.7.11 Yum模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Yum：管理包<br>    ansible websrvs -m yum -a <span class="hljs-string">&#x27;list=httpd&#x27;</span>  查看程序列表<br>    <br>    ansible websrvs -m yum -a <span class="hljs-string">&#x27;name=httpd state=present&#x27;</span> 安装<br>    ansible websrvs -m yum -a <span class="hljs-string">&#x27;name=httpd state=absent&#x27;</span>  删除<br>    可以同时安装多个程序包<br></code></pre></td></tr></table></figure><h5 id="5-7-12-Service模块"><a href="#5-7-12-Service模块" class="headerlink" title="5.7.12 Service模块"></a>5.7.12 Service模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Service：管理服务<br>    ansible srv -m service -a <span class="hljs-string">&#x27;name=httpd state=stopped&#x27;</span>  停止服务<br>    ansible srv -m service -a <span class="hljs-string">&#x27;name=httpd state=started enabled=yes&#x27;</span> 启动服务,并设为开机自启<br>    ansible srv -m service -a <span class="hljs-string">&#x27;name=httpd state=reloaded&#x27;</span>  重新加载<br>    ansible srv -m service -a <span class="hljs-string">&#x27;name=httpd state=restarted&#x27;</span> 重启服务<br></code></pre></td></tr></table></figure><h5 id="5-7-13-User模块"><a href="#5-7-13-User模块" class="headerlink" title="5.7.13 User模块"></a>5.7.13 User模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">User：管理用户<br>    home   指定家目录路径<br>    system 指定系统账号<br>    group  指定组<br>    remove 清除账户<br>    shell  指定shell类型<br>    <br>    ansible websrvs -m user -a <span class="hljs-string">&#x27;name=user1 comment=&quot;test user&quot; uid=2048 home=/app/user1 group=root&#x27;</span><br>    ansible websrvs -m user -a <span class="hljs-string">&#x27;name=sysuser1 system=yes home=/app/sysuser1&#x27;</span><br>    ansible websrvs -m user -a <span class="hljs-string">&#x27;name=user1 state=absent remove=yes&#x27;</span>  清空用户所有数据<br>    ansible websrvs -m user -a <span class="hljs-string">&#x27;name=app uid=88 system=yes home=/app groups=root shell=/sbin/nologin password=&quot;$1$zfVojmPy$ZILcvxnXljvTI2PhP2Iqv1&quot;&#x27;</span>  创建用户<br>    ansible websrvs -m user -a <span class="hljs-string">&#x27;name=app state=absent&#x27;</span>  不会删除家目录<br>    <br>    安装mkpasswd <br>    yum insatll expect <br>    mkpasswd 生成口令<br>    openssl passwd -1  生成加密口令<br></code></pre></td></tr></table></figure><h5 id="5-7-14-Group模块"><a href="#5-7-14-Group模块" class="headerlink" title="5.7.14 Group模块"></a>5.7.14 Group模块</h5><p>功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">删除用户及家目录等数据<br>    Group：管理组<br>        ansible srv -m group -a <span class="hljs-string">&quot;name=testgroup system=yes&quot;</span>   创建组<br>        ansible srv -m group -a <span class="hljs-string">&quot;name=testgroup state=absent&quot;</span> 删除组<br></code></pre></td></tr></table></figure><h4 id="5-8-日志查看"><a href="#5-8-日志查看" class="headerlink" title="5.8 日志查看"></a>5.8 日志查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ansible的日志文件与大多数一样存放在 /var/log/ 中 ansible.log</span><br><span class="hljs-comment"># 可以查看过去执行过的所有指令</span><br><span class="hljs-built_in">cat</span> /var/log/ansible.log<br></code></pre></td></tr></table></figure><h4 id="5-8-问题汇总"><a href="#5-8-问题汇总" class="headerlink" title="5.8 问题汇总"></a>5.8 问题汇总</h4><h5 id="（1）-warning-警告"><a href="#（1）-warning-警告" class="headerlink" title="（1） [warning]警告"></a>（1） [warning]警告</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行ansible命令时总是出现：[WARNING]: Platform linux on host 192.168.135.142 is using the discovered Python interpreter at /usr/bin/python3, but future installation of another Python interpreter could change this. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more information.</span><br></code></pre></td></tr></table></figure><h6 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改ansible.cfg</span><br><span class="hljs-comment"># 在[defaults]下增加</span><br>interpreter_python = auto_legacy_silent  <span class="hljs-comment"># 增加内容</span><br></code></pre></td></tr></table></figure><h5 id="（2）无法下载别人role"><a href="#（2）无法下载别人role" class="headerlink" title="（2）无法下载别人role"></a>（2）无法下载别人role</h5><p>这种情况一般是网络不行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@control-141 home]# ansible-galaxy install geerlingguy.nginx<br>- downloading role <span class="hljs-string">&#x27;nginx&#x27;</span>, owned by geerlingguy<br>- downloading role from https://github.com/geerlingguy/ansible-role-nginx/archive/3.2.0.tar.gz<br> [ERROR]: failed to download the file: &lt;urlopen error timed out&gt;<br>[WARNING]: - geerlingguy.nginx was NOT installed successfully.<br>ERROR! - you can use --ignore-errors to skip failed roles and finish processing the list.<br></code></pre></td></tr></table></figure><h6 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h6><p>更改国内源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建或编辑 Ansible 配置文件</span><br><span class="hljs-built_in">mkdir</span> -p ~/.ansible<br>vi ~/.ansible/galaxy.cfg<br><br><span class="hljs-comment"># 在文件中添加以下内容：</span><br>[galaxy]<br>server_list = tsinghua_galaxy, release_galaxy, automation_hub<br><br>[galaxy_server.tsinghua_galaxy]<br>url = https://mirrors.tuna.tsinghua.edu.cn/ansible-galaxy/<br>auth_url = https://mirrors.tuna.tsinghua.edu.cn/ansible-galaxy/api/v1/authentications/<br><br>[galaxy_server.release_galaxy]<br>url = https://galaxy.ansible.com/<br><br><span class="hljs-comment"># 保存后重新执行安装命令：</span><br>ansible-galaxy install geerlingguy.nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>自动化</category>
      
      <category>Ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维自动化之Ansible--(1)</title>
    <link href="/2025/05/01/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8BAnsible-1/"/>
    <url>/2025/05/01/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8BAnsible-1/</url>
    
    <content type="html"><![CDATA[<h1 id="运维自动化之ANSIBLE"><a href="#运维自动化之ANSIBLE" class="headerlink" title="运维自动化之ANSIBLE"></a>运维自动化之ANSIBLE</h1><h2 id="一、概述："><a href="#一、概述：" class="headerlink" title="一、概述："></a>一、概述：</h2><h3 id="1-本章内容"><a href="#1-本章内容" class="headerlink" title="1.本章内容"></a>1.本章内容</h3><ul><li>运维自动化发展历程及技术应用</li><li>Ansible命令使用</li><li>Ansible常用模块详解</li><li>YAML语法简介</li><li>Ansible playbook基础</li><li>Playbook变量、tags、handlers使用</li><li>Playbook模板templates</li><li>Playbook条件判断 when</li><li>Playbook字典 with_items</li><li>Ansible Roles</li></ul><h3 id="2-运维自动化发展历程及技术应用"><a href="#2-运维自动化发展历程及技术应用" class="headerlink" title="2.运维自动化发展历程及技术应用"></a>2.运维自动化发展历程及技术应用</h3><p><img src="/img/ansible/1.png" alt="image"></p><h3 id="3-企业实际应用场景分析"><a href="#3-企业实际应用场景分析" class="headerlink" title="3.企业实际应用场景分析"></a>3.企业实际应用场景分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.Dev开发环境</span><br>    使用者：程序员<br>    功能：程序员开发软件，测试BUG的环境<br>    管理者：程序员<br><br><span class="hljs-comment"># 2.测试环境    </span><br>    使用者：QA测试工程师<br>    功能：测试经过Dev环境测试通过的软件的功能<br>    管理者：运维<br><br>说明：测试环境往往有多套,测试环境满足测试功能即可，不宜过多<br>1、测试人员希望测试环境有多套,公司的产品多产品线并发，即多个版本，意味着多个版本同步测试<br>2、通常测试环境有多少套和产品线数量保持一样<br><br><span class="hljs-comment"># 3.发布环境：代码发布机，有些公司为堡垒机（安全屏障）</span><br>    使用者：运维<br>    功能：发布代码至生产环境<br>    管理者：运维（有经验）<br>    发布机：往往需要有2台（主备）<br><br><span class="hljs-comment"># 4.生产环境</span><br>        使用者：运维，少数情况开放权限给核心开发人员，极少数公司将权限完全<br>        开放给开发人员并其维护<br>        功能：对用户提供公司产品的服务<br><br>    管理者：只能是运维<br>        生产环境服务器数量：一般比较多，且应用非常重要。往往需要自动工具协助部署配置应用<br><br><span class="hljs-comment"># 5.灰度环境（生产环境的一部分）</span><br>    使用者：运维<br>    功能：在全量发布代码前将代码的功能面向少量精准用户发布的环境,可基<br>    于主机或用户执行灰度发布<br>    案例：共100台生产服务器，先发布其中的10台服务器，这10台服务器就是灰度服务器<br>    管理者：运维<br>    灰度环境：往往该版本功能变更较大，为保险起见特意先让一部分用户优化体验该功能，<br>              待这部分用户使用没有重大问题的时候，再全量发布至所有服务器<br></code></pre></td></tr></table></figure><h3 id="4-程序发布"><a href="#4-程序发布" class="headerlink" title="4.程序发布"></a>4.程序发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 程序发布要求：</span><br>    不能导致系统故障或造成系统完全不可用<br>    不能影响用户体验<br><span class="hljs-comment"># 预发布验证：</span><br>    新版本的代码先发布到服务器（跟线上环境配置完全相同，只是未接入到调度器）<br><span class="hljs-comment"># 灰度发布：</span><br>    基于主机，用户，业务<br><span class="hljs-comment"># 发布路径：</span><br>    /webapp/tuangou<br>    /webapp/tuangou-1.1<br>    /webapp/tuangou-1.2<br><span class="hljs-comment"># 发布过程：</span><br>1.在调度器上下线一批主机(标记为maintanance状态)<br>2.关闭服务<br>    3.部署新版本的应用程序<br>    4.启动服务<br>    5.在调度器上启用这一批服务器<br><span class="hljs-comment"># 自动化灰度发布：脚本、发布平台</span><br></code></pre></td></tr></table></figure><h3 id="5-运维自动化发展历程及技术应用"><a href="#5-运维自动化发展历程及技术应用" class="headerlink" title="5.运维自动化发展历程及技术应用"></a>5.运维自动化发展历程及技术应用</h3><p><img src="/img/ansible/2.png" alt="image"></p><h3 id="6-自动化运维应用场景"><a href="#6-自动化运维应用场景" class="headerlink" title="6.自动化运维应用场景"></a>6.自动化运维应用场景</h3><ul><li>文件传输</li><li>应用部署</li><li>配置管理</li><li>任务流编排</li></ul><h3 id="7-常用自动化运维工具"><a href="#7-常用自动化运维工具" class="headerlink" title="7.常用自动化运维工具"></a>7.常用自动化运维工具</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">Ansible：<span class="hljs-keyword">python</span>，Agentless，中小型应用环境<br>Saltstack：<span class="hljs-keyword">python</span>，一般需部署agent，执行效率更高<br>Puppet：<span class="hljs-keyword">ruby</span>, 功能强大，配置复杂，重型,适合大型环境<br>Fabric：<span class="hljs-keyword">python</span>，agentless<br>Chef：<span class="hljs-keyword">ruby</span>，国内应用少<br>Cfengine<br>func<br></code></pre></td></tr></table></figure><h2 id="二、企业级自动化运维工具应用实战ansible"><a href="#二、企业级自动化运维工具应用实战ansible" class="headerlink" title="二、企业级自动化运维工具应用实战ansible"></a>二、企业级自动化运维工具应用实战ansible</h2><h3 id="1-Ansible发展史"><a href="#1-Ansible发展史" class="headerlink" title="1.Ansible发展史"></a>1.Ansible发展史</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Ansible<br>Michael DeHaan（ Cobbler 与 Func 作者）<br>名称来自《安德的游戏》中跨越时空的即时通信工具<br>2012<span class="hljs-string">-03</span><span class="hljs-string">-09</span>，发布0.0.1版，2015<span class="hljs-string">-10</span><span class="hljs-string">-17</span>，Red Hat宣布收购<br>官网：https://www.ansible.com/<br>官方文档：https://docs.ansible.com/<br>同类自动化工具GitHub关注程度（2016<span class="hljs-string">-07</span><span class="hljs-string">-10</span>）<br></code></pre></td></tr></table></figure><p><img src="/img/ansible/3.png" alt="image"></p><h3 id="2-Ansible-特性"><a href="#2-Ansible-特性" class="headerlink" title="2.Ansible 特性"></a>2.Ansible 特性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1&gt; 模块化：调用特定的模块，完成特定任务</span><br><span class="hljs-comment"># 2&gt; Paramiko（python对ssh的实现），PyYAML，Jinja2（模板语言）三个关键模块</span><br><span class="hljs-comment"># 3&gt; 支持自定义模块</span><br><span class="hljs-comment"># 4&gt; 基于Python语言实现</span><br><span class="hljs-comment"># 5&gt; 部署简单，基于python和SSH(默认已安装)，agentless</span><br><span class="hljs-comment"># 6&gt; 安全，基于OpenSSH</span><br><span class="hljs-comment"># 7&gt; 支持playbook编排任务</span><br><span class="hljs-comment"># 8&gt; 幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况</span><br><span class="hljs-comment"># 9&gt; 无需代理不依赖PKI（无需ssl）</span><br><span class="hljs-comment"># 10&gt; 可使用任何编程语言写模块</span><br><span class="hljs-comment"># 11&gt; YAML格式，编排任务，支持丰富的数据结构</span><br><span class="hljs-comment"># 12&gt; 较强大的多层解决方案</span><br></code></pre></td></tr></table></figure><h3 id="3-Ansible-架构"><a href="#3-Ansible-架构" class="headerlink" title="3.Ansible 架构"></a>3.Ansible 架构</h3><p><img src="/img/ansible/4.png" alt="image"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">ansible的作用以及工作结构<br><span class="hljs-number">1</span>、ansible简介：<br>ansible是新出现的自动化运维工具，基于Python开发，<br>集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，<br>实现了批量系统配置、批量程序部署、批量运行命令等功能。<br>ansible是基于模块工作的，本身没有批量部署的能力。<br>真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。<br>主要包括：<br>    (<span class="hljs-number">1</span>)、连接插件connection plugins：负责和被监控端实现通信；<br>    (<span class="hljs-number">2</span>)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；<br>    (<span class="hljs-number">3</span>)、各种模块核心模块、command模块、自定义模块；<br>    (<span class="hljs-number">4</span>)、借助于插件完成记录日志邮件等功能；<br>    (<span class="hljs-number">5</span>)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。<br><br><span class="hljs-number">2</span>、ansible的架构：连接其他主机默认使用ssh协议<br></code></pre></td></tr></table></figure><h3 id="4-Ansible工作原理"><a href="#4-Ansible工作原理" class="headerlink" title="4.Ansible工作原理"></a>4.Ansible工作原理</h3><p><img src="/img/ansible/5.png" alt="image"></p><h3 id="5-Ansible主要组成部分"><a href="#5-Ansible主要组成部分" class="headerlink" title="5.Ansible主要组成部分"></a>5.Ansible主要组成部分</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">ANSIBLE PLAYBOOKS：任务剧本（任务集），编排定义Ansible任务集的配置文件，<br>                   由Ansible顺序依次执行，通常是JSON格式的YML文件<br>INVENTORY：Ansible管理主机的清单  <span class="hljs-regexp">/etc/</span>anaible/hosts<br>MODULES：  Ansible执行命令的功能模块，多数为内置核心模块，也可自定义<br>PLUGINS：  模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插件等，该功能不常用<br>API：      供第三方程序调用的应用程序编程接口 <br>ANSIBLE：  组合INVENTORY、API、MODULES、PLUGINS的绿框，可以理解为是ansible命令工具，其为核心执行工具<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Ansible命令执行来源：<br>    <span class="hljs-number">1</span>&gt; <span class="hljs-keyword">USER</span>，普通用户，即<span class="hljs-keyword">SYSTEM</span> ADMINISTRATOR<br>    <span class="hljs-number">2</span>&gt; CMDB（配置管理数据库） API 调用<br>    <span class="hljs-number">3</span>&gt; <span class="hljs-built_in">PUBLIC</span>/PRIVATE CLOUD API调用  (公有私有云的API接口调用)<br>    <span class="hljs-number">4</span>&gt; <span class="hljs-keyword">USER</span>-&gt; Ansible Playbook -&gt; Ansibile<br><br>利用ansible实现管理的方式：<br>    <span class="hljs-number">1</span>&gt; Ad-Hoc 即ansible单条命令，主要用于临时命令使用场景<br>    <span class="hljs-number">2</span>&gt; Ansible-playbook 主要用于长期规划好的，大型项目的场景，需要有前期的规划过程<br>   <br>Ansible-playbook（剧本）执行过程<br>    将已有编排好的任务集写入Ansible-Playbook<br>    通过ansible-playbook命令分拆任务集至逐条ansible命令，按预定规则逐条执行<br><br>Ansible主要操作对象<br>   HOSTS主机<br>   NETWORKING网络设备<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h4><ul><li><em>执行ansible的主机一般称为主控端，中控，master或堡垒机</em></li><li><em>主控端Python版本需要2.6或以上</em></li><li><em>被控端Python版本小于2.4需要安装python-simplejson</em></li><li><em>被控端如开启SELinux需要安装libselinux-python</em></li><li><em>windows不能做为主控端</em></li><li><em>ansible不是服务,不会一直启动,只是需要的时候启动</em></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>自动化</category>
      
      <category>Ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React核心内容(一)</title>
    <link href="/2025/04/30/react%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/04/30/react%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="react笔记——（1）核心语法"><a href="#react笔记——（1）核心语法" class="headerlink" title="react笔记——（1）核心语法"></a>react笔记——（1）核心语法</h1><h2 id="1-文件组成"><a href="#1-文件组成" class="headerlink" title="1.文件组成"></a>1.文件组成</h2><p>node_modules: 包</p><p>public：静态文件</p><p>src：主要文件</p><p>​index.js：主引导文件(入口)</p><p>​App.js：根组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs react">&lt;React.StrictMode&gt;：用于纠错<br>例子：<br>      &lt;React.StrictMode&gt;<br>    &lt;App /&gt;<br>  &lt;/React.StrictMode&gt;<br></code></pre></td></tr></table></figure><h2 id="2-Jsx书写方式"><a href="#2-Jsx书写方式" class="headerlink" title="2.Jsx书写方式"></a>2.Jsx书写方式</h2><h3 id="2-1-jsx格式：js-html"><a href="#2-1-jsx格式：js-html" class="headerlink" title="2.1 jsx格式：js + html"></a>2.1 jsx格式：js + html</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//jsx格式：js + html</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//此处App为根组件</span><br>  <span class="hljs-keyword">return</span> (<span class="hljs-comment">//注意此处小括号，如果是单行的则可以不写，多行则需要写，但建议都写</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">          。。。</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-jsx知识点"><a href="#2-2-jsx知识点" class="headerlink" title="2.2 jsx知识点"></a>2.2 jsx知识点</h3><h4 id="2-2-1-无论单标签还是多标签必须闭合"><a href="#2-2-1-无论单标签还是多标签必须闭合" class="headerlink" title="2.2.1.无论单标签还是多标签必须闭合"></a>2.2.1.无论单标签还是多标签必须闭合</h4><p>​    单标签：&lt;App.js &#x2F;&gt;<br>​    多标签：<div></div></p><h4 id="2-2-2-jsx只能返回一个根元素"><a href="#2-2-2-jsx只能返回一个根元素" class="headerlink" title="2.2.2.jsx只能返回一个根元素"></a>2.2.2.jsx只能返回一个根元素</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">例子：<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-header&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-logo&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-comment">//这个div就不能正常返回，会报错</span><br>     );<br>  &#125;<br></code></pre></td></tr></table></figure><p> 解决方法（不希望有外部父级）：<br>        1.将div包含在另一个div中<br>        2.使用空标签(&lt;&gt;&lt;&#x2F;&gt;)(渲染时不会产生多余的内容)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-header&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-logo&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//这个div就不能正常返回，会报错</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/&gt;</span></span><br>     );<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-使用双标签Fragment"><a href="#2-2-3-使用双标签Fragment" class="headerlink" title="2.2.3.使用双标签Fragment"></a>2.2.3.使用双标签Fragment</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Fragment</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> listContent = list.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>------------------<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span><br> ))<br></code></pre></td></tr></table></figure><h2 id="3-插值"><a href="#3-插值" class="headerlink" title="3.插值"></a>3.插值</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> divContent = <span class="hljs-string">&#x27;标签内容&#x27;</span><br>  <span class="hljs-keyword">const</span> divTitle = <span class="hljs-string">&#x27;标签标题&#x27;</span><br>  <br>  <span class="hljs-keyword">return</span> (<br>     <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;divTitle&#125;</span>&gt;</span>&#123;divContent&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="hljs-comment">// 鼠标放在标签内容上显示标签标题</span><br>      <span class="hljs-comment">// title=&quot;&#123;divTitle&#125;&quot; =&gt; 鼠标放在标签内容上显示&#123;divTitle&#125;</span><br>  );<br>&#125;<br>插值可以使用的位置：<br><span class="hljs-number">1.</span>标签内容<br><span class="hljs-number">2.</span>标签属性<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//const divContent = &#x27;标签内容&#x27;</span><br>  <span class="hljs-keyword">const</span> divTitle = <span class="hljs-string">&#x27;标签标题&#x27;</span><br><br>  <span class="hljs-keyword">const</span> flag = <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">let</span> divContent = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">if</span>(flag) &#123;<br>    divContent = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>flag为true<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    divContent = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>flag为false<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;divTitle&#125;</span>&gt;</span>&#123;divContent&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-事件操作"><a href="#4-事件操作" class="headerlink" title="4.事件操作"></a>4.事件操作</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击了按钮&quot;</span>,e)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  )<br><span class="hljs-comment">//可以接收参数e，类似DOM操作，里面包含了鼠标的操作坐标等内容</span><br></code></pre></td></tr></table></figure><h2 id="5-useState状态处理"><a href="#5-useState状态处理" class="headerlink" title="5.useState状态处理"></a>5.useState状态处理</h2><p>Vue中可以声明一种响应式数据，响应式数据能驱动页面进行更新（用来减少操作的一种手段）</p><p>react中，函数式组件默认没有这种状态机制。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//这段代码并不能实现，点击按钮后将‘默认内容’更新为‘新内容’</span><br><span class="hljs-keyword">let</span> divContent = <span class="hljs-string">&#x27;默认内容&#x27;</span><br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params">e</span>) &#123;<br>    divContent = <span class="hljs-string">&#x27;新内容&#x27;</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;divContent&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br></code></pre></td></tr></table></figure><p>所以要使用react提供的函数：useState(状态初始值)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//useState 会返回一个数组[内容1，内容2]</span><br><span class="hljs-comment">// （读）内容1 ==&gt; 对当前数据的引用</span><br><span class="hljs-comment">// （改）内容2 ==&gt; 一个函数，用来修改这个状态</span><br><span class="hljs-keyword">import</span> &#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> [content, setContent] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;标签的默认内容&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">setContent</span>(<span class="hljs-string">&#x27;新内容&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h3 id="5-1-对象形式的状态（或数组结构）"><a href="#5-1-对象形式的状态（或数组结构）" class="headerlink" title="5.1 对象形式的状态（或数组结构）"></a>5.1 对象形式的状态（或数组结构）</h3><h4 id="5-1-1-对象形式"><a href="#5-1-1-对象形式" class="headerlink" title="5.1.1 对象形式"></a>5.1.1 对象形式</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [data, setDate] = <span class="hljs-title function_">useState</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span>,<br><span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;默认内容&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//注意此处setData功能更改是直接将新值覆盖替换全部旧值</span><br><span class="hljs-comment">//如果只写title: &#x27;新标题&#x27;,那么content就会消失</span><br><span class="hljs-comment">//所以一定要写全</span><br><span class="hljs-title function_">setDate</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;新标题&#x27;</span>,<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;默认内容&#x27;</span><br>&#125;)<br>&#125;<br><br><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;data.title&#125;</span>&gt;</span>&#123;data.content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><p>当内容太多时就会很麻烦，所以可以使用<strong>展开操作</strong>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//...数据名会使同名的属性保留</span><br><span class="hljs-comment">//  注意：新属性写在后面，新属性名和旧属性名相同时，新值会覆盖旧值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setDate</span>(&#123;<br>      ...data,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;新标题&#x27;</span>,<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="5-1-2-数组操作"><a href="#5-1-2-数组操作" class="headerlink" title="5.1.2 数组操作"></a>5.1.2 数组操作</h4><h5 id="5-1-2-1-增加"><a href="#5-1-2-1-增加" class="headerlink" title="5.1.2.1 增加"></a>5.1.2.1 增加</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/* ...data,</span><br><span class="hljs-comment"> *    &#123;id: ++id, name: &#x27;内容4&#x27;&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 这样使得点击按钮后，在数组中添加 id: 4, name: &#x27;内容4&#x27; 的内容</span><br><span class="hljs-comment">/* 呈现：内容1</span><br><span class="hljs-comment">内容2</span><br><span class="hljs-comment">内容3</span><br><span class="hljs-comment">内容4</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*&#123;id: ++id, name: &#x27;内容4&#x27;&#125;,</span><br><span class="hljs-comment"> *      ...data</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* 呈现：内容4</span><br><span class="hljs-comment">内容1</span><br><span class="hljs-comment">内容2</span><br><span class="hljs-comment">内容3</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> [data, setDate] = <span class="hljs-title function_">useState</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;内容1&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;内容2&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;内容3&#x27;</span>&#125;,<br>])<br><br><span class="hljs-keyword">const</span> listData = data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>))<br><br><span class="hljs-keyword">let</span> id = <span class="hljs-number">3</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setDate</span>([<br>      ...data,<br>      &#123;<span class="hljs-attr">id</span>: ++id, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;内容4&#x27;</span>&#125;<br>    ])<br>  &#125;<br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listData&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h5 id="5-1-2-2-删除（使用filter进行过滤）"><a href="#5-1-2-2-删除（使用filter进行过滤）" class="headerlink" title="5.1.2.2 删除（使用filter进行过滤）"></a>5.1.2.2 删除（使用filter进行过滤）</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//点击按钮后呈现</span><br><span class="hljs-comment">/* 呈现：</span><br><span class="hljs-comment">内容1</span><br><span class="hljs-comment">内容3</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handClick</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setDate</span>(data.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> !==<span class="hljs-number">2</span>))<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React核心内容(二)</title>
    <link href="/2025/04/30/react%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2025/04/30/react%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="react笔记——（2）组件通信与插槽"><a href="#react笔记——（2）组件通信与插槽" class="headerlink" title="react笔记——（2）组件通信与插槽"></a>react笔记——（2）组件通信与插槽</h1><p>（注意：正常开发时会将不同组件进行多个文件分割，以下学习时将在一个文件中处理，方便学习）</p><h2 id="1-组件通信（React-DOM组件-React组件）"><a href="#1-组件通信（React-DOM组件-React组件）" class="headerlink" title="1.组件通信（React DOM组件 + React组件）"></a>1.组件通信（React DOM组件 + React组件）</h2><h3 id="1-1-DOM组件"><a href="#1-1-DOM组件" class="headerlink" title="1.1 DOM组件"></a>1.1 DOM组件</h3><p>DOM组件：指的是react支持的所有的HTML和SVG标签</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 类似 &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; 中的属性（src 与 alt），这些都不是纯HTML写法</span><br><span class="hljs-comment">//这些在React中被称为Props（道具）</span><br></code></pre></td></tr></table></figure><h4 id="1-1-1-为DOM组件设置-Props"><a href="#1-1-1-为DOM组件设置-Props" class="headerlink" title="1.1.1 为DOM组件设置 Props"></a>1.1.1 为DOM组件设置 Props</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> image <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">classname</span>=<span class="hljs-string">&quot;small&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-DOM组件的Style属性"><a href="#1-2-DOM组件的Style属性" class="headerlink" title="1.2 DOM组件的Style属性"></a>1.2 DOM组件的Style属性</h3><h4 id="1-2-1-直接设置style"><a href="#1-2-1-直接设置style" class="headerlink" title="1.2.1 直接设置style"></a>1.2.1 直接设置style</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> image <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">classname</span>=<span class="hljs-string">&quot;small&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">// <span class="hljs-attr">因为style</span> <span class="hljs-attr">是一种键值的结构</span>，<span class="hljs-attr">所以JSX允许通过键值对</span>（<span class="hljs-attr">对象的形式</span>）<span class="hljs-attr">来进行style的设置</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width:</span> &#x27;<span class="hljs-attr">100vh</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">height:</span> <span class="hljs-attr">100</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">backgroundColor:</span>&#x27;<span class="hljs-attr">grey</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-书写变量再引入（推荐）"><a href="#1-2-2-书写变量再引入（推荐）" class="headerlink" title="1.2.2 书写变量再引入（推荐）"></a>1.2.2 书写变量再引入（推荐）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> imgStyleObj = &#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100vh&#x27;</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;grey&#x27;</span><br>  &#125;<br><br><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">classname</span>=<span class="hljs-string">&quot;small&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;imgStyleObj&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br></code></pre></td></tr></table></figure><h3 id="1-3-JSX的展开语法"><a href="#1-3-JSX的展开语法" class="headerlink" title="1.3 JSX的展开语法"></a>1.3 JSX的展开语法</h3><p>{…imgData}</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> image <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// img 中的alt是不能提出来的</span><br>  <span class="hljs-comment">// 因为react中如果img没有alt属性，会给一个警告</span><br>  <span class="hljs-keyword">const</span> imgData = &#123;<br>      <span class="hljs-attr">className</span>:<span class="hljs-string">&quot;small&quot;</span>,<br>      <span class="hljs-attr">style</span>:&#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100vh&#x27;</span>,<span class="hljs-comment">//加单位就使用字符串类型</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;grey&#x27;</span><br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        &#123;<span class="hljs-attr">...imgData</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>注意： JSX的展开操作并不是ES6的展开运算符，ES6的展开运算符的功能是将当前对象的键值直接放到  {…imgData} 的位置上，它不能在一个没有容器的地方上单独使用的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        &#123;<span class="hljs-attr">...imgData</span>&#125;//<span class="hljs-attr">这里的</span> &#123;&#125; <span class="hljs-attr">只是JSX的语法标记</span>，<span class="hljs-attr">就算解开这个大括号</span>，<span class="hljs-attr">也不会直接将属性放在IMG标签之中</span>（<span class="hljs-attr">面试点</span>）</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br></code></pre></td></tr></table></figure><h2 id="2-React组件的Props（自定义的React组件）"><a href="#2-React组件的Props（自定义的React组件）" class="headerlink" title="2.React组件的Props（自定义的React组件）"></a>2.React组件的Props（自定义的React组件）</h2><h3 id="2-1-有明确的键和值的属性"><a href="#2-1-有明确的键和值的属性" class="headerlink" title="2.1 有明确的键和值的属性"></a>2.1 有明确的键和值的属性</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Article</span> (<span class="hljs-params">props</span>)&#123;右边采用解构的方式，更加灵活简洁<span class="hljs-keyword">function</span> <span class="hljs-title function_">Article</span> (<span class="hljs-params">&#123;title,content&#125;</span>)&#123;<br>  <span class="hljs-keyword">return</span> (|<span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> |---&gt;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;props.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>想用哪个属性用哪个，不必全部引入  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  ))<br>&#125;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="hljs-comment">// 希望对组件中的内容进行定制</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通常操作步骤：</span><br><span class="hljs-comment">    *      1.请求功能所需的数据（例如文章信息）</span><br><span class="hljs-comment">    *      2.创建 Article 组件</span><br><span class="hljs-comment">    *      3.将文章的数据分别传递给 Article</span><br><span class="hljs-comment">    */</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;标签1&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;内容1&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;标签2&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;内容2&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;标签3&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;内容3&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-没有明确的键和值的属性"><a href="#2-2-没有明确的键和值的属性" class="headerlink" title="2.2 没有明确的键和值的属性"></a>2.2 没有明确的键和值的属性</h3><p>例如：active（默认为true，没写就是false）表示呈现状态</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//第二个&lt;Article/&gt; 没传active，所以就是false</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Article</span> (<span class="hljs-params">&#123;title,content,active&#125;</span>)&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          //此处做三元检测</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>状态：&#123; active ? &#x27;显示中&#x27; : &#x27;已隐藏&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <br>  <span class="hljs-keyword">return</span>(<br>    <span class="hljs-comment">// 希望对组件中的内容进行定制</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通常操作步骤：</span><br><span class="hljs-comment">    *      1.请求功能所需的数据（例如文章信息）</span><br><span class="hljs-comment">    *      2.创建 Article 组件</span><br><span class="hljs-comment">    *      3.将文章的数据分别传递给 Article</span><br><span class="hljs-comment">    */</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;标签1&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;内容1&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">active</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;标签2&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;内容2&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;标签3&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">content</span>=<span class="hljs-string">&#x27;内容3&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">active</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-在React组件中展开-Props的使用场景"><a href="#2-3-在React组件中展开-Props的使用场景" class="headerlink" title="2.3 在React组件中展开 Props的使用场景"></a>2.3 在React组件中展开 Props的使用场景</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//步骤五：输出content与active判断后的&lt;p&gt;内容</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Detail</span> (<span class="hljs-params">&#123;content,active&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>状态：&#123; active ? &#x27;显示中&#x27; : &#x27;已隐藏&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// 步骤三：以解构的方式分别获取&#123;title, detailData&#125;，然后输出title</span><br><span class="hljs-comment">// 步骤四：调用Props(Detail)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Article</span> (<span class="hljs-params">&#123;title, detailData&#125;</span>)&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Detail</span> &#123;<span class="hljs-attr">...detailData</span>&#125;/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 步骤一：打包设置</span><br>  <span class="hljs-keyword">const</span> articleData = &#123;<br>      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;标签1&#x27;</span>,<br>      <span class="hljs-attr">detailData</span>: &#123;<br>        <span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;内容1&#x27;</span>,<br>        <span class="hljs-attr">active</span>:<span class="hljs-string">&#x27;true&#x27;</span><br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      //步骤二： 将acticleData以展开的方式注入Props（Article ）</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Article</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        &#123;<span class="hljs-attr">...articleData</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-将JSX作为Props传递（组件插槽）"><a href="#3-将JSX作为Props传递（组件插槽）" class="headerlink" title="3.将JSX作为Props传递（组件插槽）"></a>3.将JSX作为Props传递（组件插槽）</h2><p>React中将插槽功能称为将JSX作为Props传递给子组件，它被预定义了一个属性叫做children</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List1</span> (<span class="hljs-params">&#123;children&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <br>  )        <br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">List2</span> (<span class="hljs-params">&#123;children&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <br>  )        <br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-向多个位置传递JSX"><a href="#3-1-向多个位置传递JSX" class="headerlink" title="3.1 向多个位置传递JSX"></a>3.1 向多个位置传递JSX</h3><p>（注意，所有Props组件传递的数据都是单向的（只读的），不要尝试做修改）</p><p>（父组件 —&gt; 子组件）（App —&gt; List1）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 传入参数可选的话，需要给他一个默认值，例如footer=&lt;div&gt;默认底部&lt;/div&gt;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">List1</span> (<span class="hljs-params">&#123;children,title,footer=&lt;div&gt;默认底部&lt;/div&gt;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;footer&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>    <br>  )        <br>&#125;<br><br><span class="hljs-comment">// 将列表处理为数组（包含对象的形式），此处并未真的处理为数组结构（此处可以处理为数组结构），处理时按之前的一样即可</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List1</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;列表1&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">footer</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>这是底部内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List1</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;列表2&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">footer</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>这是底部内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容A<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容B<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容C<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List1</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;列表3&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">footer</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>这是底部内容3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容U<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容I<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容O<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-子组件向父组件传值"><a href="#4-子组件向父组件传值" class="headerlink" title="4.子组件向父组件传值"></a>4.子组件向父组件传值</h2><h4 id="4-1-简单示例"><a href="#4-1-简单示例" class="headerlink" title="4.1 简单示例"></a>4.1 简单示例</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-comment">// 子组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Detail</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [status,setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ！true = false</span><br>    <span class="hljs-comment">// ! false = true</span><br>    <span class="hljs-title function_">setStatus</span>(!status)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        // <span class="hljs-attr">block:</span> <span class="hljs-attr">显示</span></span></span><br><span class="hljs-tag"><span class="language-xml">        // <span class="hljs-attr">none:</span> <span class="hljs-attr">不显示</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">display:</span> <span class="hljs-attr">status</span> ? &#x27;<span class="hljs-attr">block</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">none</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;&gt;</span>Detail的内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><br><span class="hljs-comment">// 父组件</span><br><span class="hljs-comment">// 注意当前程序中父组件是不知道的，它是没有感知的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Detail</span></span></span><br><span class="hljs-tag"><span class="language-xml"></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-给子组件设置自定义属性"><a href="#4-2-给子组件设置自定义属性" class="headerlink" title="4.2 给子组件设置自定义属性"></a>4.2 给子组件设置自定义属性</h4><p>如果我们希望父组件接收子组件的状态的话，那我们就需要去给子组件设置一个自定义状态（自定义命名即可）。</p><p>（注意：这类属性并不像DOM属性一样可以通过键盘鼠标触发，而是通过代码来决定在某个时机触发）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Detail</span> (<span class="hljs-params">&#123; onActive &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [status,setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setStatus</span>(!status)<br>      <span class="hljs-comment">//在这里只要一调用，就会将改变后的status值传到App父组件</span><br>    <span class="hljs-title function_">onActive</span>(status)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        // <span class="hljs-attr">block:</span> <span class="hljs-attr">显示</span></span></span><br><span class="hljs-tag"><span class="language-xml">        // <span class="hljs-attr">none:</span> <span class="hljs-attr">不显示</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">display:</span> <span class="hljs-attr">status</span> ? &#x27;<span class="hljs-attr">block</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">none</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;&gt;</span>Detail的内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在这里接收一下</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleActive</span> (<span class="hljs-params">status</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(status)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Detail</span></span></span><br><span class="hljs-tag"><span class="language-xml">          //<span class="hljs-attr">自定义</span> <span class="hljs-attr">onActive属性</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onActive</span>=<span class="hljs-string">&#123;handleActive&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>除了父子之外，还有同级组件之间的传值，同级组件传值最常用的办法就是借助父组件来进行中转，此处不过多演示。</p><h2 id="5-使用Context进行多级组件传值"><a href="#5-使用Context进行多级组件传值" class="headerlink" title="5.使用Context进行多级组件传值"></a>5.使用Context进行多级组件传值</h2><p>当需要进行多级传递时，再使用Props就比较麻烦了，这时使用React中的Hooks&#x3D;&#x3D;》Context来进行操作</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// &lt;section&gt;&lt;/section&gt; 通常应该包含一个标题元素（如 &lt;h1&gt; - &lt;h6&gt;），用于标识该章节的主题。</span><br><span class="hljs-comment">// 嵌套使用：&lt;section&gt; 标签可以嵌套使用，以表示更复杂的页面结构。</span><br><br><span class="hljs-comment">//实验案例：</span><br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;children&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123; level, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (level) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;未知的level:&quot;</span> + level)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;1&#125;</span>&gt;</span>主标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*呈现：</span><br><span class="hljs-comment">*主标题</span><br><span class="hljs-comment">*子标题</span><br><span class="hljs-comment">*子标题</span><br><span class="hljs-comment">*子标题</span><br><span class="hljs-comment">*子子标题</span><br><span class="hljs-comment">*子子标题</span><br><span class="hljs-comment">*子子标题</span><br><span class="hljs-comment">*子子子标题</span><br><span class="hljs-comment">*子子子标题</span><br><span class="hljs-comment">*子子子标题</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>（面试小点）</p><p>通过上面这张图，我们可以看到虽然都是 h1 标签，但是仍旧呈现出了 h1<del>h5 的这种样式，这是因为在使用 section与标题标签(h1</del>h5) 嵌套时会自然呈现出的状态。</p><p>所以我们经常说 HTML是做结构呈现的，CSS才是做样式处理的，所以即使使用的HTML标签默认尺寸符合我们要求，我们依旧要进行设置限制。</p><p>那么接下来使用react提供的钩子（createContext、useContext、createContext.Provider）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-comment">// Provider 是给 Context 提供值的一种方式</span><br><span class="hljs-comment">// 步骤2.value=&#123;level + 1&#125; ==&gt; 每一次父组件调用子组件Section都会使level + 1，再将值提供给Context</span><br><span class="hljs-comment">// Section接收的 children 内容是Heading运行后的结果</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>)<br>  <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level</span> + <span class="hljs-attr">1</span>&#125;&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123;children &#125;</span>) &#123;<br>  <span class="hljs-comment">// 步骤3.使用useContext 获取 Context的值，然后返回对应内容</span><br>  <span class="hljs-comment">// Heading 接收的children是文本</span><br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>)<br>  <span class="hljs-keyword">switch</span> (level) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;未知的level:&quot;</span> + level)<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 此处LevelContext采用帕斯卡命名法</span><br><span class="hljs-comment">// 步骤1.先创建一个Context，并将其设为默认值0交给 ==&gt; LevelContext(默认级别)</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">LevelContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">//最终调用过程 ==&gt; APP =&gt; S ==&gt; H </span><br>      <span class="hljs-comment">//输出过程==&gt; H 返回结果==&gt; S 返回结果==&gt; APP</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>主标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> &gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络管理</title>
    <link href="/2025/04/03/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    <url>/2025/04/03/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-进程管理"><a href="#1-进程管理" class="headerlink" title="1.进程管理"></a>1.进程管理</h2><p><img src="/img/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/1.png" alt="思维导图"></p><p><img src="/img/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/2.png" alt="进程状态关系图"></p><h2 id="2-进程常用的工具"><a href="#2-进程常用的工具" class="headerlink" title="2.进程常用的工具"></a>2.进程常用的工具</h2><table><thead><tr><th>工具名</th><th>用途</th><th>最终</th></tr></thead><tbody><tr><td>ps</td><td>查看当前进程信息</td><td>进程管理</td></tr><tr><td>top</td><td>动态查看进程信息</td><td>进程管理</td></tr><tr><td>jobs</td><td>查看后台进程</td><td>进程管理</td></tr><tr><td>pstree</td><td>进程快照以树形结构显示</td><td>进程管理</td></tr><tr><td>pgrep</td><td>进程过滤</td><td>进程管理</td></tr><tr><td>strace</td><td>跟踪进程调用</td><td>进程管理</td></tr><tr><td>ltrace</td><td>跟踪进程调用</td><td>进程管理</td></tr></tbody></table><h3 id="2-1-ps（静态查看）"><a href="#2-1-ps（静态查看）" class="headerlink" title="2.1 ps（静态查看）"></a>2.1 ps（静态查看）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">PID: 进程的<span class="hljs-built_in">id</span>号<br>TTY: 进程登录的客户端<br>TIME: 进程的执行时间（上面是00是因为ps是一个静态工具，查看的是一瞬间的TIME）<br>CMD: 命令<br>VSZ: 虚拟内存占用量<br>RSS: 真实内存占用量<br>STAT: 状态<br>START: 开始时间<br>COMMAND：命令（将呈现命令或者文件路径）<br><br>[root@192 ~]# ps<br>    PID TTY          TIME CMD<br>   4975 pts/0    00:00:00 bash<br>   5089 pts/0    00:00:00 ps<br>[root@192 ~]# ps -aux<br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root          2  0.1  0.0      0     0 ?        S    02:20   0:00 [kthreadd]<br><br>-a: 显示所有用户的进程，而不仅仅是当前用户的。<br>-u: 显示详细的用户/拥有者（user）信息。<br>-x: 显示没有控制终端的进程。<br><br></code></pre></td></tr></table></figure><p><img src="/img/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/3.png"></p><h3 id="2-2-top-动态查看"><a href="#2-2-top-动态查看" class="headerlink" title="2.2 top (动态查看)"></a>2.2 top (动态查看)</h3><p>数据会实时变动</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒（默认3秒）</td></tr><tr><td>-i</td><td>使top不显示任何限制或者僵死进程</td></tr><tr><td>-p</td><td>通过指定监控进程PID来仅</td></tr></tbody></table><p><img src="/img/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/4.png"></p><table><thead><tr><th>参数</th><th>代表含义</th></tr></thead><tbody><tr><td>PR</td><td>优先级：0-20</td></tr><tr><td>NI(nice值)</td><td>优先级：-20-19</td></tr><tr><td>VIRT</td><td>虚拟内存</td></tr><tr><td>S</td><td>状态</td></tr><tr><td>TIME+</td><td>程序运行时间</td></tr></tbody></table><p>交互功能：</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr><tr><td>c</td><td>切换命令显示模式（完整路径&#x2F;简短命令名)</td></tr></tbody></table><h3 id="2-3-jobs（查看后台进程）"><a href="#2-3-jobs（查看后台进程）" class="headerlink" title="2.3 jobs（查看后台进程）"></a>2.3 jobs（查看后台进程）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 home]# vim demo.sh (这里wq退出)<br>[root@192 home]# <span class="hljs-built_in">jobs</span>（然后<span class="hljs-built_in">jobs</span>显示没有后台进程）<br>[root@192 home]# vim demo.sh （这里ctrl+z直接退出）<br><br>[1]+  已停止               vim demo.sh（显示该进程停止，存在后台）<br>[root@192 home]# <span class="hljs-built_in">jobs</span><br>[1]+  已停止               vim demo.sh（这里<span class="hljs-built_in">jobs</span>显示有后台进程）<br>[root@192 home]# <span class="hljs-built_in">fg</span> 1（使用<span class="hljs-built_in">fg</span>命令恢复进程,1指的是 “[1]+” 中的编号1 ）<br>vim demo.sh<br>[root@192 home]# <span class="hljs-built_in">jobs</span>（然后上一步恢复后wq退出后再查看）<br>[root@192 home]# （进程就没有了）<br></code></pre></td></tr></table></figure><h3 id="2-4-pstree-进程快照以树形结构显示"><a href="#2-4-pstree-进程快照以树形结构显示" class="headerlink" title="2.4 pstree (进程快照以树形结构显示)"></a>2.4 pstree (进程快照以树形结构显示)</h3><p><strong>基本语法</strong></p><p>pstree [选项] ,可以更加直观的来看进程信息</p><p><strong>常用选项</strong></p><p>-p :显示进程的PID</p><p>-u :显示进程的所属用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 home]# pstree 4635<br>systemctl───less<br><br>[root@192 ~]# pstree root<br>systemd─┬─NetworkManager─┬─dhclient<br>        │                └─3*[&#123;NetworkManager&#125;]<br>        ├─agetty<br>        ├─atd<br>        ├─auditd───&#123;auditd&#125;<br>        ├─chronyd<br>        ├─crond<br>        ├─dbus-daemon<br>        ├─firewalld───&#123;firewalld&#125;<br>        ├─irqbalance───&#123;irqbalance&#125;<br>        ├─lsmd<br>        ├─mdadm<br>        ├─polkitd───3*[&#123;polkitd&#125;]<br>        ├─restorecond<br>        ├─rngd───2*[&#123;rngd&#125;]<br>        ├─rpcbind<br>        ├─rsyslogd───2*[&#123;rsyslogd&#125;]<br>        ├─sshd───sshd───sshd───bash─┬─pstree<br>        │                           └─vim───&#123;vim&#125;<br>        ├─systemd-journal<br>        ├─systemd-logind<br>        ├─systemd-udevd<br>        └─tuned───3*[&#123;tuned&#125;]<br></code></pre></td></tr></table></figure><h3 id="2-5-pgrep-进程过滤"><a href="#2-5-pgrep-进程过滤" class="headerlink" title="2.5 pgrep (进程过滤)"></a>2.5 pgrep (进程过滤)</h3><p>直接输出匹配进程号，结合kill使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># pgrep 服务名（进程名）</span><br>[root@192 home]# pgrep bash<br>4197<br>4838<br>5279<br><br><span class="hljs-comment"># -u 用户名</span><br>[root@192 home]# pgrep -u root<br>1<br>2<br>...<br></code></pre></td></tr></table></figure><h3 id="2-6-strace（跟踪进程调用）"><a href="#2-6-strace（跟踪进程调用）" class="headerlink" title="2.6 strace（跟踪进程调用）"></a>2.6 strace（跟踪进程调用）</h3><p>strace： 会追踪程序运行时的整个生命周期，输出每一个系统调用的名字、参数、返回值和执行所消耗的时间等，是排查问题的杀手锏。常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">strace -tt -f + file path<br>[root@192 home]# strace -tt -f nginx<br>00:01:20.720567 execve(<span class="hljs-string">&quot;/usr/sbin/nginx&quot;</span>, [<span class="hljs-string">&quot;nginx&quot;</span>], 0x7ffdb75cc900 /* 23 vars */) = 0<br>00:01:20.729122 brk(NULL)               = 0x562feecd6000<br>00:01:20.748064 arch_prctl(0x3001 /* ARCH_??? */, 0x7ffcf79be8f0) = -1 EINVAL (Invalid argument)<br>00:01:20.753934 access(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>, R_OK) = -1 ENOENT (No such file or directory)<br>00:01:20.762608 openat(AT_FDCWD, <span class="hljs-string">&quot;/etc/ld.so.cache&quot;</span>, O_RDONLY|O_CLOEXEC) = 3<br>...<br></code></pre></td></tr></table></figure><p>注：strace命令很适合处理程序僵尸、命令执行报错等问题，当我们的日志看不出问题出现的原因时，使用strace可能有意想不到的收获。</p><h3 id="2-7-ltrace（跟踪进程调用）"><a href="#2-7-ltrace（跟踪进程调用）" class="headerlink" title="2.7 ltrace（跟踪进程调用）"></a>2.7 ltrace（跟踪进程调用）</h3><p>ltrace:能够跟踪进程的库函数调用，它会显现出调用了哪个库函数，而strace则是跟踪进程的每个系统调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 home]# ltrace nginx<br>gettimeofday(0x7ffee104e0e0, nil)                                                 = 0<br>clock_gettime(1, 0x7ffee104e130, 960, 0)                                          = 0<br>memcpy(0x5610ffc6b584, <span class="hljs-string">&quot;4&quot;</span>, 1)                                                    = 0x5610ffc6b584<br>memcpy(0x5610ffc6b58a, <span class="hljs-string">&quot;2025&quot;</span>, 4)                                                 = 0x5610ffc6b58a<br>memcpy(0x5610ffc6b58f, <span class="hljs-string">&quot;16&quot;</span>, 2)                                                   = 0x5610ffc6b58f<br>......<br>getpid()                                                                          = 4745<br>getppid()                                                                         = 4744<br>open64(<span class="hljs-string">&quot;/var/log/nginx/error.log&quot;</span>, 1089, 0644)                                    = 5<br>OPENSSL_init_ssl(64, 0, 0, 0x7f707bb1c6a5)                                        = 1<br>ERR_clear_error(0x7f707c13b864, 1, 0x7fffffff, 0x7f707baaf96e)                    = 0x7f707be087a0<br>CRYPTO_get_ex_new_index(0, 0, 0, 0)                                               = 1<br>CRYPTO_get_ex_new_index(1, 0, 0, 0)                                               = 1<br>CRYPTO_get_ex_new_index(1, 0, 0, 0)                                               = 2<br>CRYPTO_get_ex_new_index(1, 0, 0, 0)                                               = 3<br>CRYPTO_get_ex_new_index(1, 0, 0, 0)                                               = 4<br>CRYPTO_get_ex_new_index(1, 0, 0, 0)                                               = 5<br>CRYPTO_get_ex_new_index(3, 0, 0, 0)                                               = 1<br>CRYPTO_get_ex_new_index(3, 0, 0, 0)                                               = 2<br>CRYPTO_get_ex_new_index(3, 0, 0, 0)                                               = 3<br>posix_memalign(0x7ffee104e150, 16, 1024, 0)                                       = 0<br>malloc(16)                                                                        = 0x5611285ec620<br>strlen(<span class="hljs-string">&quot;nginx&quot;</span>)                                                                   = 5<br>malloc(6)                                                                         = 0x5611285ed470<br><span class="hljs-built_in">uname</span>(0x7ffee104dfd0)                                                             = 0<br>strlen(<span class="hljs-string">&quot;SHELL=/bin/bash&quot;</span>)                                                         = 15<br>strlen(<span class="hljs-string">&quot;HISTCONTROL=ignoredups&quot;</span>)                                                  = 22<br>strlen(<span class="hljs-string">&quot;HISTSIZE=1000&quot;</span>)                                                           = 13<br>strlen(<span class="hljs-string">&quot;HOSTNAME=192.168.135.174&quot;</span>)                                                = 24<br>strlen(<span class="hljs-string">&quot;PWD=/home&quot;</span>)                                                               = 9<br>strlen(<span class="hljs-string">&quot;LOGNAME=root&quot;</span>)                                                            = 12<br>strlen(<span class="hljs-string">&quot;MOTD_SHOWN=pam&quot;</span>)                                                          = 14<br>strlen(<span class="hljs-string">&quot;HOME=/root&quot;</span>)                                                              = 10<br>strlen(<span class="hljs-string">&quot;LANG=zh_CN.UTF-8&quot;</span>)                                                        = 16<br>strlen(^C<span class="hljs-string">&quot;LS_COLORS=rs=0:di=01;34:ln=01;36&quot;</span>... &lt;no <span class="hljs-built_in">return</span> ...&gt;<br>--- SIGINT (Interrupt) ---<br>+++ killed by SIGINT +++<br>......<br></code></pre></td></tr></table></figure><p>补充一个命令runlevel：用来查看系统运行级别，系统级别一般为：0（停机）,1（单用户模式）,2（无网络多用户）,3（多用户）,4（未使用）,5（图形）,6(重启)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 home]# ltrace runlevel nginx<br>setlocale(LC_ALL, <span class="hljs-string">&quot;&quot;</span>)                                                             = <span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span><br>log_setup(0, 0x7f827fabb910, 1, 0)                                                = 0xffffffff<br>rlimit_nofile_bump(0x80000, 0x7f8281895244, 5, 0)                                 = 0<br>sigbus_install(0, 7, 0, 0x7f828151e695)                                           = 0<br>invoked_as(0x7ffe629f9878, 0x5557aeb46b76, 0, 0x7f828145f0c3)                     = 0<br>invoked_as(0x7ffe629f9878, 0x5557aeb46b6d, 97, 0x7ffe629fa6df)                    = 0<br>invoked_as(0x7ffe629f9878, 0x5557aeb46eb9, 111, 0x7ffe629fa6df)                   = 0<br>......<br>+++ exited (status 1) +++<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 home]# runlevel<br>N 3<br><br><span class="hljs-comment"># N（前一个运行级别）：</span><br><br>N 是 None 的缩写，表示系统启动后没有切换过运行级别（即当前运行级别是系统启动时的默认级别）。<br><br>如果之前切换过运行级别（例如从 5 切换到 3），这里会显示前一个级别（如 5）。<br><br><br><span class="hljs-comment"># 3（当前运行级别）：</span><br><br>表示系统处于 多用户文本模式（无图形界面），这是服务器环境的标准配置。<br><br>运行级别 3 的特点：<br><br>支持多用户登录（通过终端或 SSH）。<br><br>启用网络服务（如 HTTP、SSH、数据库等）。<br><br>不启动图形界面（GUI）。<br></code></pre></td></tr></table></figure><h4 id="常见运行级别对照表"><a href="#常见运行级别对照表" class="headerlink" title="常见运行级别对照表"></a><strong>常见运行级别对照表</strong></h4><table><thead><tr><th align="left">运行级别</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left"><code>0</code></td><td align="left">关机模式（<code>init 0</code> 会关闭系统）。</td></tr><tr><td align="left"><code>1</code></td><td align="left">单用户模式（维护模式，仅 root 可登录，用于系统修复）。</td></tr><tr><td align="left"><code>2</code></td><td align="left">多用户模式（无网络服务，极少使用）。</td></tr><tr><td align="left"><code>3</code></td><td align="left"><strong>多用户文本模式</strong>（标准服务器模式，启用网络服务）。</td></tr><tr><td align="left"><code>4</code></td><td align="left">保留未使用（用户可自定义）。</td></tr><tr><td align="left"><code>5</code></td><td align="left">图形界面模式（桌面环境，如 GNOME、KDE）。</td></tr><tr><td align="left"><code>6</code></td><td align="left">重启模式（<code>init 6</code> 会重启系统）。</td></tr></tbody></table><h2 id="3-结束进程-kill、killall、pkill"><a href="#3-结束进程-kill、killall、pkill" class="headerlink" title="3.结束进程-kill、killall、pkill"></a>3.结束进程-kill、killall、pkill</h2><p>kill：kill命令能够终止你希望停止的进程。 常用的方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kill + pid （终止进程）</span><br><span class="hljs-comment"># kill + -9 + pid （强制终止）</span><br><span class="hljs-comment"># kill + -0 + pid (验证进程是否存在)</span><br><span class="hljs-comment"># killall: 个人觉得这个在日常的shell脚本更为实用，因为我们会发现一个应用可能会启用多个进程，即会产生多个pid，如果用kill会很麻烦，直接用killall会方便多（前提是进程名一样）</span><br></code></pre></td></tr></table></figure><p>pkill：pkill命令可通过进程名终止指定的进程，pkill作用和killall一样,他与killall有以下不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># pkill + 进程名（可以模糊匹配，killall不支持）</span><br><br><span class="hljs-comment"># 使用killall终止进程需要连续执行几次，而pkill可以杀死指定进程及其所有子进程</span><br></code></pre></td></tr></table></figure><h2 id="4-进程启动-nohup、init"><a href="#4-进程启动-nohup、init" class="headerlink" title="4.进程启动-nohup、init"></a>4.进程启动-nohup、init</h2><h3 id="4-1-nohup"><a href="#4-1-nohup" class="headerlink" title="4.1-nohup"></a>4.1-nohup</h3><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.查看帮助<br><span class="hljs-comment"># nohup --help</span><br><br>2.使用<span class="hljs-built_in">nohup</span>运行命令<br><span class="hljs-comment"># 将输出的值默认输出到当前位置的nohup.out（自动创建的文件）中</span><br><span class="hljs-comment"># nohup command arguments</span><br><span class="hljs-built_in">command</span>: 想要后台运行的命令<br>arguments： 传递给命令的值或参数（arguments可加可不加）<br>（如果你需要运行一个程序，即使对应的 Shell 被退出后依然保持运行）<br><br>3.标准输出重定向到文件<br><span class="hljs-comment"># 将原来输出到nohup.out中的内容 输出到指定的文件中</span><br><span class="hljs-comment"># nohup ./myScript.sh &gt; ~/output/myOutput.txt</span><br><br>4.标准错误输出重定向到文件<br><span class="hljs-comment"># nohup bash test.sh 2&gt; stderr.txt &amp;</span><br><br>5.使用<span class="hljs-built_in">nohup</span>命令在后台启动一个程序<br><span class="hljs-comment"># 想要让程序重新回到终端，可以使用 fg 命令。</span><br><span class="hljs-comment"># nohup command arguments &amp;</span><br><br>6.使用<span class="hljs-built_in">nohup</span>运行bash脚本<br><span class="hljs-comment"># nohup bash test.sh &amp;</span><br><br>7.使用<span class="hljs-built_in">nohup</span>同时运行多个程序<br><span class="hljs-comment"># nohup bash -c &#x27;mkdir files &amp;&amp; ping -c 1 baidu.com &amp;&amp; ls&#x27;&gt; output.txt</span><br></code></pre></td></tr></table></figure><p><em><strong><code>nohup</code>命令可以在后台运行程序，即使终端关闭或断开与远程服务器的连接也不会影响程序的运行。通过<code>nohup</code>命令启动的进程会忽略所有终端信号，因此即使使用<code>Ctrl+C</code>关闭终端，进程也不会停止。</strong></em></p><p>可以使用<code>jobs</code>命令查看后台运行的进程，并使用<code>fg</code>命令将进程切换到前台运行。</p><p><code>nohup</code>非常适合用来执行一些需要长时间运行的脚本或程序，比如Web服务器，数据库等。但需要注意的是，<code>nohup</code>命令并不是完全避免了进程被中断的可能，例如系统崩溃、进程错误等情况仍可能导致进程的中断。</p><h3 id="4-2-init"><a href="#4-2-init" class="headerlink" title="4.2-init"></a>4.2-init</h3><p>切换运行级别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">init 3          <span class="hljs-comment"># 切换到多用户文本模式</span><br>telinit 5       <span class="hljs-comment"># 切换到图形界面</span><br></code></pre></td></tr></table></figure><p>查看当前运行级别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">runlevel        <span class="hljs-comment"># 输出示例：N 3（N 表示前一个运行级别）</span><br></code></pre></td></tr></table></figure><p>服务管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service httpd start     <span class="hljs-comment"># 启动服务</span><br>chkconfig httpd on      <span class="hljs-comment"># 设置开机自启</span><br></code></pre></td></tr></table></figure><h2 id="5-进程修改-nice、renice（默认为0，优先级：-20-19）"><a href="#5-进程修改-nice、renice（默认为0，优先级：-20-19）" class="headerlink" title="5.进程修改-nice、renice（默认为0，优先级：-20~19）"></a>5.进程修改-nice、renice（默认为0，优先级：-20~19）</h2><p><em><strong>-20（最高优先级）到+19（最低优先级）</strong></em></p><h3 id="5-1-nice"><a href="#5-1-nice" class="headerlink" title="5.1-nice"></a>5.1-nice</h3><p>nice命令用于在启动进程时设置进程的初始优先级。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-n, –adjustment&#x3D;N</td><td>指定优先级的调整值</td></tr><tr><td>-h, –help</td><td>显示帮助信息</td></tr><tr><td>-v, –version</td><td>显示版本信息。</td></tr></tbody></table><p>基础格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nice -n 命令</span><br>例子：<br><span class="hljs-comment"># nice -1 top</span><br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><em><strong>注意：</strong></em></h5><p>普通用户无法提升优先级（无法设置负值），否则会报错：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">nice:</span> cannot <span class="hljs-keyword">set</span> niceness: Permission denied<br></code></pre></td></tr></table></figure><p>若需提升优先级，需使用 <code>sudo</code> 或切换至 <code>root</code> 用户。</p><h3 id="5-2-renice"><a href="#5-2-renice" class="headerlink" title="5.2-renice"></a>5.2-renice</h3><p>renice命令用于更改已经在运行的进程的优先级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sudo renice -n -p （p是pid值）</span><br>例子：<br><span class="hljs-comment"># sudo renice 6 4635</span><br></code></pre></td></tr></table></figure><h2 id="6-管理系统服务的工具-systemctl"><a href="#6-管理系统服务的工具-systemctl" class="headerlink" title="6.管理系统服务的工具-systemctl"></a>6.管理系统服务的工具-systemctl</h2><p>systemctl 命令是一个在大多数现代 Linux 发行版中用于管理系统服务的工具。它可以启动、停止、重启、启用或禁用系统服务，还可以显示服务的状态和控制服务的启动顺序等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">启动服务<br><span class="hljs-comment"># systemctl start &lt;service-name&gt;</span><br><br>停止服务<br><span class="hljs-comment"># systemctl stop &lt;service-name&gt;</span><br><br>重启服务<br><span class="hljs-comment"># systemctl restart &lt;service-name&gt;</span><br><br>开机自启服务<br><span class="hljs-comment"># systemctl enable &lt;service-name&gt;</span><br><br>关闭开机自启服务<br><span class="hljs-comment"># systemctl disable &lt;service-name&gt;</span><br><br>查看服务运行状态<br><span class="hljs-comment"># systemctl status &lt;service-name&gt;</span><br><br>重新加载 systemd 管理的服务单元配置。<br><span class="hljs-comment"># systemctl daemon-reload</span><br><br>列出当前正在运行的所有系统服务<br><span class="hljs-comment"># systemctl list-units --type=service</span><br><br><span class="hljs-comment"># 切换到图形界面</span><br>systemctl isolate graphical.target   <br><br> <span class="hljs-comment"># 设置默认目标</span><br>systemctl set-default multi-user.target <br></code></pre></td></tr></table></figure><p>某些情况下可能存在无法通过 systemctl 管理的软件，例如：</p><ul><li>手动安装的软件：如果你手动编译并安装了某个软件，但没有为其创建 systemd 服务单元文件，那么这个软件就不会被 systemd 所管理，因此无法使用 systemctl 来对其进行管理。</li><li>自定义安装路径：有些软件可能会被安装到非标准的路径，或者安装路径不在 systemd 默认的服务搜索路径中，这样 systemd 就无法正确识别这些软件并管理其服务。</li></ul><p>在这些情况下，你可能需要手动创建一个 systemd 服务单元文件，以便让 systemd 能够管理这些软件。创建systemd服务单元的方法只需要简单的三步：</p><h3 id="1-编写服务单元文件："><a href="#1-编写服务单元文件：" class="headerlink" title="1.编写服务单元文件："></a>1.编写服务单元文件：</h3><p>​使用文本编辑器（如vim或nano）创建一个新的服务单元文件，通常存储在&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;目录下，以.service为后缀名。</p><h3 id="2-编辑服务单元文件"><a href="#2-编辑服务单元文件" class="headerlink" title="2.编辑服务单元文件"></a>2.编辑服务单元文件</h3><p>定义服务的名称、描述、执行路径等信息。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=My Custom Service <br>After=network.target <br>[Service] <br>Type=simple <br>ExecStart=/path/to/your/executable <br>[Install] <br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="3-重新加载systemd管理器配置："><a href="#3-重新加载systemd管理器配置：" class="headerlink" title="3.重新加载systemd管理器配置："></a>3.重新加载systemd管理器配置：</h3><p>使用以下命令重新加载systemd管理器的配置，以使新的服务单元生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sudo systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><h3 id="4-目标管理："><a href="#4-目标管理：" class="headerlink" title="4.目标管理："></a>4.<strong>目标管理</strong>：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl isolate graphical.target    <span class="hljs-comment"># 切换到图形界面</span><br>systemctl set-default multi-user.target  <span class="hljs-comment"># 设置默认目标</span><br></code></pre></td></tr></table></figure><h3 id="5-日志查看"><a href="#5-日志查看" class="headerlink" title="5.日志查看"></a>5.日志查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看服务日志</span><br>journalctl -u httpd      <br><br><span class="hljs-comment"># 按时间过滤</span><br>journalctl --since <span class="hljs-string">&quot;2023-10-01&quot;</span> --<span class="hljs-keyword">until</span> <span class="hljs-string">&quot;2023-10-02&quot;</span>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理卷、卷组、逻辑卷配置</title>
    <link href="/2025/04/02/%E7%89%A9%E7%90%86%E5%8D%B7%E3%80%81%E5%8D%B7%E7%BB%84%E3%80%81%E9%80%BB%E8%BE%91%E5%8D%B7%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/04/02/%E7%89%A9%E7%90%86%E5%8D%B7%E3%80%81%E5%8D%B7%E7%BB%84%E3%80%81%E9%80%BB%E8%BE%91%E5%8D%B7%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-物理卷"><a href="#1-物理卷" class="headerlink" title="1.物理卷"></a>1.物理卷</h2><table><thead><tr><th align="center">物理磁盘</th><th>分区</th><th>每个分区大小</th></tr></thead><tbody><tr><td align="center">Sdb</td><td>sdb1</td><td>10G</td></tr><tr><td align="center"></td><td>sdb2</td><td>10G</td></tr><tr><td align="center">Sdc</td><td>sdc1</td><td>10G</td></tr><tr><td align="center"></td><td>sdc2</td><td>10G</td></tr><tr><td align="center">Sdd</td><td>sdd1</td><td>10G</td></tr><tr><td align="center"></td><td>sdd2</td><td>10G</td></tr></tbody></table><p>三个新添加磁盘先分为6个主分区，每个10G，以下命令重复即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# fdisk /dev/sdd<br><br>欢迎使用 fdisk (util-linux 2.35.2)。<br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>设备不包含可识别的分区表。<br>创建了一个磁盘标识符为 0xdf4b2c2d 的新 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (0 primary, 0 extended, 4 free)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (1-4, 默认  1): <br>第一个扇区 (2048-41943039, 默认 2048): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +10G<br><br>创建了一个新分区 1，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (1 primary, 0 extended, 3 free)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (2-4, 默认  2): <br>第一个扇区 (20973568-41943039, 默认 20973568): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (20973568-41943039, 默认 41943039): <br><br>创建了一个新分区 2，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：w<br>分区表已调整。<br>将调用 ioctl() 来重新读分区表。<br>正在同步磁盘。<br></code></pre></td></tr></table></figure><p>然后将6个主分区全部设为物理卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# pvcreate /dev/sdb1<br>  Physical volume <span class="hljs-string">&quot;/dev/sdb1&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdb2<br>  Physical volume <span class="hljs-string">&quot;/dev/sdb2&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdc1<br>  Physical volume <span class="hljs-string">&quot;/dev/sdc1&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdc2<br>  Physical volume <span class="hljs-string">&quot;/dev/sdc2&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdd1<br>  Physical volume <span class="hljs-string">&quot;/dev/sdd1&quot;</span> successfully created.<br>[root@localhost ~]# pvcreate /dev/sdd2<br>  Physical volume <span class="hljs-string">&quot;/dev/sdd2&quot;</span> successfully created.<br></code></pre></td></tr></table></figure><h2 id="2-卷组"><a href="#2-卷组" class="headerlink" title="2.卷组"></a>2.卷组</h2><p>创建两个卷组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# vgcreate vg_1 /dev/sdb1 /dev/sdc1<br>  Volume group <span class="hljs-string">&quot;vg_1&quot;</span> successfully created<br>[root@localhost ~]# vgcreate vg_2 /dev/sdb2 /dev/sdc2 /dev/sdd1 /dev/sdd2<br>  Volume group <span class="hljs-string">&quot;vg_2&quot;</span> successfully created<br></code></pre></td></tr></table></figure><h2 id="3-逻辑卷"><a href="#3-逻辑卷" class="headerlink" title="3.逻辑卷"></a>3.逻辑卷</h2><p>创建两个逻辑卷</p><table><thead><tr><th>lv_name</th><th>卷组来源</th><th>大小</th></tr></thead><tbody><tr><td>lv_vg_1</td><td>vg_1</td><td>5G</td></tr><tr><td>lv_vg_2</td><td>vg_2</td><td>10G</td></tr></tbody></table><h2 id="4-检查命令"><a href="#4-检查命令" class="headerlink" title="4.检查命令"></a>4.检查命令</h2><p>参数说明：<br>  -l 是按PE的数量计算大小，也就是物理块数量，一个卷组有多少个块可以划分，可以在vgdisplay的Free PE一项中查看；<br>  -L 是按照Size的大小划分，也就是K、M、G、T等<br>  -n 是要创建的逻辑卷的名称；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# lvcreate -n lv_vg_1 -L 5G vg_1<br>  Logical volume <span class="hljs-string">&quot;lv_vg_1&quot;</span> created.<br>[root@localhost ~]# lvcreate -n lv_vg_2 -L 10G vg_2<br>  Logical volume <span class="hljs-string">&quot;lv_vg_2&quot;</span> created.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看命令：<br>[root@localhost ~]# pvs<br>  PV         VG   Fmt  Attr PSize   PFree  <br>  /dev/sda2  uos  lvm2 a--  &lt;39.00g      0 <br>  /dev/sdb1  vg_1 lvm2 a--  &lt;10.00g  &lt;5.00g<br>  /dev/sdb2  vg_2 lvm2 a--  &lt;10.00g      0 <br>  /dev/sdc1  vg_1 lvm2 a--  &lt;10.00g &lt;10.00g<br>  /dev/sdc2  vg_2 lvm2 a--  &lt;10.00g   9.99g<br>  /dev/sdd1  vg_2 lvm2 a--  &lt;10.00g &lt;10.00g<br>  /dev/sdd2  vg_2 lvm2 a--  &lt;10.00g &lt;10.00g<br><br>[root@localhost ~]# vgs<br>  VG   <span class="hljs-comment">#PV #LV #SN Attr   VSize   VFree </span><br>  uos    1   2   0 wz--n- &lt;39.00g     0 <br>  vg_1   2   1   0 wz--n-  19.99g 14.99g<br>  vg_2   4   1   0 wz--n-  39.98g 29.98g<br><br>[root@localhost ~]# lvs<br>  LV      VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert<br>  root    uos  -wi-ao---- &lt;35.00g                                                   <br>  swap    uos  -wi-ao----   4.00g                                                   <br>  lv_vg_1 vg_1 -wi-a-----   5.00g                                                   <br>  lv_vg_2 vg_2 -wi-a-----  10.00g   <br><br>单个查询：<br>pvdisplay /dev/sdb1<br>lvdisplay /dev/vg_name1/lv_name1<br><br>此处需要注意的是，如何找到自己创建的逻辑卷名。<br>                传统名称：/dev/卷组名/逻辑卷名<br>                内核映射：/dev/mapper/卷组名-逻辑卷名<br>                <br>lsblk:查看层级结构<br>NAME             MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda                8:0    0   40G  0 disk <br>├─sda1             8:1    0    1G  0 part /boot<br>└─sda2             8:2    0   39G  0 part <br>  ├─uos-root     253:0    0   35G  0 lvm  /<br>  └─uos-swap     253:1    0    4G  0 lvm  [SWAP]<br>sdb                8:16   0   20G  0 disk <br>├─sdb1             8:17   0   10G  0 part <br>│ └─vg_1-lv_vg_1 253:2    0    5G  0 lvm  /mnt/vg_1_data<br>└─sdb2             8:18   0   10G  0 part <br>  └─vg_2-lv_vg_2 253:3    0   10G  0 lvm  /mnt/vg_2_data<br>sdc                8:32   0   20G  0 disk <br>├─sdc1             8:33   0   10G  0 part <br>└─sdc2             8:34   0   10G  0 part <br>  └─vg_2-lv_vg_2 253:3    0   10G  0 lvm  /mnt/vg_2_data<br>sdd                8:48   0   20G  0 disk <br>├─sdd1             8:49   0   10G  0 part <br>└─sdd2             8:50   0   10G  0 part <br>sr0               11:0    1  7.4G  0 rom <br></code></pre></td></tr></table></figure><h2 id="5-创建文件系统并挂载文件"><a href="#5-创建文件系统并挂载文件" class="headerlink" title="5.创建文件系统并挂载文件"></a>5.创建文件系统并挂载文件</h2><h3 id="5-1格式化"><a href="#5-1格式化" class="headerlink" title="5.1格式化"></a>5.1格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# mkfs.xfs /dev/vg_1/lv_vg_1<br>meta-data=/dev/vg_1/lv_vg_1      isize=512    agcount=4, agsize=327680 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=1, sparse=1, rmapbt=0<br>         =                       reflink=1<br>data     =                       bsize=4096   blocks=1310720, imaxpct=25<br>         =                       sunit=0      swidth=0 blks<br>naming   =version 2              bsize=4096   ascii-ci=0, ftype=1<br><span class="hljs-built_in">log</span>      =internal <span class="hljs-built_in">log</span>           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0<br>[root@localhost ~]# mkfs.xfs /dev/vg_2/lv_vg_2<br>meta-data=/dev/vg_2/lv_vg_2      isize=512    agcount=4, agsize=655360 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=1, sparse=1, rmapbt=0<br>         =                       reflink=1<br>data     =                       bsize=4096   blocks=2621440, imaxpct=25<br>         =                       sunit=0      swidth=0 blks<br>naming   =version 2              bsize=4096   ascii-ci=0, ftype=1<br><span class="hljs-built_in">log</span>      =internal <span class="hljs-built_in">log</span>           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0<br></code></pre></td></tr></table></figure><h3 id="5-2创建挂载点目录"><a href="#5-2创建挂载点目录" class="headerlink" title="5.2创建挂载点目录"></a>5.2创建挂载点目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# <span class="hljs-built_in">mkdir</span> -p /mnt/vg_1_data<br>[root@192 /]# <span class="hljs-built_in">mkdir</span> -p /mnt/vg_2_data<br></code></pre></td></tr></table></figure><h3 id="5-3将挂载信息写入配置（永久挂载）"><a href="#5-3将挂载信息写入配置（永久挂载）" class="headerlink" title="5.3将挂载信息写入配置（永久挂载）"></a>5.3将挂载信息写入配置（永久挂载）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# vim /etc/fstab<br>将这两行写进去<br>/dev/vg_1/lv_vg_1 /mnt/vg_1_data xfs defaults 0 0<br>/dev/vg_2/lv_vg_2 /mnt/vg_2_data xfs defaults 0 0<br></code></pre></td></tr></table></figure><h3 id="5-4挂载全部"><a href="#5-4挂载全部" class="headerlink" title="5.4挂载全部"></a>5.4挂载全部</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# mount -a<br></code></pre></td></tr></table></figure><h3 id="5-5查看是否成功"><a href="#5-5查看是否成功" class="headerlink" title="5.5查看是否成功"></a>5.5查看是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 /]# <span class="hljs-built_in">df</span> -h<br>文件系统                  容量  已用  可用 已用% 挂载点<br>devtmpfs                  3.8G     0  3.8G    0% /dev<br>tmpfs                     3.9G   12K  3.9G    1% /dev/shm<br>tmpfs                     3.9G   17M  3.8G    1% /run<br>tmpfs                     3.9G     0  3.9G    0% /sys/fs/cgroup<br>/dev/mapper/uos-root       35G  4.6G   31G   14% /<br>tmpfs                     3.9G   16K  3.9G    1% /tmp<br>/dev/sda1                1014M  238M  777M   24% /boot<br>tmpfs                     779M     0  779M    0% /run/user/0<br>/dev/mapper/vg_1-lv_vg_1  5.0G   68M  5.0G    2% /mnt/vg_1_data<br>/dev/mapper/vg_2-lv_vg_2   10G  104M  9.9G    2% /mnt/vg_2_data<br></code></pre></td></tr></table></figure><p>后续会在本文章内继续更新扩展卷组等内容</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软Raid配置</title>
    <link href="/2025/04/02/%E8%BD%AFRaid%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/04/02/%E8%BD%AFRaid%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-硬-RAID-与软-RAID区分"><a href="#1-硬-RAID-与软-RAID区分" class="headerlink" title="1.硬 RAID 与软 RAID区分"></a>1.硬 RAID 与软 RAID区分</h2><p>磁盘阵列冗余技术<br>它是由很多独立的磁盘组成一个容量巨大的磁盘组，然后利用个别磁盘提供数据所产生的一个加速效果，提升整个磁盘系统性能，利用这项技术，能够将数据切割为许多个区段，分别存储在各个硬盘上，磁盘阵列还能利用检查的概念，Part Check 然后在数组中检查任意一个硬盘故障的时候，我仍然可以读取数据，在数据重构的时候，再将数据通过计算之后，加入到新的硬盘中，这就是磁盘阵列冗余技术<br>软 RAID。<br>软 RAID 通过软件的形式去安装，去使用，软件是其他程序员写好的，我们可以直接使用，叫软 RAID。<br>硬 RAID<br>硬 RAID 而是提供 RAID 卡，它是一块实实在在存在的硬件，能够实现与软 RAID 一样的效果，硬 RAID 效果比软 RAID 效果佳，硬 RAID 是一种把多块独立的物理硬盘按不同方式组合起来形成一个逻辑硬盘，从而提供比单个硬盘有着更高的性能和提供数据冗余的技术，叫做 硬 RAID。<br>RAID常见组合</p><ul><li>RAID 0</li><li>RAID 1</li><li>RAID 5</li><li>RAID 10<br>软 RAID 的区分<br>互联网公司一般都会购买 RAID 卡(硬 RAID)<br>-数据冗余性能(也就是数据安全性能)从好到坏的排序：RAID 1 RAID 10 RAID 5 RAID 0</li><li>数据读写性能从好到坏：RAID 0 RAID 10 RAID 5 RAID 1<br>-成本从高到低：RAID 0 RAID 10 RAID 1 RAID 5</li><li>硬 RAID 与软 RAID 的区别<br>-软件 RAID 会额外的消耗 CPU 资源，造成服务器压力。<br>-硬 RAID 更加稳定，并且 软件 RAID 可能会造成磁盘发热过量，造成损坏。公司一般都使用 硬件 RAID<br>-硬 RAID 兼容性更好，软 RAID 兼容性依赖于操作系统，可能会出问题。<br>-硬 RAID 完胜。</li></ul><h2 id="2-配置软Raid-注意应先做软Raid再做LVM"><a href="#2-配置软Raid-注意应先做软Raid再做LVM" class="headerlink" title="2.配置软Raid(注意应先做软Raid再做LVM)"></a>2.配置软Raid(注意应先做软Raid再做LVM)</h2><p>今天我们来配置软Raid：</p><h3 id="2-1准备"><a href="#2-1准备" class="headerlink" title="2.1准备"></a>2.1准备</h3><p>添加一个20G的虚拟硬盘，分成10个2G的分区(使用fdisk，上期文章有讲)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# fdisk /dev/sdb<br><br>欢迎使用 fdisk (util-linux 2.39.1)。<br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>设备不包含可识别的分区表。<br>Created a new DOS (MBR) disklabel with disk identifier 0x8cbd7811.<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (0个主分区，0个扩展分区，4空闲)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (1-4, 默认  1): <br>第一个扇区 (2048-41943039, 默认 2048): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +10G<br><br>创建了一个新分区 1，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：n<br>分区类型<br>   p   主分区 (1个主分区，0个扩展分区，3空闲)<br>   e   扩展分区 (逻辑分区容器)<br>选择 (默认 p)：p<br>分区号 (2-4, 默认  2): <br>第一个扇区 (20973568-41943039, 默认 20973568): <br>最后一个扇区，+/-sectors 或 +size&#123;K,M,G,T,P&#125; (20973568-41943039, 默认 41943039): <br><br>创建了一个新分区 2，类型为“Linux”，大小为 10 GiB。<br><br>命令(输入 m 获取帮助)：w<br>分区表已调整。<br>将调用 ioctl() 来重新读分区表。<br>正在同步磁盘。<br></code></pre></td></tr></table></figure><p>首先看一下是否安装了mdadm工具，如果没有就安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">which</span> mdadm<br>/usr/sbin/mdadm<br>[root@192 ~]# rpm -qf /usr/sbin/mdadm<br>mdadm-4.1-rc2.0.17.uel20.x86_64<br><span class="hljs-comment"># 没有就安装</span><br>[root@192 ~]# dnf install -y mdadm<br></code></pre></td></tr></table></figure><h3 id="2-2创建raid0"><a href="#2-2创建raid0" class="headerlink" title="2.2创建raid0"></a>2.2创建raid0</h3><h4 id="2-2-1创建"><a href="#2-2-1创建" class="headerlink" title="2.2.1创建"></a>2.2.1创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-C:创建软raid<br>-l：指定raid级别<br>-n：指定raid中设备个数<br>[root@192 ~]# mdadm -C /dev/md0 -l 0 -n 2 /dev/sdb1 /dev/sdb2<br>mdadm: Defaulting to version 1.2 metadata<br>mdadm: array /dev/md0 started.<br></code></pre></td></tr></table></figure><h4 id="2-2-2查看RAID信息："><a href="#2-2-2查看RAID信息：" class="headerlink" title="2.2.2查看RAID信息："></a>2.2.2查看RAID信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] <br>md0 : active raid0 sdb2[1] sdb1[0]<br>      20952064 blocks super 1.2 512k chunks<br>      <br>unused devices: &lt;none&gt;<br></code></pre></td></tr></table></figure><h4 id="2-2-3查看指定的RAID信息："><a href="#2-2-3查看指定的RAID信息：" class="headerlink" title="2.2.3查看指定的RAID信息："></a>2.2.3查看指定的RAID信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm --detail /dev/md0<br>/dev/md0:<br>           Version : 1.2<br>     Creation Time : Fri Apr  4 16:45:39 2025<br>        Raid Level : raid0<br>        Array Size : 20952064 (19.98 GiB 21.45 GB)<br>      Raid Devices : 2<br>     Total Devices : 2<br>       Persistence : Superblock is persistent<br><br>       Update Time : Fri Apr  4 16:45:39 2025<br>             State : clean <br>    Active Devices : 2<br>   Working Devices : 2<br>    Failed Devices : 0<br>     Spare Devices : 0<br><br>            Layout : original<br>        Chunk Size : 512K<br><br>Consistency Policy : none<br><br>              Name : 192.168.135.174:0  (<span class="hljs-built_in">local</span> to host 192.168.135.174)<br>              UUID : 1a44ef6c:1e8a114a:5df87f1b:1b4a1845<br>            Events : 0<br><br>    Number   Major   Minor   RaidDevice State<br>       0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>       1       8       18        1      active <span class="hljs-built_in">sync</span>   /dev/sdb2<br></code></pre></td></tr></table></figure><h4 id="2-2-4格式化挂载使用并查看空间使用情况："><a href="#2-2-4格式化挂载使用并查看空间使用情况：" class="headerlink" title="2.2.4格式化挂载使用并查看空间使用情况："></a>2.2.4格式化挂载使用并查看空间使用情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mkfs.ext4 /dev/md0<br>mke2fs 1.47.0 (5-Feb-2023)<br>创建含有 5238016 个块（每块 4k）和 1310720 个 inode 的文件系统<br>文件系统 UUID：d6fa2ff5-b54c-4300-9fc2-eeceaa32ef9a<br>超级块的备份存储于下列块：<br>32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, <br>4096000<br><br>正在分配组表：完成                            <br>正在写入 inode表：完成                            <br>创建日志（32768 个块）：完成<br>写入超级块和文件系统账户统计信息：已完成 <br><br>[root@192 ~]# <span class="hljs-built_in">mkdir</span> /md0（创建挂载目录）<br>[root@192 ~]# mount /dev/md0 /md0/<br>[root@192 ~]# <span class="hljs-built_in">df</span> -h<br>文件系统        大小  已用  可用 已用% 挂载点<br>/dev/sda4        26G  2.7G   23G   11% /<br>devtmpfs        4.0M     0  4.0M    0% /dev<br>tmpfs           1.7G     0  1.7G    0% /dev/shm<br>tmpfs           4.0M     0  4.0M    0% /sys/fs/cgroup<br>tmpfs           682M  8.8M  673M    2% /run<br>/dev/sda4        26G  2.7G   23G   11% /home<br>tmpfs           1.7G     0  1.7G    0% /tmp<br>/dev/sda2       974M  207M  700M   23% /boot<br>/dev/md0         20G   24K   19G    1% /md0<br></code></pre></td></tr></table></figure><p>停止raid并擦除超级块（superblock）清楚相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.卸载设备<br><span class="hljs-comment"># umount /md5/</span><br>2.移除所有磁盘<br><span class="hljs-comment"># mdadm /dev/md0 -f /dev/sdb[12]</span><br><span class="hljs-comment"># mdadm /dev/md0 -r /dev/sdb[12]</span><br>3.停止raid：<br><span class="hljs-comment"># mdadm --stop /dev/md0</span><br>4.擦除超级块（superblock）清楚相关信息<br><span class="hljs-comment"># mdadm --zero-superblock /dev/sdb[12]</span><br></code></pre></td></tr></table></figure><h3 id="2-3创建raid1"><a href="#2-3创建raid1" class="headerlink" title="2.3创建raid1"></a>2.3创建raid1</h3><h4 id="2-3-1创建raid1："><a href="#2-3-1创建raid1：" class="headerlink" title="2.3.1创建raid1："></a>2.3.1创建raid1：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -C /dev/md1 -l 1 -n 2 /dev/sdb1 /dev/sdb2<br></code></pre></td></tr></table></figure><h4 id="2-3-2查看状态信息："><a href="#2-3-2查看状态信息：" class="headerlink" title="2.3.2查看状态信息："></a>2.3.2查看状态信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# watch -n1 <span class="hljs-string">&quot;cat /proc/mdstat&quot;</span> <br><span class="hljs-comment">#watch命令监控该文件变化情况,1秒钟显示一次</span><br><span class="hljs-comment">#或者直接查看</span><br>[root@node01 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat <br>Personalities : [raid0] [raid1] <br>md1 : active raid1 sdb2[1] sdb1[0]<br>      10475520 blocks super 1.2 [2/2] [UU]<br>      <br>unused devices: &lt;none&gt;<br>      <span class="hljs-comment">#以上信息说明两块盘在进行同步，100%说明同步完成</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3查看raid1详细信息"><a href="#2-3-3查看raid1详细信息" class="headerlink" title="2.3.3查看raid1详细信息"></a>2.3.3查看raid1详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -D /dev/md1   <br></code></pre></td></tr></table></figure><h4 id="2-3-4格式化挂载使用："><a href="#2-3-4格式化挂载使用：" class="headerlink" title="2.3.4格式化挂载使用："></a>2.3.4格式化挂载使用：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mkfs.ext4 /dev/md1<br>[root@192 ~]# <span class="hljs-built_in">mkdir</span> /md1<br>[root@192 ~]# mount /dev/md1 /md1<br></code></pre></td></tr></table></figure><h4 id="2-3-5查看空间使用情况："><a href="#2-3-5查看空间使用情况：" class="headerlink" title="2.3.5查看空间使用情况："></a>2.3.5查看空间使用情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">df</span> -h<br>文件系统        大小  已用  可用 已用% 挂载点<br>/dev/md1      9.8G  24K  9.3G  1%  /md1<br><span class="hljs-comment">#可用空间50%</span><br></code></pre></td></tr></table></figure><h4 id="2-3-6测试验证热插拔："><a href="#2-3-6测试验证热插拔：" class="headerlink" title="2.3.6测试验证热插拔："></a>2.3.6测试验证热插拔：</h4><h5 id="1-模拟一块盘故障（将磁盘标记为失效）"><a href="#1-模拟一块盘故障（将磁盘标记为失效）" class="headerlink" title="1.模拟一块盘故障（将磁盘标记为失效）"></a>1.模拟一块盘故障（将磁盘标记为失效）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md1 -f /dev/sdb2<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb2 faulty <span class="hljs-keyword">in</span> /dev/md1<br><span class="hljs-comment">#-f or --fail  表示失效</span><br></code></pre></td></tr></table></figure><h5 id="2-查看raid1状态"><a href="#2-查看raid1状态" class="headerlink" title="2.查看raid1状态"></a>2.查看raid1状态</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] [raid1] <br>md1 : active raid1 sdb2[1](F) sdb1[0](F表示失效失败)<br>      10475520 blocks super 1.2 [2/1] [U_]<br>      <span class="hljs-comment">#_表示有一块盘失效</span><br>unused devices: &lt;none&gt;<br><br>[root@192 dev]# mdadm -D /dev/md1<br>...<br>    Number   Major   Minor   RaidDevice State<br>       0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>       -       0        0        1      removed<br>       1       8       18        -      faulty   /dev/sdb2<br><span class="hljs-comment"># 失效盘等待移除</span><br></code></pre></td></tr></table></figure><h5 id="3-移除故障或者失效硬盘（热拔）"><a href="#3-移除故障或者失效硬盘（热拔）" class="headerlink" title="3.移除故障或者失效硬盘（热拔）"></a>3.移除故障或者失效硬盘（热拔）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md1 -r /dev/sdb1<br>mdadm: hot removed /dev/sdb1 from /dev/md1<br><br><span class="hljs-comment">#-r or --remove 表示移除</span><br><br>[root@192 ~]# mdadm -D /dev/md1<br>...<br>Number   Major   Minor   RaidDevice State<br>   0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>   -       0        0        1      removed<br></code></pre></td></tr></table></figure><h5 id="4-加入新的磁盘到raid1中（热插）"><a href="#4-加入新的磁盘到raid1中（热插）" class="headerlink" title="4.加入新的磁盘到raid1中（热插）"></a>4.加入新的磁盘到raid1中（热插）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm  /dev/md1 -a /dev/sdb5<br>mdadm: added /dev/sdd5<br></code></pre></td></tr></table></figure><h5 id="5-加入新的磁盘到raid1中（热插）"><a href="#5-加入新的磁盘到raid1中（热插）" class="headerlink" title="5.加入新的磁盘到raid1中（热插）"></a>5.加入新的磁盘到raid1中（热插）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm  /dev/md1 -a /dev/sdb3<br>mdadm: added /dev/sdb3<br><br><span class="hljs-comment">#-a or --add 表示增加</span><br><br>[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat <br></code></pre></td></tr></table></figure><h3 id="2-4创建raid5"><a href="#2-4创建raid5" class="headerlink" title="2.4创建raid5"></a>2.4创建raid5</h3><h4 id="2-4-1创建raid5："><a href="#2-4-1创建raid5：" class="headerlink" title="2.4.1创建raid5："></a>2.4.1创建raid5：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -C /dev/md5 -l 5 -n 3 -x 1 /dev/sdb&#123;1,2,3,4&#125;<br><span class="hljs-comment">#-x, --spare-devices=  表示指定热备盘</span><br>[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] <br>md5 : active raid5 sdb3[4] sdb4[3](S) sdb2[1] sdb1[0]<br>      10473472 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3/3] [UUU]<br>      <br>unused devices: &lt;none&gt;<br></code></pre></td></tr></table></figure><p>说明：热备盘表示当其中一块盘故障后，热备盘会立马顶上去，而不需要人为手动干预。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -D /dev/md5<br>    Number   Major   Minor   RaidDevice State<br>       0       8       17        0      active <span class="hljs-built_in">sync</span>   /dev/sdb1<br>       1       8       18        1      active <span class="hljs-built_in">sync</span>   /dev/sdb2<br>       4       8       19        2      active <span class="hljs-built_in">sync</span>   /dev/sdb3<br>       3       8       20        -      spare     /dev/sdb4<br></code></pre></td></tr></table></figure><h4 id="2-4-2格式化挂载使用："><a href="#2-4-2格式化挂载使用：" class="headerlink" title="2.4.2格式化挂载使用："></a>2.4.2格式化挂载使用：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mkfs.ext4 /dev/md5<br>[root@192 ~]# <span class="hljs-built_in">mkdir</span> /md5<br>[root@192 ~]# mount /dev/md5 /md5/<br></code></pre></td></tr></table></figure><h4 id="2-4-3查看空间使用情况："><a href="#2-4-3查看空间使用情况：" class="headerlink" title="2.4.3查看空间使用情况："></a>2.4.3查看空间使用情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">df</span> -h<br>文件系统             容量  已用  可用 已用% 挂载点<br>/dev/md5        9.8G   24K  9.3G    1%  /md5<br><span class="hljs-comment">#可用空间 （磁盘数量-1）x 单一磁盘容量</span><br></code></pre></td></tr></table></figure><h4 id="2-4-4测试热备磁盘作用："><a href="#2-4-4测试热备磁盘作用：" class="headerlink" title="2.4.4测试热备磁盘作用："></a>2.4.4测试热备磁盘作用：</h4><h5 id="1-标记一块活动盘失效"><a href="#1-标记一块活动盘失效" class="headerlink" title="1.标记一块活动盘失效"></a>1.标记一块活动盘失效</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md5 -f /dev/sdb1<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb1 faulty <span class="hljs-keyword">in</span> /dev/md5<br><br>[root@192 ~]# <span class="hljs-built_in">cat</span> /proc/mdstat<br>Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] <br>md5 : active raid5 sdb3[4] sdb4[3] sdb2[1] sdb1[0](F)<br>      10473472 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3/3] [UUU]<br>      <br>unused devices: &lt;none&gt;<br><br>[root@192 ~]# mdadm -D /dev/md5<br>    Number   Major   Minor   RaidDevice State<br>       3       8       20        0      active <span class="hljs-built_in">sync</span>   /dev/sdb4<br>       1       8       18        1      active <span class="hljs-built_in">sync</span>   /dev/sdb2<br>       4       8       19        2      active <span class="hljs-built_in">sync</span>   /dev/sdb3<br><br>       0       8       17        -      faulty   /dev/sdb1<br><br></code></pre></td></tr></table></figure><h5 id="2-移除失效的盘"><a href="#2-移除失效的盘" class="headerlink" title="2.移除失效的盘"></a>2.移除失效的盘</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm /dev/md5 -r /dev/sdb1<br>mdadm: hot removed /dev/sdb1 from /dev/md5<br>[root@192 ~]# mdadm /dev/md5 -a /dev/sdb1<br>mdadm: added /dev/sdb1<br></code></pre></td></tr></table></figure><h2 id="3-保存RAID信息"><a href="#3-保存RAID信息" class="headerlink" title="3.保存RAID信息"></a>3.保存RAID信息</h2><p>为什么要保存raid信息？<br>如果不做信息的保存，在CentOS6中，重启系统后raid不能自动被识别到，7,8系统中不会出现这种状况。</p><h3 id="3-1创建配置文件"><a href="#3-1创建配置文件" class="headerlink" title="3.1创建配置文件"></a>3.1创建配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# <span class="hljs-built_in">cat</span> /etc/mdadm.conf<br>ARRAY /dev/md5 metadata=1.2 spares=1 name=192.168.135.174:5 UUID=352fe575:2b243e2a:3d6f59b4:88ef686a<br></code></pre></td></tr></table></figure><h2 id="4-raid停止与启动"><a href="#4-raid停止与启动" class="headerlink" title="4.raid停止与启动"></a>4.raid停止与启动</h2><p>以RAID5为例说明：<br>停止raid:</p><h4 id="4-1卸载raid"><a href="#4-1卸载raid" class="headerlink" title="4.1卸载raid"></a>4.1卸载raid</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># umount /md5 </span><br></code></pre></td></tr></table></figure><h4 id="4-2-使用命令停止raid"><a href="#4-2-使用命令停止raid" class="headerlink" title="4.2.使用命令停止raid"></a>4.2.使用命令停止raid</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm --stop /dev/md5</span><br></code></pre></td></tr></table></figure><h4 id="4-3-启动raid"><a href="#4-3-启动raid" class="headerlink" title="4.3.启动raid"></a>4.3.启动raid</h4><h5 id="4-3-1配置文件-etc-mdadm-conf-存在如下启动"><a href="#4-3-1配置文件-etc-mdadm-conf-存在如下启动" class="headerlink" title="4.3.1配置文件(&#x2F;etc&#x2F;mdadm.conf)存在如下启动"></a>4.3.1配置文件(&#x2F;etc&#x2F;mdadm.conf)存在如下启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm -A /dev/md5</span><br></code></pre></td></tr></table></figure><h5 id="4-3-2配置文件-etc-mdadm-conf-不存在如下启动"><a href="#4-3-2配置文件-etc-mdadm-conf-不存在如下启动" class="headerlink" title="4.3.2配置文件(&#x2F;etc&#x2F;mdadm.conf)不存在如下启动"></a>4.3.2配置文件(&#x2F;etc&#x2F;mdadm.conf)不存在如下启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm -A /dev/md5 /dev/sdb[1234]</span><br></code></pre></td></tr></table></figure><h5 id="4-3-3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合"><a href="#4-3-3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合" class="headerlink" title="4.3.3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合"></a>4.3.3如果设备名不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]# mdadm -E /dev/sdb1 | grep UUID<br>     Array UUID : 352fe575:2b243e2a:3d6f59b4:88ef686a<br>    Device UUID : fd110eee:41700eb5:242c1771:5b5ab08f<br><span class="hljs-comment">#说明：同一个raid里每个磁盘查看的UUID都是这个值</span><br>[root@192 ~]# mdadm -E /dev/sdb2 | grep UUID<br>     Array UUID : 352fe575:2b243e2a:3d6f59b4:88ef686a<br>    Device UUID : 974d110f:f9cb7a58:19b41563:4781649c<br><span class="hljs-comment">#通过以上方法找到后进行重新组合，如下：</span><br>[root@node01 ~]# mdadm -A --uuid=352fe575:2b243e2a:3d6f59b4:88ef686a /dev/md5<br>mdadm: /dev/md5 has been started with 3 drives and 1 spare.<br></code></pre></td></tr></table></figure><h4 id="4-4raid的删除"><a href="#4-4raid的删除" class="headerlink" title="4.4raid的删除"></a>4.4raid的删除</h4><h5 id="4-4-1卸载设备"><a href="#4-4-1卸载设备" class="headerlink" title="4.4.1卸载设备"></a>4.4.1卸载设备</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># umount /md5/</span><br></code></pre></td></tr></table></figure><h5 id="4-4-2移出所有磁盘"><a href="#4-4-2移出所有磁盘" class="headerlink" title="4.4.2移出所有磁盘"></a>4.4.2移出所有磁盘</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 dev]# mdadm /dev/md5 -f /dev/sdb[1234]<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb6 faulty <span class="hljs-keyword">in</span> /dev/md5<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb7 faulty <span class="hljs-keyword">in</span> /dev/md5<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb8 faulty <span class="hljs-keyword">in</span> /dev/md5<br>mdadm: <span class="hljs-built_in">set</span> /dev/sdb9 faulty <span class="hljs-keyword">in</span> /dev/md5<br><br>[root@192 dev]# mdadm /dev/md5 -r /dev/sdb[1234]<br>mdadm: hot removed /dev/sdb6 from /dev/md5<br>mdadm: hot removed /dev/sdb7 from /dev/md5<br>mdadm: hot removed /dev/sdb8 from /dev/md5<br>mdadm: hot removed /dev/sdb9 from /dev/md5<br></code></pre></td></tr></table></figure><h5 id="4-4-3停止raid"><a href="#4-4-3停止raid" class="headerlink" title="4.4.3停止raid"></a>4.4.3停止raid</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node01 ~]# mdadm --stop /dev/md5<br>mdadm: stopped /dev/md5<br></code></pre></td></tr></table></figure><p>4.4.4擦出超级块（superblock）清除相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mdadm --zero-superblock /dev/sdb[1234]</span><br></code></pre></td></tr></table></figure><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>做之前注意看一下系统内核是否自动装配了raid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 dev]# mdadm --examine /dev/sdb1 /dev/sdb2<br>mdadm: No md superblock detected on /dev/sdb1.<br>mdadm: No md superblock detected on /dev/sdb2.<br></code></pre></td></tr></table></figure><p>这里可以看到没有，如果自动装填了，那我们需要去先停止自动创建的设备，并且清楚分区上RAID元数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 停止自动创建的 RAID 设备<br>mdadm --stop /dev/mdXXX<br><br>2. 清除分区上的 RAID 元数据<br>mdadm --zero-superblock /dev/sde1 /dev/sde2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Virtualenv基础命令</title>
    <link href="/2025/02/19/Virtualenv%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/Virtualenv%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-安装-virtualenv-如果你还没有安装-virtualenv，可以使用-pip-进行安装："><a href="#1-安装-virtualenv-如果你还没有安装-virtualenv，可以使用-pip-进行安装：" class="headerlink" title="1.安装 virtualenv 如果你还没有安装 virtualenv，可以使用 pip 进行安装："></a>1.安装 virtualenv 如果你还没有安装 <code>virtualenv</code>，可以使用 <code>pip</code> 进行安装：</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install virtualenv<br></code></pre></td></tr></table></figure><h4 id="2-创建虚拟环境在指定目录下创建一个新的虚拟环境："><a href="#2-创建虚拟环境在指定目录下创建一个新的虚拟环境：" class="headerlink" title="2.创建虚拟环境在指定目录下创建一个新的虚拟环境："></a>2.创建虚拟环境在指定目录下创建一个新的虚拟环境：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv myenv<br></code></pre></td></tr></table></figure><p>或者你可以指定 Python 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv -p /usr/bin/python3 myenv<br></code></pre></td></tr></table></figure><h4 id="3-激活虚拟环境激活虚拟环境后，你的-shell-提示符会显示当前活动的环境名称。"><a href="#3-激活虚拟环境激活虚拟环境后，你的-shell-提示符会显示当前活动的环境名称。" class="headerlink" title="3.激活虚拟环境激活虚拟环境后，你的 shell 提示符会显示当前活动的环境名称。"></a>3.激活虚拟环境激活虚拟环境后，你的 shell 提示符会显示当前活动的环境名称。</h4><ul><li><p>在 Windows 上**(进入到你创建的虚拟环境文件中的Script目录，直接执行activate)**：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\myenv\Scripts\activate<br></code></pre></td></tr></table></figure></li><li><p>在 macOS&#x2F;Linux 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> myenv/bin/activate<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-停用虚拟环境当你想退出虚拟环境时，可以使用以下命令："><a href="#4-停用虚拟环境当你想退出虚拟环境时，可以使用以下命令：" class="headerlink" title="4.停用虚拟环境当你想退出虚拟环境时，可以使用以下命令："></a>4.停用虚拟环境当你想退出虚拟环境时，可以使用以下命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure><h4 id="5-删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可："><a href="#5-删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可：" class="headerlink" title="5.删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可："></a>5.删除虚拟环境删除虚拟环境只需删除其所在的文件夹即可：</h4><p>linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf myenv<br></code></pre></td></tr></table></figure><p>或者在 Windows 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> /s /q myenv<br></code></pre></td></tr></table></figure><h4 id="6-列出已安装的包在激活的虚拟环境中，你可以使用-pip-列出已安装的包："><a href="#6-列出已安装的包在激活的虚拟环境中，你可以使用-pip-列出已安装的包：" class="headerlink" title="6.列出已安装的包在激活的虚拟环境中，你可以使用 pip 列出已安装的包："></a>6.列出已安装的包在激活的虚拟环境中，你可以使用 <code>pip</code> 列出已安装的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip list<br></code></pre></td></tr></table></figure><h4 id="7-安装包使用-pip-安装包到当前激活的虚拟环境中："><a href="#7-安装包使用-pip-安装包到当前激活的虚拟环境中：" class="headerlink" title="7.安装包使用 pip 安装包到当前激活的虚拟环境中："></a>7.安装包使用 <code>pip</code> 安装包到当前激活的虚拟环境中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install package_name<br></code></pre></td></tr></table></figure><h4 id="8-更新包更新已安装的包："><a href="#8-更新包更新已安装的包：" class="headerlink" title="8.更新包更新已安装的包："></a>8.更新包更新已安装的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install --upgrade package_name<br></code></pre></td></tr></table></figure><h4 id="9-卸载包卸载不需要的包："><a href="#9-卸载包卸载不需要的包：" class="headerlink" title="9.卸载包卸载不需要的包："></a>9.卸载包卸载不需要的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip uninstall package_name<br></code></pre></td></tr></table></figure><h4 id="10-导出环境配置文件将当前环境中的所有包及其版本信息导出到一个-requirements-txt-文件中："><a href="#10-导出环境配置文件将当前环境中的所有包及其版本信息导出到一个-requirements-txt-文件中：" class="headerlink" title="10.导出环境配置文件将当前环境中的所有包及其版本信息导出到一个 requirements.txt 文件中："></a>10.导出环境配置文件将当前环境中的所有包及其版本信息导出到一个 <code>requirements.txt</code> 文件中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure><h4 id="11-从配置文件安装包根据-requirements-txt-文件安装所有需要的包："><a href="#11-从配置文件安装包根据-requirements-txt-文件安装所有需要的包：" class="headerlink" title="11.从配置文件安装包根据 requirements.txt 文件安装所有需要的包："></a>11.从配置文件安装包根据 <code>requirements.txt</code> 文件安装所有需要的包：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>Virtualenv</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda基础命令</title>
    <link href="/2025/02/19/Anaconda%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/02/19/Anaconda%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-创建新的-Conda-环境"><a href="#1-创建新的-Conda-环境" class="headerlink" title="1.创建新的 Conda 环境"></a>1.创建新的 Conda 环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create --name 环境名 python=3.x<br></code></pre></td></tr></table></figure><h4 id="2-激活环境"><a href="#2-激活环境" class="headerlink" title="2.激活环境"></a>2.激活环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate 环境名<br></code></pre></td></tr></table></figure><h4 id="3-停用当前环境"><a href="#3-停用当前环境" class="headerlink" title="3.停用当前环境"></a>3.停用当前环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<br></code></pre></td></tr></table></figure><h4 id="4-列出所有环境"><a href="#4-列出所有环境" class="headerlink" title="4.列出所有环境"></a>4.列出所有环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><h4 id="5-删除环境"><a href="#5-删除环境" class="headerlink" title="5. 删除环境"></a>5. 删除环境</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda remove --name myenv --all<br></code></pre></td></tr></table></figure><h4 id="6-安装包"><a href="#6-安装包" class="headerlink" title="6.安装包"></a>6.安装包</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install package_name<br></code></pre></td></tr></table></figure><h4 id="7-更新包"><a href="#7-更新包" class="headerlink" title="7.更新包"></a>7.更新包</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda update package_name<br></code></pre></td></tr></table></figure><h4 id="8-卸载包"><a href="#8-卸载包" class="headerlink" title="8.卸载包"></a>8.卸载包</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda remove package_name<br></code></pre></td></tr></table></figure><h4 id="9-查看已安装的包列表"><a href="#9-查看已安装的包列表" class="headerlink" title="9.查看已安装的包列表"></a>9.查看已安装的包列表</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda list<br></code></pre></td></tr></table></figure><h4 id="10-导出环境配置文件"><a href="#10-导出环境配置文件" class="headerlink" title="10.导出环境配置文件"></a>10.导出环境配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> &gt; environment.yml<br></code></pre></td></tr></table></figure><h4 id="11-从配置文件创建环境"><a href="#11-从配置文件创建环境" class="headerlink" title="11.从配置文件创建环境"></a>11.从配置文件创建环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> create -f environment.yml<br></code></pre></td></tr></table></figure><h4 id="12-搜索包"><a href="#12-搜索包" class="headerlink" title="12.搜索包"></a>12.搜索包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda search search_term<br></code></pre></td></tr></table></figure><h4 id="13-虚拟环境解释器所处位置"><a href="#13-虚拟环境解释器所处位置" class="headerlink" title="13.虚拟环境解释器所处位置"></a>13.虚拟环境解释器所处位置</h4><p>Anaconda安装位置的envs中，例子：D:\Apps\anaconda3\envs</p>]]></content>
    
    
    <categories>
      
      <category>Anaconda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda与virtualenv</title>
    <link href="/2025/02/19/Anaconda%E4%B8%8Evirtualenv/"/>
    <url>/2025/02/19/Anaconda%E4%B8%8Evirtualenv/</url>
    
    <content type="html"><![CDATA[<p>Anaconda虚拟环境（基于<code>conda</code>）与<code>virtualenv</code>虚拟环境在多个方面存在显著差异，以下是它们的详细对比：</p><h3 id="1-包管理与依赖范围"><a href="#1-包管理与依赖范围" class="headerlink" title="1. 包管理与依赖范围"></a>1. <strong>包管理与依赖范围</strong></h3><ul><li><strong>Anaconda (conda)</strong><ul><li><strong>多语言支持</strong>：管理Python包的同时，可处理非Python依赖（如C&#x2F;C++库、R包等），例如MKL、OpenSSL。</li><li><strong>预编译二进制包</strong>：通过Anaconda仓库提供优化后的二进制包，避免从源码编译，适合科学计算。</li><li><strong>依赖解析器</strong>：具备更强的依赖冲突解决能力，适合复杂依赖环境。</li></ul></li><li><strong>virtualenv</strong><ul><li><strong>纯Python环境</strong>：仅管理Python包，依赖<code>pip</code>安装，非Python依赖需手动处理。</li><li><strong>源码编译</strong>：部分包需本地编译（如无预编译wheel），可能需安装系统级开发工具。</li></ul></li></ul><h3 id="2-Python版本管理"><a href="#2-Python版本管理" class="headerlink" title="2. Python版本管理"></a>2. <strong>Python版本管理</strong></h3><ul><li><strong>conda</strong>：可直接安装不同Python版本，无需预先存在于系统（如<code>conda create -n env python=3.6</code>）。</li><li><strong>virtualenv</strong>：依赖系统已安装的Python版本，需结合<code>pyenv</code>等工具切换Python版本。</li></ul><h3 id="3-跨平台与生态系统"><a href="#3-跨平台与生态系统" class="headerlink" title="3. 跨平台与生态系统"></a>3. <strong>跨平台与生态系统</strong></h3><ul><li><strong>conda</strong>：原生支持Windows、Linux、macOS，尤其在Windows上兼容性更佳（解决C库依赖问题）。</li><li><strong>virtualenv</strong>：跨平台支持良好，但部分库在Windows下可能存在兼容性问题（如某些C扩展包）。</li></ul><h3 id="4-环境隔离与资源占用"><a href="#4-环境隔离与资源占用" class="headerlink" title="4. 环境隔离与资源占用"></a>4. <strong>环境隔离与资源占用</strong></h3><ul><li><strong>隔离程度</strong>：两者均隔离Python解释器和包，但<code>conda</code>能处理更广泛的系统依赖。</li><li><strong>资源占用</strong>：Anaconda默认包含大量科学计算包，占用更大磁盘空间；<code>virtualenv</code>环境更轻量。</li></ul><h3 id="5-适用场景"><a href="#5-适用场景" class="headerlink" title="5. 适用场景"></a>5. <strong>适用场景</strong></h3><ul><li><strong>conda</strong>：适合数据科学、机器学习等需要复杂依赖或跨语言工具链的项目（如使用NumPy、TensorFlow）。</li><li><strong>virtualenv</strong>：适合普通Python开发（如Web开发、脚本工具），依赖简单且无需科学计算库。</li></ul><h3 id="6-配置与工具"><a href="#6-配置与工具" class="headerlink" title="6. 配置与工具"></a>6. <strong>配置与工具</strong></h3><ul><li><strong>配置文件</strong>：<ul><li><strong>conda</strong>：使用<code>environment.yml</code>，可指定通道、Python版本及非Python依赖。</li><li><strong>virtualenv</strong>：依赖<code>requirements.txt</code>，仅记录Python包及版本。</li></ul></li><li><strong>图形界面</strong>：Anaconda提供Navigator管理环境和包，<code>virtualenv</code>仅命令行操作。</li></ul><h3 id="7-性能与灵活性"><a href="#7-性能与灵活性" class="headerlink" title="7. 性能与灵活性"></a>7. <strong>性能与灵活性</strong></h3><ul><li><strong>依赖安装速度</strong>：<code>conda</code>可能因解析复杂依赖较慢，但二进制包安装更快；<code>pip</code>在简单场景下更快。</li><li><strong>混合使用</strong>：<code>conda</code>环境中可混合使用<code>conda</code>与<code>pip</code>（但有冲突风险），而<code>virtualenv</code>统一使用<code>pip</code>。</li></ul><h3 id="8-社区与支持"><a href="#8-社区与支持" class="headerlink" title="8. 社区与支持"></a>8. <strong>社区与支持</strong></h3><ul><li><strong>conda</strong>：受数据科学社区支持，与PyTorch、Jupyter等工具深度集成。</li><li><strong>virtualenv</strong>：广泛用于通用Python开发，与PyPI生态无缝衔接。</li></ul><h3 id="总结对比表"><a href="#总结对比表" class="headerlink" title="总结对比表"></a>总结对比表</h3><table><thead><tr><th><strong>对比维度</strong></th><th><strong>Anaconda (conda)</strong></th><th><strong>virtualenv</strong></th></tr></thead><tbody><tr><td><strong>依赖管理</strong></td><td>Python + 非Python依赖</td><td>仅Python包</td></tr><tr><td><strong>Python版本切换</strong></td><td>直接安装任意版本</td><td>依赖系统已安装版本</td></tr><tr><td><strong>包来源</strong></td><td>Anaconda仓库、conda-forge等</td><td>PyPI</td></tr><tr><td><strong>适用领域</strong></td><td>数据科学、机器学习</td><td>通用Python开发（如Web、脚本）</td></tr><tr><td><strong>配置文件</strong></td><td>environment.yml（含环境元数据）</td><td>requirements.txt（仅包列表）</td></tr><tr><td><strong>跨平台体验</strong></td><td>Windows支持更佳（预编译二进制）</td><td>依赖系统编译环境</td></tr><tr><td><strong>资源占用</strong></td><td>较大（默认科学包）</td><td>轻量</td></tr><tr><td><strong>隔离程度</strong></td><td>高（包括系统库）</td><td>中（仅Python层）</td></tr></tbody></table><h3 id="选择建议"><a href="#选择建议" class="headerlink" title="选择建议"></a>选择建议</h3><ul><li><strong>优先选conda</strong>：项目涉及科学计算、跨语言依赖或需隔离系统库（如CUDA版本）。</li><li><strong>优先选virtualenv</strong>：轻量级开发、依赖简单或需严格遵循PyPI生态。</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>虚拟环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署脚本</title>
    <link href="/2025/02/12/docker%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/02/12/docker%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>执行时显示解释头有问题，则是windows与linux之间的换行符问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">方法1:用vim打开执行命令：<br><span class="hljs-built_in">set</span> fileformat=unix<br>方法2:用工具dos2unix<br>dos2unix ./your_script.sh<br></code></pre></td></tr></table></figure><p>以下为安装docker的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;开始安装docker&quot;</span><br><span class="hljs-comment"># 1.安装docker依赖环境</span><br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-comment"># 2.配置国内docker-ce（社区版）的yum源（采用阿里云）</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-comment"># 3.安装docker CE</span><br>yum -y install docker-ce docker-ce-cli containerd.io<br><span class="hljs-comment"># 4.开启网络转发功能</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> -a /etc/sysctl.conf<br><span class="hljs-comment"># 执行生效</span><br>sysctl -p<br><span class="hljs-comment"># 加载驱动</span><br>modprobe ip_tables<br><span class="hljs-comment"># 查看状态</span><br><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/ip_forward<br><span class="hljs-comment"># 查看一下iptable规则，关闭防火墙后会自动插入新规则</span><br>iptables -nL <br><span class="hljs-comment"># 关闭防火墙</span><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld  <br><span class="hljs-comment"># 重启docker</span><br>systemctl restart docker<br><span class="hljs-comment"># 启动服务 并 设置开机自启</span><br>systemctl start docker &amp;&amp; systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>script</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(四)————数据卷挂载路径更改方法</title>
    <link href="/2025/01/16/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E8%B7%AF%E5%BE%84%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/"/>
    <url>/2025/01/16/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E8%B7%AF%E5%BE%84%E6%9B%B4%E6%94%B9%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>要更改宿主机上的路径，只需在命令中提供一个新的容器路径</p><p>使用前两种方法改路径前，如果容器已经在运行，需要先停止并移除它（然后需要重新创建）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop my_container<br>docker <span class="hljs-built_in">rm</span> my_container<br></code></pre></td></tr></table></figure><h3 id="四种方法-推荐使用2和3，最推荐3-："><a href="#四种方法-推荐使用2和3，最推荐3-：" class="headerlink" title="四种方法(推荐使用2和3，最推荐3)："></a>四种方法(推荐使用2和3，最推荐3)：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 使用：-v</span><br><br>docker run -d \<br>  --name 容器名 \<br>  -v 宿主机路径:新的容器内路径 \<br>  -p 8080:80 \<br>  <span class="hljs-comment"># 将宿主机的 8080 端口映射到容器的 80 端口</span><br>  my_image:tag<br>  <span class="hljs-comment"># 使用的镜像名称和标签。(标签也可不写)</span><br><br><span class="hljs-comment"># 2. 使用：--mount （更灵活，推荐）</span><br><br>docker run -d \<br>  --name my_container \<br>  --mount <span class="hljs-built_in">source</span>=宿主机路径,target=新的容器内路径,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span> \<br>  <span class="hljs-comment"># type=bind：指明绑定</span><br>  my_image:tag<br><br><span class="hljs-comment"># 3.使用Docker Compose（这个不需要移除）</span><br><span class="hljs-comment"># 如果你使用的是Docker Compose来管理你的容器，编辑docker-compose.yml文件中的</span><br><span class="hljs-comment"># volumes设置即可</span><br><br><span class="hljs-comment"># 例子：</span><br>version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  my_service:<br>    image: my_image:tag<br>    volumes:<br>   - 主机路径:新的容器内路径<br><span class="hljs-comment"># 然后运行 docker-compose up -d 来应用更改</span><br><br><span class="hljs-comment"># 4.使用符号链接（这种方法需要容器内的应用程序支持符号链接才行）</span><br><span class="hljs-comment"># 注意这一方法只适用临时方案，长期使用可能导致混乱，并且不适用于所有场景</span><br><span class="hljs-comment"># 先进入正在运行的容器</span><br><br>docker <span class="hljs-built_in">exec</span> -it &lt;container_name&gt; /bin/sh 或 /bin/bash <br><br><span class="hljs-comment"># 创建符号链接（这样，所有对 /old/container/path 的访问都会被重定向到 /new/container/path。）</span><br><br><span class="hljs-built_in">ln</span> -s /new/container/path /old/container/path<br><br><br></code></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker compose"></a>安装docker compose</h3><p>如果你没有安装，则按以下安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><br><span class="hljs-comment"># 开启可执行权限</span><br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br> <br><span class="hljs-comment"># 查看版本</span><br>docker-compose --version<br><span class="hljs-comment">#docker-compose version 1.29.2, build 5becea4c</span><br> <br><span class="hljs-comment"># 使用curl方式安装，这样卸载即可</span><br> <span class="hljs-built_in">rm</span> /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="docker-compose常用命令"><a href="#docker-compose常用命令" class="headerlink" title="docker-compose常用命令"></a>docker-compose常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version <span class="hljs-comment">#查看版本</span><br> <br>docker-compose -h    <span class="hljs-comment"># 查看帮助</span><br> <br>docker-compose up    <span class="hljs-comment"># 启动所有docker-compose服务</span><br> <br>docker-compose up -d    <span class="hljs-comment"># 启动所有docker-compose服务并后台运行</span><br> <br>docker-compose down     <span class="hljs-comment"># 停止并删除容器、网络、卷、镜像。</span><br> <br>docker-compose <span class="hljs-built_in">exec</span>  yml里面的服务<span class="hljs-built_in">id</span>   <span class="hljs-comment"># 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span><br> <br>docker-compose ps      <span class="hljs-comment"># 展示当前docker-compose编排过的运行的所有容器</span><br> <br>docker-compose top       <span class="hljs-comment"># 展示当前docker-compose编排过的容器进程</span><br> <br>docker-compose logs  yml里面的服务<span class="hljs-built_in">id</span>   <span class="hljs-comment"># 查看容器输出日志</span><br> <br>docker-compose config     <span class="hljs-comment"># 检查配置</span><br> <br>docker-compose config -q  <span class="hljs-comment"># 检查配置，有问题才有输出</span><br> <br>docker-compose restart   <span class="hljs-comment"># 重启服务</span><br> <br>docker-compose start     <span class="hljs-comment"># 启动服务</span><br> <br>docker-compose stop      <span class="hljs-comment"># 停止服务</span><br></code></pre></td></tr></table></figure><p>后续操作将开一篇单独文章</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(四)————容器数据卷</title>
    <link href="/2025/01/15/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <url>/2025/01/15/docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="1、容器数据卷介绍。"><a href="#1、容器数据卷介绍。" class="headerlink" title="1、容器数据卷介绍。"></a>1、容器数据卷介绍。</h4><p>​docker容器在产生数据的时候，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除之后，数据自然而然的也会消失。为了能保存数据，容器中引用了数据卷的概念。</p><h4 id="2、作用以及特点。"><a href="#2、作用以及特点。" class="headerlink" title="2、作用以及特点。"></a>2、作用以及特点。</h4><p>卷就是目录或者文件，存在一个或者多个容器之中，由docker挂载到容器，但是不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或者共享数据的特性。</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此docker不会再容器删除时删除其挂载的数据卷。</p><p><strong>它还存在以下几种特点：</strong></p><p>​1、数据卷可在容器之间共享或者重用数据。<br>​2、卷中的更改可以直接生效。<br>​3、数据卷中的更改不会包含在镜像的更新中。<br>​4、数据卷的生命周期一直持续到没有容器使用它为止。</p><p>​<strong>再说简单点：方便我们将数据导出来，在删除原本的容器后将其中可用的数据与新的容器对接。</strong></p><p>​<strong>比如  容器a的数据目录挂载在宿主机home下，两处数据同步，a删除后，直接将b新建容器的数据目录再挂载在宿主机home下，同步数据，便能少去数据复刻步骤</strong></p><h4 id="3、使用数据卷。"><a href="#3、使用数据卷。" class="headerlink" title="3、使用数据卷。"></a>3、使用数据卷。</h4><p>（1）：直接使用 -v 命令挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v 主机目录:容器目录 /bin/bash<br></code></pre></td></tr></table></figure><p>创建一个centos容器，并且打开其终端界面，然后将容器centos系统的&#x2F;home目录挂载到宿主机的&#x2F;home&#x2F;test01上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v /home/test01:/home centos /bin/bash<br></code></pre></td></tr></table></figure><p>另外打开一个终端查看宿主机home路径下是否出现test01目录，这个test01目录，就是我们刚启动容器centos的home目录，并且，此时这两个目录是同步的状态，我们在home目录中写入任何新的文件，都会同步到宿主机&#x2F;home&#x2F;test01下，注意是双向同步的。</p><p>（2）：测试同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在宿主机或容器的终端创建一个测试文本</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tong bu&quot;</span> &gt; home/test.txt<br><span class="hljs-comment"># 查看一下另一端的目录下是否有文本文件</span><br></code></pre></td></tr></table></figure><p>当然，我们可以使用更简单的方法查看是否挂载成功</p><p>首先记住这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect 容器ID<br><span class="hljs-comment"># 该命令会返回一个包含所选容器的所有相关数据的 JSON 对象，包括配置、网络设置、挂载点等。</span><br></code></pre></td></tr></table></figure><p>我们找到Mounts，它代表着挂载，type是类型（绑定），source是源（&#x2F;home&#x2F;test01），也就是把什么挂载到哪里。destination（home）就是挂载的目标路径了。</p><p><img src="/img/docker_4_%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD.png"></p><p>这里bote只演示修改容器内文件同步到宿主机挂载文件。反过来也是一样的，这里就不再赘述了。之后如果要修改容器内挂载文件，只需在我们本地挂载点修改就好了，它会自动同步到docker。</p><h5 id="更改方法将在下一篇文章补充给大家。"><a href="#更改方法将在下一篇文章补充给大家。" class="headerlink" title="#####  更改方法将在下一篇文章补充给大家。"></a>#####  更改方法将在下一篇文章补充给大家。</h5><h4 id="4、具名挂载与匿名挂载。"><a href="#4、具名挂载与匿名挂载。" class="headerlink" title="4、具名挂载与匿名挂载。"></a>4、具名挂载与匿名挂载。</h4><p>首先记住这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume <span class="hljs-built_in">ls</span> <span class="hljs-comment">#查看所有卷的情况。</span><br></code></pre></td></tr></table></figure><h5 id="（1）匿名挂载"><a href="#（1）匿名挂载" class="headerlink" title="（1）匿名挂载"></a>（1）匿名挂载</h5><p>我们首先使用匿名挂载的命令启动一个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -P --name=nginx02 -v /etc/nginx nginx<br></code></pre></td></tr></table></figure><p>然后使用docker volume ls 查看，那一长串就是挂载到宿主机的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># less 在信息输出过多的时候使用</span><br>docker inspect （容器ID） | less<br></code></pre></td></tr></table></figure><p>然后输入&#x2F;Mounts, “ &#x2F; ”后是你想查到的内容<br>大家仔细看一下，是不是&#x2F;etc&#x2F;nginx就是那一长串，挂载到了我&#x2F;var&#x2F;lib…路径下，复制一下路径去看一下即可。</p><p><img src="/img/docker_4_%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD.png"></p><h5 id="（2）具名挂载"><a href="#（2）具名挂载" class="headerlink" title="（2）具名挂载"></a>（2）具名挂载</h5><p>具名挂载就很简单了，与匿名挂载类似</p><p>同样，我们使用具名挂载的方式启动一个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -P --name=nginxt04 -v jumingguazai:/etc/nginx nginx<br>docker volume <span class="hljs-built_in">ls</span> 查看卷<br>docker inspect ID | less 找到挂载点。<br></code></pre></td></tr></table></figure><p><img src="/img/docker_4_%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD.png"></p><p>这时我们发现它的Name：jumingguazai，这个也就是我们设置的挂载名</p><p>这就是具名挂载。</p><h5 id="（3）如何确定是具名挂载还是匿名挂载"><a href="#（3）如何确定是具名挂载还是匿名挂载" class="headerlink" title="（3）如何确定是具名挂载还是匿名挂载"></a>（3）如何确定是具名挂载还是匿名挂载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-v  容器内路径               <span class="hljs-comment"># 匿名挂在</span><br>-v  卷名：容器内路径          <span class="hljs-comment"># 具名挂在</span><br>-v  /宿主机路径：容器内路径    <span class="hljs-comment"># 指定路径挂载</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过 -v 容器内路径  :ro   rw   可以改变读写权限</span><br><span class="hljs-comment"># 注意修改需要移除 docker rm 容器名</span><br>ro  <span class="hljs-built_in">readonly</span>   <span class="hljs-comment">#只读</span><br>rw  readwrite  <span class="hljs-comment">#可写可读</span><br>例： docker run -d --name=nginx01 -v test01:/etc/nginx:ro nginx<br>   docker run -d --name=nginx01 -v test01:/etc/nginx:rw nginx<br></code></pre></td></tr></table></figure><h3 id="面试小点"><a href="#面试小点" class="headerlink" title="面试小点"></a>面试小点</h3><table><thead><tr><th align="left">挂载类型</th><th align="left">删除容器后数据是否保留</th><th align="left">原因</th></tr></thead><tbody><tr><td align="left">绑定挂载</td><td align="left">✅ 保留</td><td align="left">数据直接存储在宿主机指定路径中，与容器生命周期无关</td></tr><tr><td align="left">命名卷</td><td align="left">✅ 保留</td><td align="left">命名卷独立于容器，需手动 <code>docker volume rm</code> 删除卷</td></tr><tr><td align="left">匿名卷</td><td align="left">✅ 保留（默认）</td><td align="left">删除容器后，匿名卷默认<strong>不会自动删除</strong>（但会成为孤立卷）</td></tr></tbody></table><p>所以数据实际是存储在本地目录中的，删除容器，数据仍然存在；删除本地目录，容器中的数据也会消失。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好的，大家下期 Dockerfile 再见。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(三)————练手：部署nginx</title>
    <link href="/2025/01/14/docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%BB%83%E6%89%8B%EF%BC%9A%E9%83%A8%E7%BD%B2nginx/"/>
    <url>/2025/01/14/docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%BB%83%E6%89%8B%EF%BC%9A%E9%83%A8%E7%BD%B2nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="首先正常流程是："><a href="#首先正常流程是：" class="headerlink" title="首先正常流程是："></a>首先正常流程是：</h2><p>先搜索镜像再下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search 镜像名<br>docker pull 镜像名<br></code></pre></td></tr></table></figure><h4 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h4><p>但是我们有自己的镜像仓库，所以我们拉取自己的即可<br>镜像仓库 &#x3D;&#x3D;》nginx &#x3D;&#x3D;》操作指南<br>按照指南里面的步骤操作中的前两步将镜像拉去下来<br>（注意，需要什么镜像先使用github的actions（第一期的方法）添加到自己的仓库里）</p><p>命令是一样的，只不过我们需要先登录阿里云Docker Registry，然后docker pull +自己的镜像名即可</p><h4 id="2-查看镜像"><a href="#2-查看镜像" class="headerlink" title="2.查看镜像"></a>2.查看镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h4 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3.启动容器"></a>3.启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name 容器名 -p 80:80 镜像名<br></code></pre></td></tr></table></figure><h4 id="4-查看容器"><a href="#4-查看容器" class="headerlink" title="4.查看容器"></a>4.查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p><img src="/img/docker_3.png"></p><h4 id="5-测试访问"><a href="#5-测试访问" class="headerlink" title="5.测试访问"></a>5.测试访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl 127.0.0.1:80<br>然后就会出现一幅网页代码:<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>html &#123; color-scheme: light dark; &#125;<br>body &#123; width: 35em; margin: 0 auto;<br>font-family: Tahoma, Verdana, Arial, sans-serif; &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h4 id="6-进入容器修改界面"><a href="#6-进入容器修改界面" class="headerlink" title="6.进入容器修改界面"></a>6.进入容器修改界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器ID /bin/bash<br><br>whereis nginx 查找文件位置<br>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx<br><br>这些为其文件，配置与物理机上的大差不差<br></code></pre></td></tr></table></figure><h4 id="7-外网访问"><a href="#7-外网访问" class="headerlink" title="7.外网访问"></a>7.外网访问</h4><p>如果你用的是虚拟机，直接浏览器中：虚拟机的ip:80即可</p><p>我偷懒直接用80映射了，实际工作中80端口要禁止，其他nginx配置看后续其他文章即可</p><h4 id="8-注意事项与参数介绍"><a href="#8-注意事项与参数介绍" class="headerlink" title="8.注意事项与参数介绍"></a>8.注意事项与参数介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [可选参数] image 命令 <span class="hljs-comment">#启动容器（无镜像会先下载镜像）</span><br><span class="hljs-comment">#参数说明</span><br>--name = <span class="hljs-string">&quot;Name&quot;</span>   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷<br></code></pre></td></tr></table></figure><p>大家注意-i 、 -t 、 -d这几个参数。</p><p>it：给我一个可以操作的前台终端。</p><p>id：以后台守护进程的方式运行容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">1：交互方式创建容器，退出后容器关闭。<br>docker run -it 镜像名称:标签 /bin/bash<br><br>2：守护进程方式创建容器。<br>docker run -<span class="hljs-built_in">id</span> 镜像名称:标签<br>通过这种方式创建的容器，我们不会直接进入到容器界面，而是在后台运行了容器，<br>如果我们需要进去，则还需要一个命令。<br>docker <span class="hljs-built_in">exec</span> -it  镜像名称:标签  /bin/bash<br>通过这种方式运行的容器，就不会自动退出了。<br></code></pre></td></tr></table></figure><h4 id="9-最后"><a href="#9-最后" class="headerlink" title="9.最后"></a>9.最后</h4><p>我的文章主要是实际操作，理论极少，因为我希望大家先会操作，只要会操作，会配置，能工作就可以，理论方面会在做的多了以后很快就懂了，而且更加融会贯通。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(二)————安装docker与基础命令</title>
    <link href="/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%BA%8C-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85docker%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%BA%8C-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85docker%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h2><p>​我这里使用的是基于centos的国产某系统，从事过的同行应该知道是什么，它的大部分与centos相同，我测试过，所以如果你是新手，放心使用。</p><p><strong>首先我知道你想安装，但是先别安装</strong></p><p>​在CentOS 8.2版本开始，出于架构更安全以及其与Kubernetes 原生的等原因，CentOS默认安装podman，这是一款与docker类似的容器引擎。</p><p>所以如果你是8.2及以后的版本安装docker后启动任务会出现：</p><p>“Failed to start docker.service: Unit docker.service not found。”</p><p>原因是CentOS默认使用podman代替docker，所以我们需要卸载它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###########卸载podman#############</span><br>yum erase -y podman buildah<br><span class="hljs-comment">#################################</span><br></code></pre></td></tr></table></figure><p>接下来让我们继续：</p><h3 id="1-安装docker依赖环境"><a href="#1-安装docker依赖环境" class="headerlink" title="1.安装docker依赖环境"></a>1.安装docker依赖环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h3 id="2-配置国内docker-ce（社区版）的yum源（采用阿里云）"><a href="#2-配置国内docker-ce（社区版）的yum源（采用阿里云）" class="headerlink" title="2.配置国内docker-ce（社区版）的yum源（采用阿里云）"></a>2.配置国内docker-ce（社区版）的yum源（采用阿里云）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>查看该目录下是否存在docker-ce.repo这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/yum.repos.d<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="3-安装docker-CE"><a href="#3-安装docker-CE" class="headerlink" title="3.安装docker CE"></a>3.安装docker CE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>如果显示哪个包no match</p><p>先查看一下可安装的包版本（如果显示有，那可能是拼写错误）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list 包名 --showduplicates | <span class="hljs-built_in">sort</span> -r<br></code></pre></td></tr></table></figure><p>如果有就单独运行一次 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install 包名<br></code></pre></td></tr></table></figure><p>想知道包名的作用，就使用 yum info 程序名</p><p>使用systemctl 这个命令启动查看一下docker能否正常运行，状态为active</p><h3 id="4-开启网络转发功能"><a href="#4-开启网络转发功能" class="headerlink" title="4.开启网络转发功能"></a>4.开启网络转发功能</h3><p>默认自动开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">路径： /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>手动开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf   <br></code></pre></td></tr></table></figure><p>插入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.ipv4.ip_forward =1<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p   <span class="hljs-comment">#生效</span><br></code></pre></td></tr></table></figure><p>此处如果报错sysctl: cannot stat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ipv4_forward: No such file or directory</p><p>执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">modprobe ip_tables <span class="hljs-comment"># 加载一下驱动</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/ip_forward  <span class="hljs-comment">#查看结果，为1开启成功。</span><br></code></pre></td></tr></table></figure><h3 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5.关闭防火墙"></a>5.关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL <span class="hljs-comment">#查看一下iptable规则，关闭防火墙后会自动插入新规则</span><br><br>systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld  <span class="hljs-comment">#关闭防火墙</span><br><br>systemctl restart docker <br></code></pre></td></tr></table></figure><p>关闭防火墙要把docker重启一下，不然docker的ip包转发功能无法使用。即便防火墙关闭了，docker依旧会调用内核模块netfilter增加规则，所以会新增iptables规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL <span class="hljs-comment">#再查看一下iptable规则，会发现多出很多规则</span><br></code></pre></td></tr></table></figure><h3 id="6-启动服务-并-设置开机自启"><a href="#6-启动服务-并-设置开机自启" class="headerlink" title="6.启动服务 并 设置开机自启"></a>6.启动服务 并 设置开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker &amp;&amp; systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>启动完成后再查看一下网络参数，这个是ip转发会改成1，默认0</p><h3 id="7-基础命令"><a href="#7-基础命令" class="headerlink" title="7.基础命令"></a>7.基础命令</h3><p>哎！这个时候我们就需要搜索和拉取镜像了，我们第一期创建的自己的docker库就有用场了,但是我们下一期说，bote现在要睡了，嘿嘿。</p><p>（1）帮助命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version     <span class="hljs-comment">#显示docker详细信息</span><br>docker info       <span class="hljs-comment">#显示docker的系统信息，包括镜像和容器的数量</span><br>docker --<span class="hljs-built_in">help</span>     <span class="hljs-comment">#docker帮助命令手册</span><br></code></pre></td></tr></table></figure><p>（2）镜像命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images  <span class="hljs-comment">#查看所有本地主机的镜像</span><br>docker search 镜像名           <span class="hljs-comment">#搜索镜像</span><br>docker pull 镜像名 [标签]      <span class="hljs-comment">#下载镜像（如果不写tag，默认是latest）</span><br>docker rmi 镜像名 [标签]       <span class="hljs-comment">#删除镜像    docker rmi -f $(docker images -aq)  删除全部镜像</span><br>docker tag  镜像名:版本   新镜像名:版本    <span class="hljs-comment">#复制镜像并且修改名称</span><br>docker commit  -a <span class="hljs-string">&quot;xxx&quot;</span>  -c <span class="hljs-string">&quot;xxx&quot;</span> 镜像ID 名字：版本   <span class="hljs-comment">#提交镜像 </span><br>-a :提交的镜像作者；<br>-c :使用Dockerfile指令来创建镜像；<br>-m :提交时的说明文字；<br><br>docker load -i    /xxx/xxx.tar         <span class="hljs-comment">#导入镜像</span><br>docker save -o   /xxx/xxx.tar          <span class="hljs-comment">#保存一个镜像为一个tar包</span><br></code></pre></td></tr></table></figure><p>（3）容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [可选参数] image 命令 <span class="hljs-comment">#启动容器（无镜像会先下载镜像）</span><br><span class="hljs-comment">#参数说明</span><br>--name = <span class="hljs-string">&quot;Name&quot;</span>   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷<br><br>docker build  <span class="hljs-comment">#创建镜像        -f：指定dockerfile文件路径   -t：镜像名字以及标签</span><br>docker logs 容器实例的ID          <span class="hljs-comment">#查看容器日志</span><br>docker rename 旧名字  新名字      <span class="hljs-comment"># 给容器重新命名</span><br>docker top    容器实例的ID                  <span class="hljs-comment">#查看容器内进程</span><br>docker ps -a                    <span class="hljs-comment">#列出所有容器（不加-a就是在运行的）</span><br>docker <span class="hljs-built_in">rm</span>      容器实例的ID                 <span class="hljs-comment">#删除容器（正在运行容器不能删除，除非加-f选项）</span><br>docker <span class="hljs-built_in">kill</span>  容器实例的ID        <span class="hljs-comment">#杀掉容器</span><br>docker <span class="hljs-built_in">history</span>   容器实例的ID    <span class="hljs-comment">#查看docker镜像的变更历史</span><br>docker start 容器实例的ID        <span class="hljs-comment">#启动容器</span><br>docker restart 容器实例的ID       <span class="hljs-comment">#重启容器</span><br>docker stop 容器实例的ID         <span class="hljs-comment">#停止正在运行的容器</span><br>docker attach /docker <span class="hljs-built_in">exec</span>  容器实例的ID   <span class="hljs-comment">#同为进入容器命令，不同的是attach连接终止会让容器退出后台运行，而exec不会。并且，docker attach是进入正在执行的终端，不会启动新的进程，而docker exec则会开启一个新的终端，可以在里面操作。</span><br>docker image inspect  容器名称：容器标签       <span class="hljs-comment">#查看容器内源数据</span><br>docker <span class="hljs-built_in">cp</span>  容器<span class="hljs-built_in">id</span>：容器内路径   目的主机路径           <span class="hljs-comment">#从容器内拷贝文件到主机（常用）或者从主机拷贝到容器（一般用挂载）</span><br><span class="hljs-built_in">exit</span>                           <span class="hljs-comment">#直接退出容器 </span><br>crlt + P + Q                   <span class="hljs-comment">#退出容器但是不终止运行</span><br></code></pre></td></tr></table></figure><h3 id="8-最后"><a href="#8-最后" class="headerlink" title="8.最后"></a>8.最后</h3><p>如果有朋友发现有字误或其他错误，欢迎评论指出</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker系列(一)————搭建自己的docker镜像仓库</title>
    <link href="/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <url>/2025/01/10/docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、为什么不学命令，先学搭建自己的docker仓库？"><a href="#一、为什么不学命令，先学搭建自己的docker仓库？" class="headerlink" title="一、为什么不学命令，先学搭建自己的docker仓库？"></a>一、为什么不学命令，先学搭建自己的docker仓库？</h2><p>​因为Dockerhub宣布不再对中国开源，而国内的多数镜像仓库都停运了，多数大学的都改为仅校内学生申请使用，剩下的一些仓库内的镜像版本都比较老旧，所以我们将基于阿里云提供的<strong>容器镜像服务</strong>和Github的<strong>action</strong>功能搭建自己的docker仓库。</p><h4 id="1-注册两个账号（阿里云与github）"><a href="#1-注册两个账号（阿里云与github）" class="headerlink" title="1.注册两个账号（阿里云与github）"></a>1.注册两个账号（阿里云与github）</h4><p>阿里云：<a href="https://www.aliyun.com/">阿里云-计算，为了无法计算的价值</a></p><p>GitHub：<a href="https://github.com/">https://github.com</a></p><h4 id="2-在阿里云中搜索容器镜像服务"><a href="#2-在阿里云中搜索容器镜像服务" class="headerlink" title="2.在阿里云中搜索容器镜像服务"></a>2.在阿里云中搜索容器镜像服务</h4><p>点击开通</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%911.png"></p><p>选择个人版</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%912.png"></p><p>创建个人版</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%913.png"></p><p>创建命名空间</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%914.png"></p><p>设置固定密码</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%915.png"></p><h4 id="3-在Github中fork一个博主的仓库"><a href="#3-在Github中fork一个博主的仓库" class="headerlink" title="3.在Github中fork一个博主的仓库"></a>3.在Github中fork一个博主的仓库</h4><h6 id="为什么要fork他的仓库？"><a href="#为什么要fork他的仓库？" class="headerlink" title="为什么要fork他的仓库？"></a>为什么要fork他的仓库？</h6><p>因为他已经写好了docker.yaml这个actions工作流文件，此工作流常详细地处理了从镜像拉取、重命名、推送到清理的过程，特别适合于需要频繁更新或同步多个 Docker 镜像到私有仓库的场景。此外，还包含了对磁盘空间管理的考量，确保有足够的空间来进行镜像操作。</p><h6 id="所以你现在有四个数据"><a href="#所以你现在有四个数据" class="headerlink" title="所以你现在有四个数据"></a>所以你现在有四个数据</h6><p>命名空间（<strong>ALIYUN_NAME_SPACE</strong>）：你刚命名的<br>用户名（<strong>ALIYUN_REGISTRY_USER</strong>)：你阿里云的用户名<br>密码（<strong>ALIYUN_REGISTRY_PASSWORD</strong>)：上面让你设置的固定密码<br>仓库地址（<strong>ALIYUN_REGISTRY</strong>）：我涂黑的部分</p><p><img src="/img/docker(1)%E9%98%BF%E9%87%8C%E4%BA%916.png"></p><p>后续按照这位博主的操作完成即可，因为如果用图片去标识的话会很繁琐，而且也不是一目了然，绝不是bote想偷懒，嘿嘿。</p><p> <a href="https://www.bilibili.com/video/BV1Zn4y19743/?share_source=copy_web&vd_source=364c8c17da845006eeb12c4d584799e3">https://www.bilibili.com/video/BV1Zn4y19743/?share_source=copy_web&amp;vd_source=364c8c17da845006eeb12c4d584799e3</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为交换机配置802.1X认证</title>
    <link href="/2025/01/09/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE802-1X%E8%AE%A4%E8%AF%81/"/>
    <url>/2025/01/09/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE802-1X%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-802-1X是做什么的？"><a href="#1-802-1X是做什么的？" class="headerlink" title="1.802.1X是做什么的？"></a>1.802.1X是做什么的？</h2><p>在中型及以上的项目实施中，802.1X是必备的一项配置，简单来说就是检测网络用户的身份，以保证敏感信息的安全性。</p><p>​在这一验证过程中有以下三种角色：</p><ul><li><strong>Supplicant（请求者）</strong>：这是尝试访问受保护网络资源的客户端设备。</li><li><strong>Authenticator（认证器）</strong>：通常是交换机或无线接入点（AP），它充当守门员的角色，只允许经过身份验证的设备访问网络。</li><li><strong>Authentication Server（认证服务器）</strong>：通常是一个RADIUS（Remote Authentication Dial-In User Service）服务器，负责处理来自认证器的身份验证请求，并决定是否授予访问权限。</li></ul><h2 id="2-如何配置802-1X？"><a href="#2-如何配置802-1X？" class="headerlink" title="2.如何配置802.1X？"></a>2.如何配置802.1X？</h2><p>​一般我们将802.1X配置在<strong>接入层</strong>或者<strong>汇聚层</strong>，以下就是配置命令，另外告诉大家一件事，其实在很多项目中使用这一默认配置就可以了，最多根据要求做一点更改，例如最大在线人数等等。</p><h3 id="1-第一种————在接入层配置"><a href="#1-第一种————在接入层配置" class="headerlink" title="(1)第一种————在接入层配置"></a>(1)第一种————在接入层配置</h3><p><img src="/img/802.1X%E6%8E%A5%E5%85%A5%E5%B1%82.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs CLI">1.配置AAA。<br># 创建并配置RADIUS服务器模板“rd1”。<br>[Switch] radius-server template rd1<br>[Switch-radius-rd1] radius-server authentication 192.168.1.30 1812<br>[Switch-radius-rd1] radius-server shared-key cipher YsHsjx_202206<br>[Switch-radius-rd1] quit<br><br># 创建AAA认证方案“abc”并配置认证方式为RADIUS。<br>[Switch] aaa<br>[Switch-aaa] authentication-scheme abc<br>[Switch-aaa-authen-abc] authentication-mode radius<br>[Switch-aaa-authen-abc] quit<br><br># 创建认证域“example.com”，并在其上绑定AAA认证方案“abc”与RADIUS服务器模板“rd1”。<br>[Switch-aaa] domain example.com<br>[Switch-aaa-domain-example.com] authentication-scheme abc<br>[Switch-aaa-domain-example.com] radius-server rd1<br>[Switch-aaa-domain-example.com] quit<br>[Switch-aaa] quit<br><br># 测试用户是否能够通过RADIUS模板的认证。（已在RADIUS服务器上配置了测试用户test，用户密码YsHsjx_2022061）<br>[Switch] test-aaa test YsHsjx_2022061 radius-template rd1<br>Info: Account test succeeded.<br><br>2.配置802.1X认证。<br># 将NAC配置模式切换成统一模式。<br># 注意：设备默认为统一模式。传统模式与统一模式相互切换后，设备会自动重启。<br>[Switch] authentication unified-mode<br><br># 配置802.1X接入模板“d1”。<br>[Switch] dot1x-access-profile name d1<br>[Switch-dot1x-access-profile-d1] dot1x authentication-method eap<br>[Switch-dot1x-access-profile-d1] dot1x timer client-timeout 30<br>[Switch-dot1x-access-profile-d1] quit<br><br># 注意：802.1X接入模板默认采用EAP中继认证方式。请确保RADIUS服务器支持EAP协议，否则无法处理802.1X认证请求。<br><br># 配置认证模板“p1”，并在其上绑定802.1X接入模板“d1”、指定认证模板下用户的强制认证域为“example.com”。<br>[Switch] authentication-profile name p1<br>[Switch-authen-profile-p1] dot1x-access-profile d1<br>[Switch-authen-profile-p1] access-domain example.com force<br>[Switch-authen-profile-p1] quit<br><br># 在接口GE1/0/2-GE1/0/n上绑定认证模板“p1”，使能802.1X认证。以接口GE1/0/2为例，其他接口配置与其类似。<br>[Switch] interface gigabitethernet 1/0/2<br>[Switch-GigabitEthernet1/0/2] authentication-profile p1<br>[Switch-GigabitEthernet1/0/2] quit<br><br>3.验证配置结果。<br>用户在终端上启动802.1X客户端，输入用户名和密码，开始认证。<br>如果用户输入的用户名和密码验证正确，客户端页面会显示认证成功信息。用户即可访问网络。<br>用户上线后，管理员可在设备上执行命令display access-user access-type dot1x查看在线802.1X用户信息。<br></code></pre></td></tr></table></figure><h3 id="2-第二种————在汇聚层配置"><a href="#2-第二种————在汇聚层配置" class="headerlink" title="(2)第二种————在汇聚层配置"></a>(2)第二种————在汇聚层配置</h3><p><img src="/img/802.1X%E6%B1%87%E8%81%9A%E5%B1%82.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs CLI">1.配置SwitchB。<br># 配置802.1X报文透传功能。<br># 下行接口（与用户连接的口GE0/0/2-GE0/0/n）以接口GE0/0/2为例，其他下行接口配置与其类似。（这些连接口下的用户都会触发认证）<br><br>由于认证交换机SwitchA与用户之间存在二层交换机SwitchB，为保证用户能够通过802.1X认证，则务必在SwitchB上配置802.1X报文透传功能。<br><br>[SwitchB] l2protocol-tunnel user-defined-protocol 802.1X protocol-mac 0180-c200-0003 group-mac 0100-0000-0002<br>[SwitchB] interface gigabitethernet 0/0/2<br>[SwitchB-GigabitEthernet0/0/2] l2protocol-tunnel user-defined-protocol 802.1X enable<br>[SwitchB-GigabitEthernet0/0/2] quit<br>[SwitchB] interface gigabitethernet 0/0/1<br>[SwitchB-GigabitEthernet0/0/1] l2protocol-tunnel user-defined-protocol 802.1X enable<br>[SwitchB-GigabitEthernet0/0/1] quit<br><br>2.配置SwitchA。<br># 配置AAA。<br>#（1）创建并配置RADIUS服务器模板“rd1”。<br>[SwitchA] radius-server template rd1<br>[SwitchA-radius-rd1] radius-server authentication 192.168.1.30 1812<br>[SwitchA-radius-rd1] radius-server shared-key cipher YsHsjx_202206<br>[SwitchA-radius-rd1] quit<br><br>#（2）创建AAA认证方案“abc”并配置认证方式为RADIUS。<br>[SwitchA] aaa<br>[SwitchA-aaa] authentication-scheme abc<br>[SwitchA-aaa-authen-abc] authentication-mode radius<br>[SwitchA-aaa-authen-abc] quit<br><br>#（3）创建认证域“example.com”，并在其上绑定AAA认证方案“abc”与RADIUS服务器模板“rd1”。<br>[SwitchA-aaa] domain example.com<br>[SwitchA-aaa-domain-example.com] authentication-scheme abc<br>[SwitchA-aaa-domain-example.com] radius-server rd1<br>[SwitchA-aaa-domain-example.com] quit<br>[SwitchA-aaa] quit<br><br>#（4）测试用户是否能够通过RADIUS模板的认证。（已在RADIUS服务器上配置了测试用户test，用户密码YsHsjx_2022061）<br>[SwitchA] test-aaa test YsHsjx_2022061 radius-template rd1<br>Info: Account test succeeded.<br><br># 配置802.1X认证。<br><br>#(1) 将NAC配置模式切换成统一模式。<br>#注意：设备默认为统一模式。传统模式与统一模式相互切换后，设备会自动重启。<br>[SwitchA] authentication unified-mode<br><br>#(2) 配置802.1X接入模板“d1”。<br>#注意：802.1X接入模板默认采用EAP认证方式。请确保RADIUS服务器支持EAP协议，否则无法处理802.1X认证请求。<br>[SwitchA] dot1x-access-profile name d1<br>[SwitchA-dot1x-access-profile-d1] dot1x authentication-method eap<br>[SwitchA-dot1x-access-profile-d1] dot1x timer client-timeout 30<br>[SwitchA-dot1x-access-profile-d1] quit<br><br>#(3) 配置认证模板“p1”，并在其上绑定802.1X接入模板“d1”、指定认证模板下用户的强制认证域为“example.com”、指定用户接入模式为多用户单独认证接入模式、最大接入用户数为100。<br>[SwitchA] authentication-profile name p1<br>[SwitchA-authen-profile-p1] dot1x-access-profile d1<br>[SwitchA-authen-profile-p1] access-domain example.com force<br>[SwitchA-authen-profile-p1] authentication mode multi-authen max-user 100<br>[SwitchA-authen-profile-p1] quit<br><br># (4) 在接口GE1/0/2上绑定认证模板“p1”，使能802.1X认证。<br>[SwitchA] interface gigabitethernet 1/0/2<br>[SwitchA-GigabitEthernet1/0/2] authentication-profile p1<br>[SwitchA-GigabitEthernet1/0/2] quit<br><br>验证配置结果。<br>用户在终端上启动802.1X客户端，输入用户名和密码，开始认证。<br>如果用户输入的用户名和密码验证正确，客户端页面会显示认证成功信息。用户即可访问网络。<br>用户上线后，管理员可在设备上执行命令display access-user 查看用户在线情况<br></code></pre></td></tr></table></figure><h2 id="3-其他查看用户在线情况命令："><a href="#3-其他查看用户在线情况命令：" class="headerlink" title="3.其他查看用户在线情况命令："></a>3.其他查看用户在线情况命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CLI"># 查看指定接口上的802.1X统计信息<br>display dot1x statistics interface interface-type interface-number<br># 查看某接口的在线用户情况<br>display access-user [interface interface-type interface-number]<br></code></pre></td></tr></table></figure><h2 id="4-最后"><a href="#4-最后" class="headerlink" title="4.最后"></a>4.最后</h2><p>​注意配置的交换机型号与类型，如果是CE交换机，配置命令会有不同，请转至</p><p>华为官网文档：<a href="https://support.huawei.com/enterprise/zh/doc/index.html">https://support.huawei.com/enterprise/zh/doc/index.html</a></p><p>查看参考。</p>]]></content>
    
    
    <categories>
      
      <category>网络工程师</category>
      
      <category>交换机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snmp_服务端配置</title>
    <link href="/2025/01/06/snmp-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/06/snmp-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-snmp是什么？"><a href="#1-snmp是什么？" class="headerlink" title="1.snmp是什么？"></a>1.snmp是什么？</h2><p>​<strong>SNMP</strong>（Simple Network Management Protocol，简单网络管理协议）是一种广泛使用的网络管理协议，用于监控和管理网络设备，如服务器、路由器、交换机、打印机等。它允许网络管理员从中央位置监控网络性能，发现和解决网络问题。</p><h3 id="2-配置snmp服务端"><a href="#2-配置snmp服务端" class="headerlink" title="2.配置snmp服务端"></a>2.配置snmp服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#  以下操作仅为示例操作，详细操作请按实际情况而定</span><br><br><span class="hljs-comment"># 1.编辑snmp配置文件</span><br>vim /etc/snmpd.conf<br><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># community 中是对应 sec.name 的连接密码</span><br><span class="hljs-comment"># SNMP 中 连接密码被称为 community sec.name 类似于用户名</span><br>将 <br>   com2sec notConfigUser default public <br>修改为<br>   com2sec notConfigUser default monitor<br><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># groupName &lt;---&gt; securityName</span><br><span class="hljs-comment"># 组名      &lt;---&gt; 上面设置的用户名</span><br><span class="hljs-comment"># 可指定每个group 使用SNMP协议版本</span><br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># group  &lt;---&gt; read write notif</span><br><span class="hljs-comment"># 上面的group &lt;--&gt; 读/写/通知(SNMP trap)使用的上面的view设置</span><br>将第62行的<br>   access  notConfigGroup <span class="hljs-string">&quot;&quot;</span> any noauth exact systemview none none<br>修改为<br>   access  notConfigGroup <span class="hljs-string">&quot;&quot;</span> any noauth exact all none none<br><span class="hljs-comment">##############################</span><br><span class="hljs-comment"># view SNMP 中OID设定</span><br><span class="hljs-comment"># name = 此视图名</span><br><span class="hljs-comment"># include/exclude 包括/排除之后的OID地址</span><br><span class="hljs-comment"># subtree=OID地址(.0 表示所有的OID)</span><br>将第85行的<br><span class="hljs-comment">#view all    included  .1       80</span><br>去掉注释 <br><br>2.重启SNMP服务<br>systemctl restart snmppd.service<br><br>3.添加为开机自启<br>systemctl <span class="hljs-built_in">enable</span> snmpd.service<br><br>4.验证snmp是否可以获取到值<br>snmpwalk -v 2c -c monitor [设备IP]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防火墙端口管理</title>
    <link href="/2025/01/06/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <url>/2025/01/06/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>​防火墙端口管理在操作中经常会用到，但是在实际布置生产环境或者一些带单向网闸一系列设备时，我们需要关闭的端口就会很多，这时再去一个个关闭，很显然就非常麻烦了，所以运维经常使用自动化脚本去进行管理。</p><p>以下脚本可直接使用（不能运行时，请修改对应的系统指令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><br><span class="hljs-comment"># 获取用户输入的要关闭的端口列表</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;指定区间格式为： 1000:2000 ===&gt; 将丢弃1000到2000所有端口的tcp数据包&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入要关闭的端口列表，用空格分隔：&quot;</span><br><span class="hljs-built_in">read</span> -a ports_to_close<br><br><span class="hljs-comment"># 获取用户输入的要允许的端口列表</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;指定区间格式为： 1000:2000 ===&gt; 将允许1000到2000所有端口的tcp数据包&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入要允许的端口列表，用空格分隔：&quot;</span><br><span class="hljs-built_in">read</span> -a ports_to_allow<br><br><span class="hljs-comment"># 备份iptables配置</span><br>iptables-save &gt; /path/to/iptables_backup.txt<br><br><span class="hljs-comment"># 加载iptables规则</span><br>iptables -F<br>iptables -X<br>iptables -Z<br><br><span class="hljs-comment"># 允许流量通过的端口</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ports_to_allow[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    iptables -A INPUT -p tcp --dport <span class="hljs-variable">$port</span> -j ACCEPT<br>    iptables -A OUTPUT -p tcp --sport <span class="hljs-variable">$port</span> -j ACCEPT<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 关闭的端口</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ports_to_close[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    iptables -A INPUT -p tcp --dport <span class="hljs-variable">$port</span> -j DROP<br>    iptables -A OUTPUT -p tcp --sport <span class="hljs-variable">$port</span> -j DROP<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 保存iptables规则（redhat系统）</span><br>service iptables save<br><span class="hljs-comment"># 或 iptables-save &gt; /etc/sysconfig/iptables</span><br><br><span class="hljs-comment"># （debian系统）</span><br><span class="hljs-comment"># sudo sh -c &quot;iptables-save &gt; /etc/iptables/rules.v4&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;防火墙端口已更新。&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禁止root账户远程连接</title>
    <link href="/2025/01/06/%E7%A6%81%E6%AD%A2root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <url>/2025/01/06/%E7%A6%81%E6%AD%A2root%E8%B4%A6%E6%88%B7%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p> 在我们实际运维中，经常出于安全考虑禁止root账户远程连接，以下bash脚本可直接使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 备份文件</span><br><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak<br><br><span class="hljs-comment"># 修改SSH配置文件</span><br>sed -i <span class="hljs-string">&#x27;s/PermitRootLogin yes/</span><br><span class="hljs-string">PermitRootLogin no/g&#x27;</span> /etc/ssh/sshd_config<br><br><span class="hljs-comment"># 重启SSH服务</span><br>systemctl restart sshd<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Root 账户远程连接已禁止&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置NFS(服务端与客户端)</title>
    <link href="/2025/01/06/%E9%85%8D%E7%BD%AENFS-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <url>/2025/01/06/%E9%85%8D%E7%BD%AENFS-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><p>安装nfs包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install nfs-utils -y<br></code></pre></td></tr></table></figure><p>启动nfs服务，并设置为开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nfs-server.service<br>systemctl <span class="hljs-built_in">enable</span> nfs-server.service<br></code></pre></td></tr></table></figure><p>选择磁盘作为nfs共享分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk 查看硬盘名<br>fdisk /硬盘名<br><br>第一个为 n<br><br>第二个为 p，然后全部默认后<br><br>第三个为w<br><br>退出<br></code></pre></td></tr></table></figure><p>对硬盘分区格式化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/分区名<br></code></pre></td></tr></table></figure><p>创建一个挂载nfs目录并挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /nfs<br>mount /dev/分区名<br></code></pre></td></tr></table></figure><p>查看是否挂载成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p>配置共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/exports<br></code></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/nfs 客户端ip/24(掩码号)(rw,no_root_squash)(有很多参数，可以百度看看)<br></code></pre></td></tr></table></figure><p>重启nfs服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart nfs-server.service<br></code></pre></td></tr></table></figure><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><p><strong>此脚本可直接复制执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 设置nfs服务并设置为开机自启动</span><br>systemctl start nfs-server.service<br>systemctl <span class="hljs-built_in">enable</span> nfs.server.service<br><br><span class="hljs-comment"># 创建一个挂载目录</span><br><span class="hljs-built_in">mkdir</span> /nfs01<br>mount -t nfs 服务端ip:/nfs /nfs01<br><span class="hljs-comment"># 查看是否挂载完成</span><br>ds -Th<br><span class="hljs-comment"># 如果不通则关闭防火墙</span><br>systemctl stop firewalld<br>firewall-cmd --state<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multipaths配置多路径</title>
    <link href="/2025/01/05/multipaths%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B7%AF%E5%BE%84/"/>
    <url>/2025/01/05/multipaths%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是多路径？"><a href="#一、什么是多路径？" class="headerlink" title="一、什么是多路径？"></a>一、什么是多路径？</h3><p>​**多路径（Multipath）**通常指的是数据在网络或存储系统中从源到目的地之间存在多个可能的传输路径。这个概念可以应用于不同的技术领域，但最常见的是在计算机网络和存储区域网络（SAN, Storage Area Network）中。</p><ol><li><strong>计算机网络中的多路径</strong>： 在计算机网络中，多路径路由允许数据包通过多个不同路径到达目的地。这可以通过动态路由协议来实现，这些协议能够根据当前网络状况选择最佳路径。多路径路由可以提高网络的可靠性和性能，因为它可以在一条路径失败时自动切换到另一条路径，并且可以通过负载均衡来优化带宽使用。</li><li><strong>存储系统中的多路径</strong>： 在存储系统中，特别是对于SAN环境，多路径是指服务器和存储设备之间的多个连接路径。它提供了冗余，以防止单点故障导致的数据访问中断。例如，如果一个HBA（主机总线适配器）、交换机端口或电缆发生故障，数据仍然可以通过其他路径进行访问。此外，多路径软件还可以提供负载均衡功能，将I&#x2F;O请求分散到多个可用路径上，从而提高性能。</li></ol><h3 id="二、多路径该如何配置？"><a href="#二、多路径该如何配置？" class="headerlink" title="二、多路径该如何配置？"></a>二、多路径该如何配置？</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment"># 1.安装程序</span><br>yum install device-mapper-multipath -y<br><br><span class="hljs-comment"># 2.将多路径软件添加至内核模块中</span><br>modprobe dm-multipath<br>modprode dm-round-robin<br><br><span class="hljs-comment"># 3.检查内核添加情况</span><br>lsmod | grep multipath<br>显示如下类似即可：<br><span class="hljs-comment"># dm_multipath           27427  3 dm_round_robin,dm_service_time</span><br><span class="hljs-comment"># dm_mod                123303  13 dm_round_robin,dm_multipath,dm_log,dm_mirror,dm_service_time</span><br><br><span class="hljs-comment"># 4.启动服务</span><br>systemctl enable multipathd --now<br><br><span class="hljs-comment"># 5.备份并编辑配置文件</span><br><span class="hljs-comment"># 先查看存储设备的WWID（以下两条命令均可）</span><br>sudo udevadm info --query=all --name=<span class="hljs-regexp">/dev/</span>sdX | grep ID_SERIAL<br>multipath -ll<br><br>cp <span class="hljs-regexp">/etc/mu</span>ltipath.conf <span class="hljs-regexp">/etc/mu</span>ltipath.conf.bak<br>vim <span class="hljs-regexp">/etc/mu</span>ltipath.conf<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">blacklist &#123;</span><br><span class="hljs-string">        wwid    3600508b1001c044c39717726236c68d5</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">defaults &#123;</span><br><span class="hljs-string">    user_friendly_names       yes</span><br><span class="hljs-string">    polling_interval            10</span><br><span class="hljs-string">    queue_without_daemon    no</span><br><span class="hljs-string">    flush_on_last_del          yes</span><br><span class="hljs-string">    checker_timeout 120</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">devices &#123;</span><br><span class="hljs-string">    device &#123;</span><br><span class="hljs-string">        vendor                 &quot;3par8400&quot;</span><br><span class="hljs-string">        product                &quot;HP&quot;</span><br><span class="hljs-string">        path_grouping_policy    asmdisk</span><br><span class="hljs-string">        no_path_retry           30</span><br><span class="hljs-string">        prio                    hp_sw</span><br><span class="hljs-string">        path_checker            tur</span><br><span class="hljs-string">        path_selector           &quot;round-robin 0&quot;</span><br><span class="hljs-string">        hardware_handler       &quot;0&quot;</span><br><span class="hljs-string">        failback                15</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 多路径设备信息</span><br><span class="hljs-string">multipaths &#123;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">           wwid    360002ac0000000000000000300023867</span><br><span class="hljs-string">           alias    mpathdisk01</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">如果有两个或者多个就再加一条即可。</span><br><span class="hljs-string">multipaths &#123;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string">           # 多路径设备的wwid放在这里</span><br><span class="hljs-string">           wwid    360002ac0000000000000000300023867</span><br><span class="hljs-string">           # 设置多路径设备的别名</span><br><span class="hljs-string">           # 例如：mpathdisk01</span><br><span class="hljs-string">           alias    mpathdisk01</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        multipath &#123;</span><br><span class="hljs-string">           wwid    360002ac0000000000000000400023867</span><br><span class="hljs-string">           alias    mpathdisk02</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 6.重启服务</span><br>systemctl restart multipathd<br><br><span class="hljs-comment"># 7.查看是否成功</span><br>lsblk<br><span class="hljs-comment">#结果类似</span><br>[root@test ~]<span class="hljs-comment"># lsblk</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">NAME            MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT</span><br><span class="hljs-string">sda               8:0    0   557G  0 disk</span><br><span class="hljs-string">├─sda1            8:1    0     4G  0 part  /boot</span><br><span class="hljs-string">└─sda2            8:2    0   553G  0 part</span><br><span class="hljs-string">  ├─centos-root 253:0    0 488.9G  0 lvm   /</span><br><span class="hljs-string">  └─centos-swap 253:1    0    64G  0 lvm   [SWAP]</span><br><span class="hljs-string">sdb               8:16   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sdc               8:32   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sdd               8:48   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">sde               8:64   0     2T  0 disk</span><br><span class="hljs-string">└─mpathdisk01   253:2    0     2T  0 mpath</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 查看状态</span><br>multipath -d -l<br><br><span class="hljs-comment"># 配置文件解析</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">blacklist：定义了一些被禁用的设备，只要 WWID 匹配了列表中的任何一个，它就会被黑名单所拒绝。</span><br><span class="hljs-string">wwid：唯一标识多路径设备的 32 位十六进制字符串。</span><br><span class="hljs-string">defaults：定义了一些默认设置，这些设置可以在其他部分被重写。</span><br><span class="hljs-string">user_friendly_names：使多路径设备更易于理解和使用。</span><br><span class="hljs-string">polling_interval：检查路径状态的频率（以秒为单位）。</span><br><span class="hljs-string">queue_without_daemon：定义了当 multipathd 守护程序处于未运行状态时处理 I/O 请求的行为。</span><br><span class="hljs-string">flush_on_last_del：在删除最后一个路径时是否刷新 IO 缓存。</span><br><span class="hljs-string">checker_timeout：指定检查器超时的时间。</span><br><span class="hljs-string">devices：包含一个或多个</span><br><span class="hljs-string">device 块，每个块都描述了一个特定的多路径设备。</span><br><span class="hljs-string">device：描述了一个多路径设备及其属性。</span><br><span class="hljs-string">vendor、product：设备的制造商和产品名称。</span><br><span class="hljs-string">path_grouping_policy：指定将路径分组到哪个组中。</span><br><span class="hljs-string">no_path_retry：当无法访问某个路径时进行重试的次数。</span><br><span class="hljs-string">prio：指定优先级算法，如 alua、emc、hp_sw 等。</span><br><span class="hljs-string">path_checker：指定 IO 路径检查器的类型。</span><br><span class="hljs-string">path_selector：指定选择路径的算法。例如，“round-robin 0” 表示依次将请求分发到每个路径上。</span><br><span class="hljs-string">hardware_handler：指定用于处理硬件错误的脚本或程序。</span><br><span class="hljs-string">failback：指定多长时间后进行故障切换。</span><br><span class="hljs-string">multipaths：包含一个或多个</span><br><span class="hljs-string">multipath 块，每个块都描述了一个设备的多个路径。</span><br><span class="hljs-string">alias：为指定的多路径设备定义别名。</span><br><span class="hljs-string"></span><br><span class="hljs-string">prio 是 multipath.conf 配置文件中的一个关键字，表示优先级算法。它可以指定多路径设备使用哪种算法来选择 I/O 请求路径。例如：</span><br><span class="hljs-string"></span><br><span class="hljs-string">prio alua</span><br><span class="hljs-string"></span><br><span class="hljs-string">以上配置指定了使用 Asymmetric Logical Unit Access(ALUA) 算法进行路径选择。这个算法主要用于 SAN 存储环境下，能够更好地处理存储阵列并发访问的问题。</span><br><span class="hljs-string">除了 ALUA，还有其他一些可用的优先级算法，如：</span><br><span class="hljs-string">emc：用于与 EMC 存储阵列配合使用。</span><br><span class="hljs-string">hp_sw：用于与 HP 存储阵列配合使用。</span><br><span class="hljs-string">rdac：用于与 LSI 存储阵列配合使用。</span><br><span class="hljs-string">如果没有指定 prio 设置，则默认为 const（优先选择第一个路径）算法，或者是上层应用程序自己控制路径选择。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo_常用指令</title>
    <link href="/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo是一个对新手很友好，并且可扩展能力强的静态网站生成框架</p><h4 id="1-创建一个空文档（只有空文档才能部署Hexo项目）"><a href="#1-创建一个空文档（只有空文档才能部署Hexo项目）" class="headerlink" title="1.创建一个空文档（只有空文档才能部署Hexo项目）"></a>1.创建一个空文档（只有空文档才能部署Hexo项目）</h4><h4 id="2-提前安装好Node-js、Git"><a href="#2-提前安装好Node-js、Git" class="headerlink" title="2.提前安装好Node.js、Git"></a>2.提前安装好Node.js、Git</h4><p>Hexo是基于Node.js的框架，部署时需要用到git进行部署（版本使用最新的即可）</p><h4 id="3-在空文档下打开cmd，然后依次输入以下命令"><a href="#3-在空文档下打开cmd，然后依次输入以下命令" class="headerlink" title="3.在空文档下打开cmd，然后依次输入以下命令"></a>3.在空文档下打开cmd，然后依次输入以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br></code></pre></td></tr></table></figure><p>此时，就已经完成了一个基础的hexo项目。</p><h4 id="4、部署到-GitHub-Pages"><a href="#4、部署到-GitHub-Pages" class="headerlink" title="4、部署到 GitHub Pages"></a>4、部署到 GitHub Pages</h4><p>创建GitHub仓库<br>在GitHub新建仓库，仓库名为用户名.github.io,这里的用户名替换为自己GitHub的用户名</p><p>比如我的用户名是bote798，新建的仓库名就是bote798.github.io</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89.png"></p><p>创建时选择 public 将仓库公开，推荐勾选 Add a REAMD file 为仓库创建描述文件</p><p><strong>配置SSH密钥连接GitHub</strong><br>由于21年GitHub 取消了对密码身份验证的支持，所以需要使用 GitHub 的个人访问令牌来代替密码，但每次上传都需要输入一次用户名和 token 显然比较麻烦，安全性也较低，配置 ssh 后就可以更加方便的上传文件</p><p>打开C盘，进入 Users 文件夹，接着打开电脑用户名文件夹，寻找是否有.ssh文件夹，如果有的话需删除掉，没有就继续进行下面的步骤</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89.png"></p><p>在该文件夹下右键打开Git Bash，输入以下命令生成ssh密钥，中途需按下三次回车键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;github绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>成功后在该目录下生成了.ssh文件夹，用记事本打开.ssh文件夹下的id_rsa.pub文件，复制里面的内容</p><p>在GitHub设置中点击SSH and GPG keys选项，点击New SSH key</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89.png"></p><p>出现以下界面</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%884%EF%BC%89.png"></p><p>填写 Title项 为 hexo，将复制的内容粘贴到 Key 文本框中，点击 Add SSH key 后需要输入一次 GitHub 密码，即可添加成功</p><p>再次打开Git Bush,输入以下命令验证是否能连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果询问是否继续连接，输入yes即可，如下图出现successfully即为连接成功</p><p><img src="/img/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%885%EF%BC%89.png"></p><p>最后，配置用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Github上的username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>到这里已经成功配置好了 ssh 连接，可以将本地博客部署到 GitHub 了·</p><p>在刚刚创建的博客文件夹下再次打开 git bush，安装 hexo-deployer-git 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>打开**_config.yml**文件，更改最后面的 <strong>deploy</strong> 内容，用户名替换为自己的 github 用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repository: https://github.com/用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h4 id="基础命令："><a href="#基础命令：" class="headerlink" title="基础命令："></a>基础命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br>hexo g<span class="hljs-comment"># 生成静态文件</span><br>hexo d<span class="hljs-comment"># 上传到GitHub</span><br><span class="hljs-comment"># 删除文章只需要将source中的markdown文件删掉，然后执行 hexo g 即可</span><br></code></pre></td></tr></table></figure><p>主题可选：<a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>点击后进入其GitHub仓库查看对应指引更换主题</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装vim插件(coc.nvim代码补全)</title>
    <link href="/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <url>/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装vim插件（coc-nvim代码补全）"><a href="#安装vim插件（coc-nvim代码补全）" class="headerlink" title="安装vim插件（coc.nvim代码补全）"></a>安装vim插件（coc.nvim代码补全）</h2><ol><li><p>安装node.js和npm(版本最好高一点)</p><p>最好再找个安装教程看一下环境变量配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install nodejs<br><span class="hljs-built_in">sudo</span> apt install npm<br><span class="hljs-comment"># 设置一下环境变量</span><br>curl -sL install-node.now.sh/lts | bash<br></code></pre></td></tr></table></figure></li><li><p>安装vim－plug（插件管理器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \<br>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<br><br><span class="hljs-built_in">mkdir</span> -p  ~/.vim/autoload/<br><span class="hljs-built_in">cp</span> plug.vim  ~/.vim/autoload/plug.vim<br></code></pre></td></tr></table></figure></li><li><p>.vimrc文件有的系统有，有的没有，没有就自己建一个。这是系统的vim配置文件，home中的是用户的vim配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.vimrc<br></code></pre></td></tr></table></figure><p>将这些复制到vimrc中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">call plug#begin()<br><span class="hljs-string">&quot; The default plugin directory will be as follows:</span><br><span class="hljs-string">&quot;</span>   - Vim (Linux/macOS): <span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span><br><span class="hljs-string">&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;</span><br><span class="hljs-string">&quot;</span>   - Neovim (Linux/macOS/Windows): stdpath(<span class="hljs-string">&#x27;data&#x27;</span>) . <span class="hljs-string">&#x27;/plugged&#x27;</span><br><span class="hljs-string">&quot; You can specify a custom plugin directory by passing it as the argument</span><br><span class="hljs-string">&quot;</span>   - e.g. `call plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)`<br><span class="hljs-string">&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;</span><br><span class="hljs-string">&quot;</span> Make sure you use single quotes<br> <br><span class="hljs-string">&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span><br><span class="hljs-string">Plug &#x27;junegunn/vim-easy-align&#x27;</span><br><span class="hljs-string">&quot;</span> Any valid git URL is allowed<br>Plug <span class="hljs-string">&#x27;https://github.com/junegunn/vim-github-dashboard.git&#x27;</span><br> <br><span class="hljs-string">&quot; Multiple Plug commands can be written in a single line using | separators</span><br><span class="hljs-string">Plug &#x27;SirVer/ultisnips&#x27; | Plug &#x27;honza/vim-snippets&#x27;</span><br><span class="hljs-string">&quot;</span> On-demand loading<br>Plug <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="hljs-string">&#x27;on&#x27;</span>:  <span class="hljs-string">&#x27;NERDTreeToggle&#x27;</span> &#125;<br>Plug <span class="hljs-string">&#x27;tpope/vim-fireplace&#x27;</span>, &#123; <span class="hljs-string">&#x27;for&#x27;</span>: <span class="hljs-string">&#x27;clojure&#x27;</span> &#125;<br> <br><span class="hljs-string">&quot; Using a non-default branch</span><br><span class="hljs-string">Plug &#x27;rdnetto/YCM-Generator&#x27;, &#123; &#x27;branch&#x27;: &#x27;stable&#x27; &#125;</span><br><span class="hljs-string">&quot;</span> Using a tagged release; wildcard allowed (requires git 1.9.2 or above)<br>Plug <span class="hljs-string">&#x27;fatih/vim-go&#x27;</span>, &#123; <span class="hljs-string">&#x27;tag&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span> &#125;<br> <br><span class="hljs-string">&quot; Plugin options</span><br><span class="hljs-string">Plug &#x27;nsf/gocode&#x27;, &#123; &#x27;tag&#x27;: &#x27;v.20150303&#x27;, &#x27;rtp&#x27;: &#x27;vim&#x27; &#125;</span><br><span class="hljs-string">&quot;</span> Plugin outside ~/.vim/plugged with post-update hook<br>Plug <span class="hljs-string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="hljs-string">&#x27;dir&#x27;</span>: <span class="hljs-string">&#x27;~/.fzf&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;./install --all&#x27;</span> &#125;<br> <br><span class="hljs-string">&quot; Unmanaged plugin (manually installed and updated)</span><br><span class="hljs-string">Plug &#x27;~/my-prototype-plugin&#x27;</span><br><span class="hljs-string">&quot;</span> Initialize plugin system<br><span class="hljs-string">&quot; - Automatically executes `filetype plugin indent on` and `syntax enable`.</span><br><span class="hljs-string">call plug#end()</span><br><span class="hljs-string">&quot;</span> You can revert the settings after the call like so:<br><span class="hljs-string">&quot;   filetype indent off   &quot;</span> Disable file-type-specific indentation<br><span class="hljs-string">&quot;   syntax off            &quot;</span> Disable syntax highlighting<br></code></pre></td></tr></table></figure></li><li><p>每一次在.vimrc文件中加入插件配置后，保存退出执行插件安装命令 PlugInstall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载插件                             :PlugInstall<br><br>下载新的插件                在call plug#begin()和call plug#end()之间添加一下新的插件<br><br>安装特定插件                          :PlugInstall gist-vim<br><br>卸载插件                             :PlugClean<br><br>更新vim-plug                        :PlugUpgrade<br><br>更新所有已经安装的插件         :PlugUpdate<br><br>查看插件状态                         :PlugStatus<br></code></pre></td></tr></table></figure></li><li><p>加入coc.nvim配置，执行安装命令，在nvim中执行检查命令检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在Plug#begin() 和 Plug#end()中间加这个</span><br>Plug <span class="hljs-string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="hljs-string">&#x27;branch&#x27;</span>: <span class="hljs-string">&#x27;release&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置python补全servers</p><p>相关网址: <a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers#python">Language servers · neoclide&#x2F;coc.nvim Wiki · GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install <span class="hljs-string">&#x27;python-language-server[all]&#x27;</span><br>vim ~/.vimrc<br>:CocInstall coc-pyright<br></code></pre></td></tr></table></figure><p><strong>记得安装一下cmake吧，之后安装总用</strong></p><p>退回主目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install cmake<br><span class="hljs-built_in">sudo</span> apt-get install cmake-qt-gui<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
