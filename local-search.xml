<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo_常用指令</title>
    <link href="/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/01/04/Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo是一个对新手很友好，并且可扩展能力强的静态网站生成框架</p><h4 id="1-创建一个空文档（只有空文档才能部署Hexo项目）"><a href="#1-创建一个空文档（只有空文档才能部署Hexo项目）" class="headerlink" title="1.创建一个空文档（只有空文档才能部署Hexo项目）"></a>1.创建一个空文档（只有空文档才能部署Hexo项目）</h4><h4 id="2-提前安装好Node-js、Git"><a href="#2-提前安装好Node-js、Git" class="headerlink" title="2.提前安装好Node.js、Git"></a>2.提前安装好Node.js、Git</h4><p>Hexo是基于Node.js的框架，部署时需要用到git进行部署（版本使用最新的即可）</p><h4 id="3-在空文档下打开cmd，然后依次输入以下命令"><a href="#3-在空文档下打开cmd，然后依次输入以下命令" class="headerlink" title="3.在空文档下打开cmd，然后依次输入以下命令"></a>3.在空文档下打开cmd，然后依次输入以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br></code></pre></td></tr></table></figure><p>此时，就已经完成了一个基础的hexo项目。</p><h4 id="4、部署到-GitHub-Pages"><a href="#4、部署到-GitHub-Pages" class="headerlink" title="4、部署到 GitHub Pages"></a>4、部署到 GitHub Pages</h4><p>创建GitHub仓库<br>在GitHub新建仓库，仓库名为用户名.github.io,这里的用户名替换为自己GitHub的用户名</p><p>比如我的用户名是bote798，新建的仓库名就是bote798.github.io</p><p><img src="C:\Users\LZH18\Desktop\7d08a991a08f4b118fd73024e97c3f76.png"></p><p>创建时选择 public 将仓库公开，推荐勾选 Add a REAMD file 为仓库创建描述文件</p><p><strong>配置SSH密钥连接GitHub</strong><br>由于21年GitHub 取消了对密码身份验证的支持，所以需要使用 GitHub 的个人访问令牌来代替密码，但每次上传都需要输入一次用户名和 token 显然比较麻烦，安全性也较低，配置 ssh 后就可以更加方便的上传文件</p><p>打开C盘，进入 Users 文件夹，接着打开电脑用户名文件夹，寻找是否有.ssh文件夹，如果有的话需删除掉，没有就继续进行下面的步骤</p><p><img src="C:\Users\LZH18\Desktop\f275411a6a634320a4dc76c9022ca46a.png"></p><p>在该文件夹下右键打开Git Bash，输入以下命令生成ssh密钥，中途需按下三次回车键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;github绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>成功后在该目录下生成了.ssh文件夹，用记事本打开.ssh文件夹下的id_rsa.pub文件，复制里面的内容</p><p>在GitHub设置中点击SSH and GPG keys选项，点击New SSH key</p><p><img src="C:\Users\LZH18\Desktop\a209696f38564499bf70996908b665d1.png"></p><p>出现以下界面</p><p><img src="C:\Users\LZH18\Desktop\4bbbbfb0c0d5493888ad8f81374e9246.png"></p><p>填写 Title项 为 hexo，将复制的内容粘贴到 Key 文本框中，点击 Add SSH key 后需要输入一次 GitHub 密码，即可添加成功</p><p>再次打开Git Bush,输入以下命令验证是否能连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果询问是否继续连接，输入yes即可，如下图出现successfully即为连接成功</p><p><img src="C:\Users\LZH18\Desktop\188e4b4b5e6747ae8f8fdb037dd2e372.png"></p><p>最后，配置用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Github上的username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub绑定的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>到这里已经成功配置好了 ssh 连接，可以将本地博客部署到 GitHub 了·</p><p>在刚刚创建的博客文件夹下再次打开 git bush，安装 hexo-deployer-git 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>打开**_config.yml**文件，更改最后面的 <strong>deploy</strong> 内容，用户名替换为自己的 github 用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repository: https://github.com/用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h4 id="基础命令："><a href="#基础命令：" class="headerlink" title="基础命令："></a>基础命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<span class="hljs-comment"># 安装hexo</span><br>hexo init<span class="hljs-comment"># 初始化hexo</span><br>npm install<span class="hljs-comment"># 构建需要的环境与node_modules</span><br>hexo server<span class="hljs-comment"># 启动服务器</span><br>hexo g<span class="hljs-comment"># 生成静态文件</span><br>hexo d<span class="hljs-comment"># 上传到GitHub</span><br><span class="hljs-comment"># 删除文章只需要将source中的markdown文件删掉，然后执行 hexo g 即可</span><br></code></pre></td></tr></table></figure><p>主题可选：<a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>点击后进入其GitHub仓库查看对应指引更换主题</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装vim插件(coc.nvim代码补全)</title>
    <link href="/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <url>/2025/01/04/%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6-coc-nvim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装vim插件（coc-nvim代码补全）"><a href="#安装vim插件（coc-nvim代码补全）" class="headerlink" title="安装vim插件（coc.nvim代码补全）"></a>安装vim插件（coc.nvim代码补全）</h2><ol><li><p>安装node.js和npm(版本最好高一点)</p><p>最好再找个安装教程看一下环境变量配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nodejs</span><br><span class="line"><span class="built_in">sudo</span> apt install npm</span><br><span class="line"><span class="comment"># 设置一下环境变量</span></span><br><span class="line">curl -sL install-node.now.sh/lts | bash</span><br></pre></td></tr></table></figure></li><li><p>安装vim－plug（插件管理器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p  ~/.vim/autoload/</span><br><span class="line"><span class="built_in">cp</span> plug.vim  ~/.vim/autoload/plug.vim</span><br></pre></td></tr></table></figure></li><li><p>.vimrc文件有的系统有，有的没有，没有就自己建一个。这是系统的vim配置文件，home中的是用户的vim配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>将这些复制到vimrc中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin()</span><br><span class="line"><span class="string">&quot; The default plugin directory will be as follows:</span></span><br><span class="line"><span class="string">&quot;</span>   - Vim (Linux/macOS): <span class="string">&#x27;~/.vim/plugged&#x27;</span></span><br><span class="line"><span class="string">&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>   - Neovim (Linux/macOS/Windows): stdpath(<span class="string">&#x27;data&#x27;</span>) . <span class="string">&#x27;/plugged&#x27;</span></span><br><span class="line"><span class="string">&quot; You can specify a custom plugin directory by passing it as the argument</span></span><br><span class="line"><span class="string">&quot;</span>   - e.g. `call plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)`</span><br><span class="line"><span class="string">&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> Make sure you use single quotes</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align</span></span><br><span class="line"><span class="string">Plug &#x27;junegunn/vim-easy-align&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> Any valid git URL is allowed</span><br><span class="line">Plug <span class="string">&#x27;https://github.com/junegunn/vim-github-dashboard.git&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Multiple Plug commands can be written in a single line using | separators</span></span><br><span class="line"><span class="string">Plug &#x27;SirVer/ultisnips&#x27; | Plug &#x27;honza/vim-snippets&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> On-demand loading</span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span>, &#123; <span class="string">&#x27;on&#x27;</span>:  <span class="string">&#x27;NERDTreeToggle&#x27;</span> &#125;</span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fireplace&#x27;</span>, &#123; <span class="string">&#x27;for&#x27;</span>: <span class="string">&#x27;clojure&#x27;</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Using a non-default branch</span></span><br><span class="line"><span class="string">Plug &#x27;rdnetto/YCM-Generator&#x27;, &#123; &#x27;branch&#x27;: &#x27;stable&#x27; &#125;</span></span><br><span class="line"><span class="string">&quot;</span> Using a tagged release; wildcard allowed (requires git 1.9.2 or above)</span><br><span class="line">Plug <span class="string">&#x27;fatih/vim-go&#x27;</span>, &#123; <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;*&#x27;</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Plugin options</span></span><br><span class="line"><span class="string">Plug &#x27;nsf/gocode&#x27;, &#123; &#x27;tag&#x27;: &#x27;v.20150303&#x27;, &#x27;rtp&#x27;: &#x27;vim&#x27; &#125;</span></span><br><span class="line"><span class="string">&quot;</span> Plugin outside ~/.vim/plugged with post-update hook</span><br><span class="line">Plug <span class="string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="string">&#x27;dir&#x27;</span>: <span class="string">&#x27;~/.fzf&#x27;</span>, <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;./install --all&#x27;</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot; Unmanaged plugin (manually installed and updated)</span></span><br><span class="line"><span class="string">Plug &#x27;~/my-prototype-plugin&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> Initialize plugin system</span><br><span class="line"><span class="string">&quot; - Automatically executes `filetype plugin indent on` and `syntax enable`.</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br><span class="line"><span class="string">&quot;</span> You can revert the settings after the call like so:</span><br><span class="line"><span class="string">&quot;   filetype indent off   &quot;</span> Disable file-type-specific indentation</span><br><span class="line"><span class="string">&quot;   syntax off            &quot;</span> Disable syntax highlighting</span><br></pre></td></tr></table></figure></li><li><p>每一次在.vimrc文件中加入插件配置后，保存退出执行插件安装命令 PlugInstall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">下载插件                             :PlugInstall</span><br><span class="line"></span><br><span class="line">下载新的插件                在call plug#begin()和call plug#end()之间添加一下新的插件</span><br><span class="line"></span><br><span class="line">安装特定插件                          :PlugInstall gist-vim</span><br><span class="line"></span><br><span class="line">卸载插件                             :PlugClean</span><br><span class="line"></span><br><span class="line">更新vim-plug                        :PlugUpgrade</span><br><span class="line"></span><br><span class="line">更新所有已经安装的插件         :PlugUpdate</span><br><span class="line"></span><br><span class="line">查看插件状态                         :PlugStatus</span><br></pre></td></tr></table></figure></li><li><p>加入coc.nvim配置，执行安装命令，在nvim中执行检查命令检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Plug#begin() 和 Plug#end()中间加这个</span></span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;release&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置python补全servers</p><p>相关网址: <a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers#python">Language servers · neoclide&#x2F;coc.nvim Wiki · GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install <span class="string">&#x27;python-language-server[all]&#x27;</span></span><br><span class="line">vim ~/.vimrc</span><br><span class="line">:CocInstall coc-pyright</span><br></pre></td></tr></table></figure><p><strong>记得安装一下cmake吧，之后安装总用</strong></p><p>退回主目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install cmake</span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake-qt-gui</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/04/hello-world/"/>
    <url>/2025/01/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
